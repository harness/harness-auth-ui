{
  "swagger": "2.0",
  "info": {
    "version": "2.0",
    "title": "CD NextGen API Reference"
  },
  "host": "localhost",
  "tags": [
    {
      "name": "accounts"
    },
    {
      "name": "pipelines"
    },
    {
      "name": "connectors"
    },
    {
      "name": "filters"
    },
    {
      "name": "git-sync-branch"
    },
    {
      "name": "git-sync-entities"
    },
    {
      "name": "git-sync"
    },
    {
      "name": "git-sync-trigger"
    },
    {
      "name": "licenses"
    },
    {
      "name": "version"
    },
    {
      "name": "roleassignments"
    },
    {
      "name": "user"
    },
    {
      "name": "authentication-settings"
    },
    {
      "name": "activityHistory"
    },
    {
      "name": "artifacts"
    },
    {
      "name": "delegate-profilesng"
    },
    {
      "name": "delegate2-tasks"
    },
    {
      "name": "entitySetupUsage"
    },
    {
      "name": "environments"
    },
    {
      "name": "environmentsV2"
    },
    {
      "name": "invites"
    },
    {
      "name": "gcp"
    },
    {
      "name": "health"
    },
    {
      "name": "aggregate"
    },
    {
      "name": "secretsfiles"
    },
    {
      "name": "secret-managers"
    },
    {
      "name": "secrets"
    },
    {
      "name": "v2secrets"
    },
    {
      "name": "organizations"
    },
    {
      "name": "projects"
    },
    {
      "name": "user-groups"
    },
    {
      "name": "yamlschema"
    },
    {
      "name": "services"
    },
    {
      "name": "servicesV2"
    },
    {
      "name": "users"
    },
    {
      "name": "executions"
    },
    {
      "name": "jira"
    },
    {
      "name": "source-code-manager"
    },
    {
      "name": "user-info"
    },
    {
      "name": "webhook"
    },
    {
      "name": "inputSets"
    },
    {
      "name": "signup"
    },
    {
      "name": "partial-yaml-schema"
    },
    {
      "name": "yaml-schema"
    },
    {
      "name": "yaml-snippet"
    }
  ],
  "schemes": ["https", "http"],
  "paths": {
    "/accounts/{accountIdentifier}": {
      "get": {
        "tags": ["accounts"],
        "summary": "Get Account",
        "description": "",
        "operationId": "getAccount",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseAccount"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipelines/configuration/strategies": {
      "get": {
        "tags": ["pipelines"],
        "summary": "Gets Execution Strategy list",
        "description": "",
        "operationId": "getExecutionStrategyList",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMapServiceDefinitionTypeListExecutionStrategyType"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipelines/configuration/strategies/yaml-snippets": {
      "get": {
        "tags": ["pipelines"],
        "summary": "Gets Yaml for Execution Strategy based on deployment type and selected strategy",
        "description": "",
        "operationId": "getExecutionStrategyYaml",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "serviceDefinitionType",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": ["Ssh", "Kubernetes", "Ecs", "NativeHelm", "Pcf"]
          },
          {
            "name": "strategyType",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": ["Basic", "Canary", "BlueGreen", "Rolling", "Default"]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseString"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipelines/configuration/strategies/provisioner-yaml-snippets": {
      "get": {
        "tags": ["pipelines"],
        "summary": "Gets Yaml for Execution Strategy based on Provisioner Type",
        "description": "",
        "operationId": "getProvisionerExecutionStrategyYaml",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "provisionerType",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "TERRAFORM",
              "CLOUD_FORMATION",
              "AZURE_ARM",
              "SHELL_SCRIPT"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseString"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipelines/configuration/serviceDefinitionTypes": {
      "get": {
        "tags": ["pipelines"],
        "summary": "Git list of service definition types",
        "description": "",
        "operationId": "getServiceDefinitionTypes",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListServiceDefinitionType"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipelines/configuration/provisioner-steps": {
      "get": {
        "tags": ["pipelines"],
        "summary": "get provisioner steps",
        "description": "",
        "operationId": "getProvisionerSteps",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseStepCategory"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipelines/configuration/steps": {
      "get": {
        "tags": ["pipelines"],
        "summary": "get steps for given service definition type",
        "description": "",
        "operationId": "getSteps",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "serviceDefinitionType",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": ["Ssh", "Kubernetes", "Ecs", "NativeHelm", "Pcf"]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseStepCategory"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipelines/execute/validate": {
      "get": {
        "tags": ["pipelines"],
        "summary": "Validate a Pipeline",
        "description": "",
        "operationId": "validatePipeline",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseNGPipelineValidationInfo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipelines/execute/{identifier}": {
      "post": {
        "tags": ["pipelines"],
        "summary": "Execute a pipeline with inputSet pipeline yaml",
        "description": "",
        "operationId": "postPipelineExecuteWithInputSetYaml",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "useFQNIfError",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NgPipeline"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseNGPipelineExecutionResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipelines/execute/{identifier}/inputSetList": {
      "post": {
        "tags": ["pipelines"],
        "summary": "Execute a pipeline with input set references list",
        "description": "",
        "operationId": "postPipelineExecuteWithInputSetList",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "useFQNIfError",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MergeInputSetRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseNGPipelineExecutionResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/connectors/{identifier}": {
      "get": {
        "tags": ["connectors"],
        "summary": "Get Connector",
        "description": "",
        "operationId": "getConnector",
        "consumes": [
          "application/json",
          "text/yaml",
          "text/html",
          "text/plain"
        ],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseConnectorResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": ["connectors"],
        "summary": "Delete a connector by identifier",
        "description": "",
        "operationId": "deleteConnector",
        "consumes": [
          "application/json",
          "text/yaml",
          "text/html",
          "text/plain"
        ],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "rootFolder",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filePath",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "commitMsg",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "createPr",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseBoolean"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/connectors": {
      "get": {
        "tags": ["connectors"],
        "summary": "Gets Connector list",
        "description": "",
        "operationId": "getConnectorList",
        "consumes": [
          "application/json",
          "text/yaml",
          "text/html",
          "text/plain"
        ],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "searchTerm",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "K8sCluster",
              "Git",
              "Splunk",
              "AppDynamics",
              "Vault",
              "DockerRegistry",
              "Local",
              "GcpKms",
              "Gcp",
              "Aws",
              "Artifactory",
              "Jira",
              "Nexus",
              "Github",
              "Gitlab",
              "Bitbucket",
              "Codecommit",
              "CEAws",
              "CEAzure",
              "GcpCloudCost",
              "CEK8sCluster",
              "HttpHelmRepo",
              "NewRelic"
            ]
          },
          {
            "name": "category",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "CLOUD_PROVIDER",
              "SECRET_MANAGER",
              "CLOUD_COST",
              "ARTIFACTORY",
              "CODE_REPO",
              "MONITORING",
              "TICKETING"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageConnectorResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": ["connectors"],
        "summary": "Creates a Connector",
        "description": "",
        "operationId": "createConnector",
        "consumes": [
          "application/json",
          "text/yaml",
          "text/html",
          "text/plain"
        ],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Connector"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "rootFolder",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filePath",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "commitMsg",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "createPr",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "targetBranchForPr",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseConnectorResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["connectors"],
        "summary": "Updates a Connector",
        "description": "",
        "operationId": "updateConnector",
        "consumes": [
          "application/json",
          "text/yaml",
          "text/html",
          "text/plain"
        ],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Connector"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "rootFolder",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filePath",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "commitMsg",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "createPr",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "lastObjectId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "targetBranchForPr",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseConnectorResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/connectors/listV2": {
      "post": {
        "tags": ["connectors"],
        "summary": "Gets Connector list",
        "description": "",
        "operationId": "getConnectorListV2",
        "consumes": [
          "application/json",
          "text/yaml",
          "text/html",
          "text/plain"
        ],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "searchTerm",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filterIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "includeAllConnectorsAvailableAtScope",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ConnectorFilterProperties"
            }
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageConnectorResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/connectors/stats": {
      "get": {
        "tags": ["connectors"],
        "summary": "Get Connectors statistics",
        "description": "",
        "operationId": "getConnectorStatistics",
        "consumes": [
          "application/json",
          "text/yaml",
          "text/html",
          "text/plain"
        ],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseConnectorStatistics"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/connectors/listbyfqn": {
      "post": {
        "tags": ["connectors"],
        "summary": "Gets Connector list",
        "description": "",
        "operationId": "listConnectorByFQN",
        "consumes": [
          "application/json",
          "text/yaml",
          "text/html",
          "text/plain"
        ],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListConnectorResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/connectors/getceawstemplateurl": {
      "post": {
        "tags": ["connectors"],
        "summary": "Get CE Aws Connector Template URL Environment Wise",
        "description": "",
        "operationId": "getCEAwsTemplate",
        "consumes": [
          "application/json",
          "text/yaml",
          "text/html",
          "text/plain"
        ],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "eventsEnabled",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "curEnabled",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "optimizationEnabled",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseString"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/connectors/testConnection/{identifier}": {
      "post": {
        "tags": ["connectors"],
        "summary": "Test the connection",
        "description": "",
        "operationId": "getTestConnectionResult",
        "consumes": [
          "application/json",
          "text/yaml",
          "text/html",
          "text/plain"
        ],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseConnectorValidationResult"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/connectors/catalogue": {
      "get": {
        "tags": ["connectors"],
        "summary": "Get Connector Catalogue",
        "description": "",
        "operationId": "getConnectorCatalogue",
        "consumes": [
          "application/json",
          "text/yaml",
          "text/html",
          "text/plain"
        ],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseConnectorCatalogueResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/connectors/testGitRepoConnection/{identifier}": {
      "post": {
        "tags": ["connectors"],
        "summary": "Test the connection",
        "description": "",
        "operationId": "getTestGitRepoConnectionResult",
        "consumes": [
          "application/json",
          "text/yaml",
          "text/html",
          "text/plain"
        ],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoURL",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseConnectorValidationResult"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/connectors/validateUniqueIdentifier": {
      "get": {
        "tags": ["connectors"],
        "summary": "Validate Identifier is unique",
        "description": "",
        "operationId": "validateTheIdentifierIsUnique",
        "consumes": [
          "application/json",
          "text/yaml",
          "text/html",
          "text/plain"
        ],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseBoolean"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/filters/{identifier}": {
      "get": {
        "tags": ["filters"],
        "summary": "Get Filter",
        "description": "",
        "operationId": "getFilter",
        "consumes": [
          "application/json",
          "text/yaml",
          "text/html",
          "text/plain"
        ],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "Connector",
              "PipelineSetup",
              "PipelineExecution",
              "Deployment",
              "Audit"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseFilterDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": ["filters"],
        "summary": "Delete a filter",
        "description": "",
        "operationId": "deleteFilter",
        "consumes": [
          "application/json",
          "text/yaml",
          "text/html",
          "text/plain"
        ],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "Connector",
              "PipelineSetup",
              "PipelineExecution",
              "Deployment",
              "Audit"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseBoolean"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/filters": {
      "get": {
        "tags": ["filters"],
        "summary": "Get Filter",
        "description": "",
        "operationId": "getFilterList",
        "consumes": [
          "application/json",
          "text/yaml",
          "text/html",
          "text/plain"
        ],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "Connector",
              "PipelineSetup",
              "PipelineExecution",
              "Deployment",
              "Audit"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageFilterDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": ["filters"],
        "summary": "Create a Filter",
        "description": "",
        "operationId": "postFilter",
        "consumes": [
          "application/json",
          "text/yaml",
          "text/html",
          "text/plain"
        ],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/FilterDTO"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseFilterDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["filters"],
        "summary": "Update a Filter",
        "description": "",
        "operationId": "updateFilter",
        "consumes": [
          "application/json",
          "text/yaml",
          "text/html",
          "text/plain"
        ],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/FilterDTO"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseFilterDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/git-sync-branch/listRepoBranches": {
      "get": {
        "tags": ["git-sync-branch"],
        "summary": "Gets list of branches by Connector Identifier",
        "description": "",
        "operationId": "getListOfBranchesByConnector",
        "consumes": ["application/json", "text/yaml", "text/html"],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "identifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoURL",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListString"
            }
          }
        }
      }
    },
    "/git-sync-branch/listBranchesByGitConfig": {
      "get": {
        "tags": ["git-sync-branch"],
        "summary": "Gets list of branches by Git Config Identifier",
        "description": "",
        "operationId": "getListOfBranchesByGitConfig",
        "consumes": ["application/json", "text/yaml", "text/html"],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "yamlGitConfigIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListString"
            }
          }
        }
      }
    },
    "/git-sync-branch/sync": {
      "post": {
        "tags": ["git-sync-branch"],
        "summary": "Sync the new branch into harness",
        "description": "",
        "operationId": "syncGitBranch",
        "consumes": ["application/json", "text/yaml", "text/html"],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "repoIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseBoolean"
            }
          }
        }
      }
    },
    "/git-sync-branch/listBranchesWithStatus": {
      "get": {
        "tags": ["git-sync-branch"],
        "summary": "Gets list of branches with their status by Git Config Identifier",
        "description": "",
        "operationId": "getListOfBranchesWithStatus",
        "consumes": ["application/json", "text/yaml", "text/html"],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "yamlGitConfigIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "searchTerm",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageGitBranchDTO"
            }
          }
        }
      }
    },
    "/git-sync-entities/summary": {
      "post": {
        "tags": ["git-sync-entities"],
        "summary": "List Git Sync Entity by product for List of Repos and Entities",
        "description": "",
        "operationId": "listGitSyncEntitiesSummaryForRepoAndTypes",
        "consumes": ["application/json", "text/yaml", "text/html"],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GitEntityFilterProperties"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseGitSyncRepoFilesList"
            }
          }
        }
      }
    },
    "/git-sync-entities/branch/{branch}": {
      "post": {
        "tags": ["git-sync-entities"],
        "summary": "List Git Sync Entity by product for Repo and Branch and List of Entities",
        "description": "",
        "operationId": "listGitSyncEntitiesSummaryForRepoAndBranch",
        "consumes": ["application/json", "text/yaml", "text/html"],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "gitSyncConfigId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GitEntityBranchFilterSummaryProperties"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListGitSyncEntityListDTO"
            }
          }
        }
      }
    },
    "/git-sync-entities/{entityType}": {
      "get": {
        "tags": ["git-sync-entities"],
        "summary": "Get Git Sync Entity By Type",
        "description": "",
        "operationId": "listGitSyncEntitiesByType",
        "consumes": ["application/json", "text/yaml", "text/html"],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "gitSyncConfigId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "entityType",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "Projects",
              "Pipelines",
              "PipelineSteps",
              "Connectors",
              "Secrets",
              "Service",
              "Environment",
              "InputSets",
              "CvConfig",
              "Delegates",
              "DelegateConfigurations",
              "CvVerificationJob",
              "IntegrationStage",
              "IntegrationSteps",
              "CvKubernetesActivitySource",
              "DeploymentSteps",
              "DeploymentStage",
              "ApprovalStage",
              "Triggers"
            ]
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "moduleType",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageGitSyncEntityListDTO"
            }
          }
        }
      }
    },
    "/git-sync": {
      "get": {
        "tags": ["git-sync"],
        "summary": "List Git Sync",
        "description": "",
        "operationId": "listGitSync",
        "consumes": [
          "application/json",
          "text/yaml",
          "text/html",
          "text/plain"
        ],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GitSyncConfig"
              }
            }
          }
        }
      },
      "post": {
        "tags": ["git-sync"],
        "summary": "Create a Git Sync",
        "description": "",
        "operationId": "postGitSync",
        "consumes": [
          "application/json",
          "text/yaml",
          "text/html",
          "text/plain"
        ],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GitSyncConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GitSyncConfig"
            }
          }
        }
      },
      "put": {
        "tags": ["git-sync"],
        "summary": "Update Git Sync by id",
        "description": "",
        "operationId": "putGitSync",
        "consumes": [
          "application/json",
          "text/yaml",
          "text/html",
          "text/plain"
        ],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GitSyncConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GitSyncConfig"
            }
          }
        }
      }
    },
    "/git-sync/{identifier}/folder/{folderIdentifier}/default": {
      "put": {
        "tags": ["git-sync"],
        "summary": "Update Git Sync default by id",
        "description": "",
        "operationId": "putGitSyncDefault",
        "consumes": [
          "application/json",
          "text/yaml",
          "text/html",
          "text/plain"
        ],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organizationId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "folderIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GitSyncConfig"
            }
          }
        }
      }
    },
    "/git-sync/git-sync-enabled": {
      "get": {
        "tags": ["git-sync"],
        "summary": "Is Git Sync EnabledForProject",
        "description": "",
        "operationId": "isGitSyncEnabled",
        "consumes": [
          "application/json",
          "text/yaml",
          "text/html",
          "text/plain"
        ],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/git-sync-trigger/webhook/{entityToken}": {
      "post": {
        "tags": ["git-sync-trigger"],
        "operationId": "webhookCatcher",
        "consumes": ["application/json"],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "entityToken",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/RestResponse"
            }
          }
        }
      }
    },
    "/licenses/{identifier}}": {
      "get": {
        "tags": ["licenses"],
        "summary": "Gets Module License",
        "description": "",
        "operationId": "getModuleLicense",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseModuleLicenseDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/licenses": {
      "get": {
        "tags": ["licenses"],
        "summary": "Gets Module License By Account And ModuleType",
        "description": "",
        "operationId": "getModuleLicenseByAccountAndModuleType",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "moduleType",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": ["CD", "CI", "CV", "CE", "CF"]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseModuleLicenseDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": ["licenses"],
        "summary": "Creates Module License",
        "description": "",
        "operationId": "createModuleLicense",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ModuleLicenseDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseModuleLicenseDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["licenses"],
        "summary": "Updates Module License",
        "description": "",
        "operationId": "updateModuleLicense",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ModuleLicenseDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseModuleLicenseDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/licenses/{identifier}": {
      "delete": {
        "tags": ["licenses"],
        "summary": "Deletes Module License",
        "description": "",
        "operationId": "deleteModuleLicense",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseModuleLicenseDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/licenses/account": {
      "get": {
        "tags": ["licenses"],
        "summary": "Gets All Module License Information in Account",
        "description": "",
        "operationId": "getAccountLicenses",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseAccountLicensesDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/licenses/trial": {
      "post": {
        "tags": ["licenses"],
        "summary": "Starts Trail License For A Module",
        "description": "",
        "operationId": "startTrialLicense",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/StartTrialRequestDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseModuleLicenseDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/version": {
      "get": {
        "tags": ["version"],
        "summary": "Get Version Info",
        "description": "",
        "operationId": "getVersionInfo",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseVersionPackage"
            }
          }
        }
      }
    },
    "/roleassignments/filter": {
      "post": {
        "tags": ["roleassignments"],
        "summary": "Get Filtered Role Assignments",
        "description": "",
        "operationId": "getFilteredRoleAssignmentList",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 50,
            "maximum": 100,
            "format": "int32"
          },
          {
            "name": "sortOrders",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RoleAssignmentFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageRoleAssignmentResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/roleassignments": {
      "post": {
        "tags": ["roleassignments"],
        "summary": "Create Role Assignment",
        "description": "",
        "operationId": "createRoleAssignment",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RoleAssignment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseRoleAssignmentResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/roleassignments/multi": {
      "post": {
        "tags": ["roleassignments"],
        "summary": "Create Multiple Role Assignments",
        "description": "",
        "operationId": "createRoleAssignments",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BatchRoleAssignmentCreateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListRoleAssignmentResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user/aggregate/{userId}": {
      "get": {
        "tags": ["user"],
        "summary": "Get a user by userId for access control",
        "description": "",
        "operationId": "getUserAggregated",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseUserAggregate"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user/aggregate": {
      "post": {
        "tags": ["user"],
        "summary": "Get a page of active users for access control",
        "description": "",
        "operationId": "getActiveUsersAggregated",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "searchTerm",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageIndex",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 50,
            "maximum": 100,
            "format": "int32"
          },
          {
            "name": "sortOrders",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ACLAggregateFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageUserAggregate"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user/{userId}": {
      "delete": {
        "tags": ["user"],
        "summary": "Remove user as the collaborator from the scope",
        "description": "",
        "operationId": "deleteActiveUser",
        "consumes": ["*/*"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseBoolean"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/authentication-settings/whitelisted-domains": {
      "put": {
        "tags": ["authentication-settings"],
        "summary": "Update Whitelisted domains for an account",
        "description": "",
        "operationId": "updateWhitelistedDomains",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseBoolean"
            }
          }
        }
      }
    },
    "/authentication-settings/saml-metadata-upload": {
      "post": {
        "tags": ["authentication-settings"],
        "summary": "Create SAML Config",
        "description": "",
        "operationId": "uploadSamlMetaData",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "file",
            "in": "formData",
            "required": false,
            "type": "file"
          },
          {
            "name": "displayName",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "groupMembershipAttr",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "authorizationEnabled",
            "in": "formData",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "logoutUrl",
            "in": "formData",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseSSOConfig"
            }
          }
        }
      },
      "put": {
        "tags": ["authentication-settings"],
        "summary": "Edit SAML Config",
        "description": "",
        "operationId": "updateSamlMetaData",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "file",
            "in": "formData",
            "required": false,
            "type": "file"
          },
          {
            "name": "displayName",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "groupMembershipAttr",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "authorizationEnabled",
            "in": "formData",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "logoutUrl",
            "in": "formData",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseSSOConfig"
            }
          }
        }
      }
    },
    "/authentication-settings/delete-saml-metadata": {
      "delete": {
        "tags": ["authentication-settings"],
        "summary": "Delete SAML Config",
        "description": "",
        "operationId": "deleteSamlMetaData",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseSSOConfig"
            }
          }
        }
      }
    },
    "/authentication-settings/saml-login-test": {
      "get": {
        "tags": ["authentication-settings"],
        "summary": "Get SAML Login Test",
        "description": "",
        "operationId": "getSamlLoginTest",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseLoginTypeResponse"
            }
          }
        }
      }
    },
    "/authentication-settings/oauth/update-providers": {
      "put": {
        "tags": ["authentication-settings"],
        "summary": "Update Oauth providers for an account",
        "description": "",
        "operationId": "updateOauthProviders",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OAuthSettings"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseBoolean"
            }
          }
        }
      }
    },
    "/authentication-settings/update-auth-mechanism": {
      "put": {
        "tags": ["authentication-settings"],
        "summary": "Update Auth mechanism for an account",
        "description": "",
        "operationId": "updateAuthMechanism",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "authenticationMechanism",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["USER_PASSWORD", "SAML", "LDAP", "OAUTH"]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseBoolean"
            }
          }
        }
      }
    },
    "/authentication-settings/oauth/remove-mechanism": {
      "delete": {
        "tags": ["authentication-settings"],
        "summary": "Remove Oauth mechanism for an account",
        "description": "",
        "operationId": "removeOauthMechanism",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseBoolean"
            }
          }
        }
      }
    },
    "/authentication-settings/login-settings/{loginSettingsId}": {
      "put": {
        "tags": ["authentication-settings"],
        "summary": "Update login settings - lockout, expiration, strength",
        "description": "",
        "operationId": "putLoginSettings",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "loginSettingsId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LoginSettings"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseLoginSettings"
            }
          }
        }
      }
    },
    "/authentication-settings": {
      "get": {
        "tags": ["authentication-settings"],
        "summary": "Get authentication settings for an account",
        "description": "",
        "operationId": "getAuthenticationSettings",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseAuthenticationSettingsResponse"
            }
          }
        }
      }
    },
    "/authentication-settings/two-factor-admin-override-settings": {
      "put": {
        "tags": ["authentication-settings"],
        "summary": "Set account level two factor auth setting",
        "description": "",
        "operationId": "setTwoFactorAuthAtAccountLevel",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TwoFactorAdminOverrideSettings"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseBoolean"
            }
          }
        }
      }
    },
    "/authentication-settings/login-settings/password-strength": {
      "get": {
        "tags": ["authentication-settings"],
        "summary": "Get Password strength settings",
        "description": "",
        "operationId": "getPasswordStrengthSettings",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponsePasswordStrengthPolicy"
            }
          }
        }
      }
    },
    "/activityHistory": {
      "get": {
        "tags": ["activityHistory"],
        "summary": "Get Activities where this resource was used",
        "description": "",
        "operationId": "listActivities",
        "consumes": ["application/json", "text/yaml", "text/html"],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["SUCCESS", "FAILED"]
          },
          {
            "name": "referredEntityType",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "Projects",
              "Pipelines",
              "PipelineSteps",
              "Connectors",
              "Secrets",
              "Service",
              "Environment",
              "InputSets",
              "CvConfig",
              "Delegates",
              "DelegateConfigurations",
              "CvVerificationJob",
              "IntegrationStage",
              "IntegrationSteps",
              "CvKubernetesActivitySource",
              "DeploymentSteps",
              "DeploymentStage",
              "ApprovalStage",
              "Triggers"
            ]
          },
          {
            "name": "referredByEntityType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "Projects",
              "Pipelines",
              "PipelineSteps",
              "Connectors",
              "Secrets",
              "Service",
              "Environment",
              "InputSets",
              "CvConfig",
              "Delegates",
              "DelegateConfigurations",
              "CvVerificationJob",
              "IntegrationStage",
              "IntegrationSteps",
              "CvKubernetesActivitySource",
              "DeploymentSteps",
              "DeploymentStage",
              "ApprovalStage",
              "Triggers"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageActivity"
            }
          }
        }
      },
      "post": {
        "tags": ["activityHistory"],
        "summary": "Saves the activity",
        "description": "",
        "operationId": "postActivity",
        "consumes": ["application/json", "text/yaml", "text/html"],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Activity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseActivity"
            }
          }
        }
      }
    },
    "/activityHistory/connectivityCheckSummary": {
      "get": {
        "tags": ["activityHistory"],
        "summary": "Get ConnectivityCheck Summary",
        "description": "",
        "operationId": "getConnectivitySummary",
        "consumes": ["application/json", "text/yaml", "text/html"],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseConnectivityCheckSummary"
            }
          }
        }
      }
    },
    "/activityHistory/summary": {
      "get": {
        "tags": ["activityHistory"],
        "summary": "Get Activities Summary",
        "description": "",
        "operationId": "getActivitiesSummary",
        "consumes": ["application/json", "text/yaml", "text/html"],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "timeGroupType",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": ["DAY", "HOUR"]
          },
          {
            "name": "referredEntityType",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "Projects",
              "Pipelines",
              "PipelineSteps",
              "Connectors",
              "Secrets",
              "Service",
              "Environment",
              "InputSets",
              "CvConfig",
              "Delegates",
              "DelegateConfigurations",
              "CvVerificationJob",
              "IntegrationStage",
              "IntegrationSteps",
              "CvKubernetesActivitySource",
              "DeploymentSteps",
              "DeploymentStage",
              "ApprovalStage",
              "Triggers"
            ]
          },
          {
            "name": "referredByEntityType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "Projects",
              "Pipelines",
              "PipelineSteps",
              "Connectors",
              "Secrets",
              "Service",
              "Environment",
              "InputSets",
              "CvConfig",
              "Delegates",
              "DelegateConfigurations",
              "CvVerificationJob",
              "IntegrationStage",
              "IntegrationSteps",
              "CvKubernetesActivitySource",
              "DeploymentSteps",
              "DeploymentStage",
              "ApprovalStage",
              "Triggers"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageActivitySummary"
            }
          }
        }
      }
    },
    "/artifacts/docker/validateArtifactServer": {
      "get": {
        "tags": ["artifacts"],
        "summary": "Validate docker artifact server",
        "description": "",
        "operationId": "validateArtifactServerForDocker",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "connectorRef",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseBoolean"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/docker/getLastSuccessfulBuild": {
      "post": {
        "tags": ["artifacts"],
        "summary": "Gets docker last successful build",
        "description": "",
        "operationId": "getLastSuccessfulBuildForDocker",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "imagePath",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "connectorRef",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DockerRequestDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseDockerBuildDetailsDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/docker/getLabels": {
      "post": {
        "tags": ["artifacts"],
        "summary": "Gets docker labels",
        "description": "",
        "operationId": "getLabelsForDocker",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "imagePath",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "connectorRef",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DockerRequestDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseDockerResponseDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/docker/getBuildDetails": {
      "get": {
        "tags": ["artifacts"],
        "summary": "Gets docker build details",
        "description": "",
        "operationId": "getBuildDetailsForDocker",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "imagePath",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "connectorRef",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseDockerResponseDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/docker/validateArtifact": {
      "get": {
        "tags": ["artifacts"],
        "summary": "Validate docker artifact with tag/tagregx if given",
        "description": "",
        "operationId": "validateArtifactForDocker",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "imagePath",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "connectorRef",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DockerRequestDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseBoolean"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/docker/validateArtifactSource": {
      "get": {
        "tags": ["artifacts"],
        "summary": "Validate docker image",
        "description": "",
        "operationId": "validateArtifactImageForDocker",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "imagePath",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "connectorRef",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseBoolean"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/ecr/validateArtifactServer": {
      "get": {
        "tags": ["artifacts"],
        "summary": "Validate ecr artifact server",
        "description": "",
        "operationId": "validateArtifactServerForEcr",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "imagePath",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorRef",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "region",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseBoolean"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/ecr/getLastSuccessfulBuild": {
      "post": {
        "tags": ["artifacts"],
        "summary": "Gets ecr last successful build",
        "description": "",
        "operationId": "getLastSuccessfulBuildForEcr",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "imagePath",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorRef",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EcrRequestDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseEcrBuildDetailsDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/ecr/getBuildDetails": {
      "get": {
        "tags": ["artifacts"],
        "summary": "Gets ecr build details",
        "description": "",
        "operationId": "getBuildDetailsForEcr",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "imagePath",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "region",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorRef",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseEcrResponseDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/ecr/validateArtifact": {
      "get": {
        "tags": ["artifacts"],
        "summary": "Validate Ecr Artifact",
        "description": "",
        "operationId": "validateArtifactForEcr",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "imagePath",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "region",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorRef",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EcrRequestDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseBoolean"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/ecr/validateArtifactSource": {
      "get": {
        "tags": ["artifacts"],
        "summary": "Validate Ecr image",
        "description": "",
        "operationId": "validateArtifactImageForEcr",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "imagePath",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "region",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorRef",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseBoolean"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/gcr/validateArtifactServer": {
      "get": {
        "tags": ["artifacts"],
        "summary": "Validate gcr artifact server",
        "description": "",
        "operationId": "validateArtifactServerForGcr",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "imagePath",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorRef",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "registryHostname",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseBoolean"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/gcr/getLastSuccessfulBuild": {
      "post": {
        "tags": ["artifacts"],
        "summary": "Gets gcr last successful build",
        "description": "",
        "operationId": "getLastSuccessfulBuildForGcr",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "imagePath",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorRef",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GcrRequestDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseGcrBuildDetailsDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/gcr/getBuildDetails": {
      "get": {
        "tags": ["artifacts"],
        "summary": "Gets gcr build details",
        "description": "",
        "operationId": "getBuildDetailsForGcr",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "imagePath",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "registryHostname",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorRef",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseGcrResponseDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/gcr/validateArtifact": {
      "get": {
        "tags": ["artifacts"],
        "summary": "Validate Gcr Artifact",
        "description": "",
        "operationId": "validateArtifactForGcr",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "imagePath",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "registryHostname",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorRef",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GcrRequestDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseBoolean"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/artifacts/gcr/validateArtifactSource": {
      "get": {
        "tags": ["artifacts"],
        "summary": "Validate Gcr image",
        "description": "",
        "operationId": "validateArtifactImageForGcr",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "imagePath",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "registryHostname",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorRef",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseBoolean"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/delegate-profiles/ng": {
      "get": {
        "tags": ["delegate-profilesng"],
        "summary": "Lists the delegate profiles",
        "description": "",
        "operationId": "listDelegateProfilesNg",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "0"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fieldsIncluded",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fieldsExcluded",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponsePageResponseDelegateProfileDetailsNg"
            }
          }
        }
      },
      "post": {
        "tags": ["delegate-profilesng"],
        "summary": "Adds a delegate profile",
        "description": "",
        "operationId": "addDelegateProfileNg",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DelegateProfileDetailsNg"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseDelegateProfileDetailsNg"
            }
          }
        }
      }
    },
    "/delegate-profiles/ng/{delegateProfileId}": {
      "get": {
        "tags": ["delegate-profilesng"],
        "summary": "Gets delegate profile",
        "description": "",
        "operationId": "getDelegateProfileNg",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "delegateProfileId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseDelegateProfileDetailsNg"
            }
          }
        }
      },
      "put": {
        "tags": ["delegate-profilesng"],
        "summary": "Updates a delegate profile",
        "description": "",
        "operationId": "updateDelegateProfileNg",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "delegateProfileId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DelegateProfileDetailsNg"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseDelegateProfileDetailsNg"
            }
          }
        }
      },
      "delete": {
        "tags": ["delegate-profilesng"],
        "summary": "Deletes a delegate profile",
        "description": "",
        "operationId": "deleteDelegateProfileNg",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "delegateProfileId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseVoid"
            }
          }
        }
      }
    },
    "/delegate-profiles/ng/{delegateProfileId}/scoping-rules": {
      "put": {
        "tags": ["delegate-profilesng"],
        "summary": "Updates the scoping rules inside the delegate profile",
        "description": "",
        "operationId": "updateScopingRulesNg",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "delegateProfileId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ScopingRuleDetailsNg"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseDelegateProfileDetailsNg"
            }
          }
        }
      }
    },
    "/delegate-profiles/ng/{delegateProfileId}/selectors": {
      "put": {
        "tags": ["delegate-profilesng"],
        "summary": "Updates the selectors inside the delegate profile",
        "description": "",
        "operationId": "updateSelectorsNg",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "delegateProfileId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseDelegateProfileDetailsNg"
            }
          }
        }
      }
    },
    "/delegate2-tasks/sync": {
      "post": {
        "tags": ["delegate2-tasks"],
        "summary": "Sync task using Delegate 2.0 framework",
        "description": "",
        "operationId": "syncTaskD2",
        "consumes": ["application/json", "text/yaml", "text/html"],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DelegateResponseData"
            }
          }
        }
      }
    },
    "/delegate2-tasks/async": {
      "post": {
        "tags": ["delegate2-tasks"],
        "summary": "Create a delegate tasks",
        "description": "",
        "operationId": "asyncTaskD2",
        "consumes": ["application/json", "text/yaml", "text/html"],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/entitySetupUsage": {
      "get": {
        "tags": ["entitySetupUsage"],
        "summary": "Get Entities referring this resource",
        "description": "",
        "operationId": "listReferredByEntities",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 100,
            "maximum": 100,
            "format": "int32"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "referredEntityType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "Projects",
              "Pipelines",
              "PipelineSteps",
              "Connectors",
              "Secrets",
              "Service",
              "Environment",
              "InputSets",
              "CvConfig",
              "Delegates",
              "DelegateConfigurations",
              "CvVerificationJob",
              "IntegrationStage",
              "IntegrationSteps",
              "CvKubernetesActivitySource",
              "DeploymentSteps",
              "DeploymentStage",
              "ApprovalStage",
              "Triggers"
            ]
          },
          {
            "name": "searchTerm",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageEntitySetupUsageDTO"
            }
          }
        }
      }
    },
    "/environments/{environmentIdentifier}": {
      "get": {
        "tags": ["environments"],
        "summary": "Gets a Environment by identifier",
        "description": "",
        "operationId": "getEnvironment",
        "consumes": ["application/json", "text/yaml", "text/html"],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "environmentIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "deleted",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseEnvironmentResponseDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": ["environments"],
        "summary": "Delete en environment by identifier",
        "description": "",
        "operationId": "deleteEnvironment",
        "consumes": ["application/json", "text/yaml", "text/html"],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "environmentIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseBoolean"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/environments": {
      "get": {
        "tags": ["environments"],
        "summary": "Gets environment list for a project",
        "description": "",
        "operationId": "getEnvironmentListForProject",
        "consumes": ["application/json", "text/yaml", "text/html"],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "envIdentifiers",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageEnvironmentResponseDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": ["environments"],
        "summary": "Create an Environment",
        "description": "",
        "operationId": "createEnvironment",
        "consumes": ["application/json", "text/yaml", "text/html"],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EnvironmentRequestDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseEnvironmentResponseDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["environments"],
        "summary": "Update an environment by identifier",
        "description": "",
        "operationId": "updateEnvironment",
        "consumes": ["application/json", "text/yaml", "text/html"],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EnvironmentRequestDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseEnvironmentResponseDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/environments/upsert": {
      "put": {
        "tags": ["environments"],
        "summary": "Upsert an environment by identifier",
        "description": "",
        "operationId": "upsertEnvironment",
        "consumes": ["application/json", "text/yaml", "text/html"],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EnvironmentRequestDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseEnvironmentResponseDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/environmentsV2/{environmentIdentifier}": {
      "get": {
        "tags": ["environmentsV2"],
        "summary": "Gets a Environment by identifier",
        "description": "",
        "operationId": "getEnvironmentV2",
        "consumes": ["application/json", "text/yaml", "text/html"],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "environmentIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "deleted",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseEnvironmentResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": ["environmentsV2"],
        "summary": "Delete en environment by identifier",
        "description": "",
        "operationId": "deleteEnvironmentV2",
        "consumes": ["application/json", "text/yaml", "text/html"],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "environmentIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseBoolean"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/environmentsV2": {
      "get": {
        "tags": ["environmentsV2"],
        "summary": "Gets environment list",
        "description": "",
        "operationId": "getEnvironmentList",
        "consumes": ["application/json", "text/yaml", "text/html"],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "searchTerm",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "envIdentifiers",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageEnvironmentResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": ["environmentsV2"],
        "summary": "Create an Environment",
        "description": "",
        "operationId": "createEnvironmentV2",
        "consumes": ["application/json", "text/yaml", "text/html"],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EnvironmentRequestDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseEnvironmentResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["environmentsV2"],
        "summary": "Update an environment by identifier",
        "description": "",
        "operationId": "updateEnvironmentV2",
        "consumes": ["application/json", "text/yaml", "text/html"],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EnvironmentRequestDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseEnvironmentResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/environmentsV2/upsert": {
      "put": {
        "tags": ["environmentsV2"],
        "summary": "Upsert an environment by identifier",
        "description": "",
        "operationId": "upsertEnvironmentV2",
        "consumes": ["application/json", "text/yaml", "text/html"],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EnvironmentRequestDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseEnvironmentResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/invites/{inviteId}": {
      "put": {
        "tags": ["invites"],
        "summary": "Resend invite mail",
        "description": "",
        "operationId": "updateInvite",
        "consumes": ["application/json", "text/yaml"],
        "produces": ["application/json", "text/yaml"],
        "parameters": [
          {
            "name": "inviteId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Invite"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseOptionalInvite"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": ["invites"],
        "summary": "Delete a invite for the specified project/organization",
        "description": "",
        "operationId": "deleteInvite",
        "consumes": ["*/*"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "inviteId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseOptionalInvite"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/invites": {
      "get": {
        "tags": ["invites"],
        "summary": "Get all invites for the queried project/organization",
        "description": "",
        "operationId": "getInvites",
        "consumes": ["application/json", "text/yaml"],
        "produces": ["application/json", "text/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageIndex",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 50,
            "maximum": 100,
            "format": "int32"
          },
          {
            "name": "sortOrders",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageInvite"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": ["invites"],
        "summary": "Add a new invite for the specified project/organization",
        "description": "",
        "operationId": "sendInvite",
        "consumes": ["application/json", "text/yaml"],
        "produces": ["application/json", "text/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreateInvite"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListInviteOperationResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/invites/aggregate": {
      "post": {
        "tags": ["invites"],
        "summary": "Get a page of pending users for access control",
        "description": "",
        "operationId": "getPendingUsersAggregated",
        "consumes": ["application/json", "text/yaml"],
        "produces": ["application/json", "text/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "searchTerm",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageIndex",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 50,
            "maximum": 100,
            "format": "int32"
          },
          {
            "name": "sortOrders",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ACLAggregateFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageInvite"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/gcp/clusters": {
      "get": {
        "tags": ["gcp"],
        "summary": "Gets gcp cluster names",
        "description": "",
        "operationId": "getClusterNamesForGcp",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "connectorRef",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseGcpResponseDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "tags": ["health"],
        "summary": "get health for NGManager service",
        "description": "",
        "operationId": "getNGManagerHealthStatus",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseString"
            }
          }
        }
      }
    },
    "/aggregate/organizations/{identifier}": {
      "get": {
        "tags": ["aggregate"],
        "summary": "Gets an OrganizationAggregateDTO by identifier",
        "description": "",
        "operationId": "getOrganizationAggregateDTO",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseOrganizationAggregateDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/aggregate/projects/{identifier}": {
      "get": {
        "tags": ["aggregate"],
        "summary": "Gets a ProjectAggregateDTO by identifier",
        "description": "",
        "operationId": "getProjectAggregateDTO",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "default"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseProjectAggregateDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/aggregate/acl/usergroups": {
      "get": {
        "tags": ["aggregate"],
        "summary": "Get Aggregated User Group list",
        "description": "",
        "operationId": "getUserGroupAggregateList",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageIndex",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 50,
            "maximum": 100,
            "format": "int32"
          },
          {
            "name": "sortOrders",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "searchTerm",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageUserGroupAggregateDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/aggregate/acl/usergroups/filter": {
      "post": {
        "tags": ["aggregate"],
        "summary": "Get Aggregated User Group list with filter",
        "description": "",
        "operationId": "getUserGroupAggregateListsWithFilter",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AggregateACLRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListUserGroupAggregateDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/aggregate/acl/usergroups/{identifier}": {
      "get": {
        "tags": ["aggregate"],
        "summary": "Get Aggregated User Group",
        "description": "",
        "operationId": "getUserGroupAggregate",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseUserGroupAggregateDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/aggregate/organizations": {
      "get": {
        "tags": ["aggregate"],
        "summary": "Get OrganizationAggregateDTO list",
        "description": "",
        "operationId": "getOrganizationAggregateDTOList",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "searchTerm",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageIndex",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 50,
            "maximum": 100,
            "format": "int32"
          },
          {
            "name": "sortOrders",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageOrganizationAggregateDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/aggregate/projects": {
      "get": {
        "tags": ["aggregate"],
        "summary": "Get ProjectAggregateDTO list",
        "description": "",
        "operationId": "getProjectAggregateDTOList",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "hasModule",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "moduleType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["CD", "CI", "CORE", "CV", "CF", "CE"]
          },
          {
            "name": "searchTerm",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageIndex",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 50,
            "maximum": 100,
            "format": "int32"
          },
          {
            "name": "sortOrders",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageProjectAggregateDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/secrets/files/{identifier}": {
      "put": {
        "tags": ["secretsfiles"],
        "summary": "Update a secret file",
        "description": "",
        "operationId": "putSecretFile",
        "consumes": ["multipart/form-data"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "file",
            "in": "formData",
            "required": true,
            "type": "file"
          },
          {
            "name": "tags",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "formData",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "formData",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "formData",
            "required": true,
            "type": "string",
            "enum": ["SecretFile", "SecretText", "SSHKey"]
          },
          {
            "name": "orgIdentifier",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "secretManager",
            "in": "formData",
            "required": true,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "formData",
            "required": true,
            "type": "string"
          },
          {
            "name": "description",
            "in": "formData",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseBoolean"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/secrets/files/{identifier}/yaml": {
      "put": {
        "tags": ["secretsfiles"],
        "summary": "Update a secret file via yaml",
        "description": "",
        "operationId": "putSecretFileViaYaml",
        "consumes": ["application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SecretFileDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseBoolean"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/secrets/files/yaml": {
      "post": {
        "tags": ["secretsfiles"],
        "summary": "Create a secret file via yaml",
        "description": "",
        "operationId": "postSecretFileViaYaml",
        "consumes": ["application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SecretFileDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseEncryptedDataDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/secret-managers/meta-data": {
      "post": {
        "tags": ["secret-managers"],
        "summary": "Get metadata of secret manager",
        "description": "",
        "operationId": "getMetadata",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SecretManagerMetadataRequestDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseSecretManagerMetadataDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/secrets/{identifier}": {
      "get": {
        "tags": ["secrets"],
        "summary": "Gets secret",
        "description": "",
        "operationId": "getSecret",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseEncryptedDataDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["secrets"],
        "summary": "Update a secret text",
        "description": "",
        "operationId": "putSecretText",
        "consumes": ["application/json"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SecretTextDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseBoolean"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": ["secrets"],
        "summary": "Delete a secret text",
        "description": "",
        "operationId": "deleteSecret",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseBoolean"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/secrets": {
      "get": {
        "tags": ["secrets"],
        "summary": "Get secrets for an account",
        "description": "",
        "operationId": "listSecrets",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["SecretFile", "SecretText", "SSHKey"]
          },
          {
            "name": "searchTerm",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageIndex",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageEncryptedDataDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": ["secrets"],
        "summary": "Create a secret text",
        "description": "",
        "operationId": "postSecretText",
        "consumes": ["application/json"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SecretTextDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseEncryptedDataDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/secrets/yaml": {
      "post": {
        "tags": ["secrets"],
        "summary": "Create a secret text via yaml",
        "description": "",
        "operationId": "postSecretTextViaYaml",
        "consumes": ["application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SecretTextDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseEncryptedDataDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/secrets/{identifier}/yaml": {
      "put": {
        "tags": ["secrets"],
        "summary": "Update a secret text via yaml",
        "description": "",
        "operationId": "putSecretTextViaYaml",
        "consumes": ["application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SecretTextDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseBoolean"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v2/secrets/{identifier}": {
      "get": {
        "tags": ["v2secrets"],
        "summary": "Gets secret",
        "description": "",
        "operationId": "getSecretV2",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseSecretResponseWrapper"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["v2secrets"],
        "summary": "Update a secret",
        "description": "",
        "operationId": "putSecret",
        "consumes": ["application/json"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SecretRequestWrapper"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseSecretResponseWrapper"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": ["v2secrets"],
        "summary": "Delete secret",
        "description": "",
        "operationId": "deleteSecretV2",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseBoolean"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v2/secrets": {
      "get": {
        "tags": ["v2secrets"],
        "summary": "Get secrets",
        "description": "",
        "operationId": "listSecretsV2",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "identifiers",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["SecretFile", "SecretText", "SSHKey"]
          },
          {
            "name": "searchTerm",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "types",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["SecretFile", "SecretText", "SSHKey"]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "includeSecretsFromEverySubScope",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "pageIndex",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageSecretResponseWrapper"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": ["v2secrets"],
        "summary": "Create a secret",
        "description": "",
        "operationId": "postSecret",
        "consumes": ["application/json"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SecretRequestWrapper"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseSecretResponseWrapper"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v2/secrets/validate": {
      "post": {
        "tags": ["v2secrets"],
        "summary": "Validate a secret",
        "description": "",
        "operationId": "validateSecret",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SecretValidationMetaData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseSecretValidationResultDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v2/secrets/validateUniqueIdentifier/{identifier}": {
      "get": {
        "tags": ["v2secrets"],
        "summary": "Validate Secret Identifier is unique",
        "description": "",
        "operationId": "validateSecretIdentifierIsUnique",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseBoolean"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v2/secrets/yaml": {
      "post": {
        "tags": ["v2secrets"],
        "summary": "Create a secret via yaml",
        "description": "",
        "operationId": "postSecretViaYaml",
        "consumes": ["application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SecretRequestWrapper"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseSecretResponseWrapper"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v2/secrets/{identifier}/yaml": {
      "put": {
        "tags": ["v2secrets"],
        "summary": "Update a secret via yaml",
        "description": "",
        "operationId": "putSecretViaYaml",
        "consumes": ["application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SecretRequestWrapper"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseSecretResponseWrapper"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v2/secrets/files/{identifier}": {
      "put": {
        "tags": ["v2secrets"],
        "summary": "Update a secret file",
        "description": "",
        "operationId": "putSecretFileV2",
        "consumes": ["multipart/form-data"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "file",
            "in": "formData",
            "required": false,
            "type": "file"
          },
          {
            "name": "spec",
            "in": "formData",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseSecretResponseWrapper"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v2/secrets/files": {
      "post": {
        "tags": ["v2secrets"],
        "summary": "Create a secret file",
        "description": "",
        "operationId": "postSecretFileV2",
        "consumes": ["multipart/form-data"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "file",
            "in": "formData",
            "required": true,
            "type": "file"
          },
          {
            "name": "spec",
            "in": "formData",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseSecretResponseWrapper"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/organizations/{identifier}": {
      "get": {
        "tags": ["organizations"],
        "summary": "Get an Organization by identifier",
        "description": "",
        "operationId": "getOrganization",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseOrganizationResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["organizations"],
        "summary": "Update an Organization by identifier",
        "description": "",
        "operationId": "putOrganization",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OrganizationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseOrganizationResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": ["organizations"],
        "summary": "Delete an Organization by identifier",
        "description": "",
        "operationId": "deleteOrganization",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseBoolean"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/organizations": {
      "get": {
        "tags": ["organizations"],
        "summary": "Get Organization list",
        "description": "",
        "operationId": "getOrganizationList",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "identifiers",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "searchTerm",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageIndex",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 50,
            "maximum": 100,
            "format": "int32"
          },
          {
            "name": "sortOrders",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageOrganizationResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": ["organizations"],
        "summary": "Create an Organization",
        "description": "",
        "operationId": "postOrganization",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OrganizationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseOrganizationResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/projects/{identifier}": {
      "get": {
        "tags": ["projects"],
        "summary": "Gets a Project by identifier",
        "description": "",
        "operationId": "getProject",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "default"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseProjectResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["projects"],
        "summary": "Update a project by identifier",
        "description": "",
        "operationId": "putProject",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "default"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProjectRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseProjectResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": ["projects"],
        "summary": "Delete a project by identifier",
        "description": "",
        "operationId": "deleteProject",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "default"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseBoolean"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/projects": {
      "get": {
        "tags": ["projects"],
        "summary": "Get Project list",
        "description": "",
        "operationId": "getProjectList",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "hasModule",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "identifiers",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "moduleType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["CD", "CI", "CORE", "CV", "CF", "CE"]
          },
          {
            "name": "searchTerm",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageIndex",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 50,
            "maximum": 100,
            "format": "int32"
          },
          {
            "name": "sortOrders",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageProjectResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": ["projects"],
        "summary": "Create a Project",
        "description": "",
        "operationId": "postProject",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "default"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProjectRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseProjectResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user-groups/{identifier}": {
      "get": {
        "tags": ["user-groups"],
        "summary": "Get a User Group",
        "description": "",
        "operationId": "getUserGroup",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseUserGroupDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": ["user-groups"],
        "summary": "Delete a User Group",
        "description": "",
        "operationId": "deleteUserGroup",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseUserGroupDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user-groups": {
      "get": {
        "tags": ["user-groups"],
        "summary": "Get User Group List",
        "description": "",
        "operationId": "getUserGroupList",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "searchTerm",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageIndex",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 50,
            "maximum": 100,
            "format": "int32"
          },
          {
            "name": "sortOrders",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageUserGroupDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": ["user-groups"],
        "summary": "Create a User Group",
        "description": "",
        "operationId": "postUserGroup",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UserGroupDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseUserGroupDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["user-groups"],
        "summary": "Update a User Group",
        "description": "",
        "operationId": "putUserGroup",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UserGroupDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseUserGroupDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user-groups/batch": {
      "post": {
        "tags": ["user-groups"],
        "summary": "Get Batch User Group List",
        "description": "",
        "operationId": "getBatchUserGroupList",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UserGroupFilterDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListUserGroupDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user-groups/{identifier}/member/{userIdentifier}": {
      "get": {
        "tags": ["user-groups"],
        "summary": "Check if the user is part of the user group",
        "description": "",
        "operationId": "checkMember",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseBoolean"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["user-groups"],
        "summary": "Add a user to the user group",
        "description": "",
        "operationId": "addMember",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseUserGroupDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": ["user-groups"],
        "summary": "Remove a user from the user group",
        "description": "",
        "operationId": "removeMember",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseUserGroupDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/yamlschema/schemafile": {
      "get": {
        "tags": ["yamlschema"],
        "summary": "Get Schema for the given entity type",
        "description": "",
        "operationId": "schemafile",
        "consumes": ["application/json", "text/yaml", "text/html"],
        "produces": ["application/octet-stream"],
        "parameters": [
          {
            "name": "filename",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/services/{serviceIdentifier}": {
      "get": {
        "tags": ["services"],
        "summary": "Gets a Service by identifier",
        "description": "",
        "operationId": "getService",
        "consumes": ["application/json", "text/yaml", "text/html"],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "serviceIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "deleted",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseServiceResponseDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": ["services"],
        "summary": "Delete a service by identifier",
        "description": "",
        "operationId": "deleteService",
        "consumes": ["application/json", "text/yaml", "text/html"],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "serviceIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseBoolean"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/services": {
      "get": {
        "tags": ["services"],
        "summary": "Gets Service list for a project",
        "description": "",
        "operationId": "getServiceListForProject",
        "consumes": ["application/json", "text/yaml", "text/html"],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "serviceIdentifiers",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageServiceResponseDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": ["services"],
        "summary": "Create a Service",
        "description": "",
        "operationId": "createService",
        "consumes": ["application/json", "text/yaml", "text/html"],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ServiceRequestDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseServiceResponseDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["services"],
        "summary": "Update a service by identifier",
        "description": "",
        "operationId": "updateService",
        "consumes": ["application/json", "text/yaml", "text/html"],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ServiceRequestDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseServiceResponseDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/services/batch": {
      "post": {
        "tags": ["services"],
        "summary": "Create Services",
        "description": "",
        "operationId": "createServices",
        "consumes": ["application/json", "text/yaml", "text/html"],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceRequestDTO"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageServiceResponseDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/services/upsert": {
      "put": {
        "tags": ["services"],
        "summary": "Upsert a service by identifier",
        "description": "",
        "operationId": "upsertService",
        "consumes": ["application/json", "text/yaml", "text/html"],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ServiceRequestDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseServiceResponseDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/servicesV2/{serviceIdentifier}": {
      "get": {
        "tags": ["servicesV2"],
        "summary": "Gets a Service by identifier",
        "description": "",
        "operationId": "getServiceV2",
        "consumes": ["application/json", "text/yaml", "text/html"],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "serviceIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "deleted",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseServiceResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": ["servicesV2"],
        "summary": "Delete a service by identifier",
        "description": "",
        "operationId": "deleteServiceV2",
        "consumes": ["application/json", "text/yaml", "text/html"],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "serviceIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseBoolean"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/servicesV2": {
      "get": {
        "tags": ["servicesV2"],
        "summary": "Gets Service list ",
        "description": "",
        "operationId": "getServiceList",
        "consumes": ["application/json", "text/yaml", "text/html"],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "searchTerm",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "serviceIdentifiers",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageServiceResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": ["servicesV2"],
        "summary": "Create a Service",
        "description": "",
        "operationId": "createServiceV2",
        "consumes": ["application/json", "text/yaml", "text/html"],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ServiceRequestDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseServiceResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["servicesV2"],
        "summary": "Update a service by identifier",
        "description": "",
        "operationId": "updateServiceV2",
        "consumes": ["application/json", "text/yaml", "text/html"],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ServiceRequestDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseServiceResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/servicesV2/batch": {
      "post": {
        "tags": ["servicesV2"],
        "summary": "Create Services",
        "description": "",
        "operationId": "createServicesV2",
        "consumes": ["application/json", "text/yaml", "text/html"],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceRequestDTO"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageServiceResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/servicesV2/upsert": {
      "put": {
        "tags": ["servicesV2"],
        "summary": "Upsert a service by identifier",
        "description": "",
        "operationId": "upsertServiceV2",
        "consumes": ["application/json", "text/yaml", "text/html"],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ServiceRequestDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseServiceResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": ["users"],
        "summary": "Get users for an account",
        "description": "",
        "operationId": "getUsers",
        "consumes": ["application/json", "text/yaml"],
        "produces": ["application/json", "text/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "searchString",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageIndex",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 50,
            "maximum": 100,
            "format": "int32"
          },
          {
            "name": "sortOrders",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageUserSearchDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/projects": {
      "get": {
        "tags": ["users"],
        "summary": "get user project information",
        "description": "",
        "operationId": "getUserProjectInfo",
        "consumes": ["application/json", "text/yaml"],
        "produces": ["application/json", "text/yaml"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageIndex",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 50,
            "maximum": 100,
            "format": "int32"
          },
          {
            "name": "sortOrders",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageProject"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/executions/interrupt/{planExecutionId}": {
      "put": {
        "tags": ["executions"],
        "summary": "pause, resume or stop the pipeline executions",
        "description": "",
        "operationId": "handleInterrupt",
        "consumes": ["application/json", "text/yaml", "text/html"],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "interruptType",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": ["Abort", "Pause", "Resume"]
          },
          {
            "name": "planExecutionId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePipelineExecutionInterrupt"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/executions": {
      "get": {
        "tags": ["executions"],
        "summary": "Gets Executions list",
        "description": "",
        "operationId": "getListOfExecutions",
        "consumes": ["application/json", "text/yaml", "text/html"],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "serviceIdentifiers",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "envIdentifiers",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "pipelineIdentifiers",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "executionStatuses",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Running",
                "Failed",
                "NotStarted",
                "Expired",
                "Aborted",
                "Queued",
                "Paused",
                "Waiting",
                "Success",
                "Suspended",
                "Skipped",
                "Pausing"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "startTime",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "searchTerm",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 10,
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePagePipelineExecutionSummaryDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/executions/dummyCDStageModuleInfo": {
      "get": {
        "tags": ["executions"],
        "summary": "dummy api",
        "description": "",
        "operationId": "getDummyCDStageModuleInfo",
        "consumes": ["application/json", "text/yaml", "text/html"],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseCDStageModuleInfo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/executions/dummyCDPipelineModuleInfo": {
      "get": {
        "tags": ["executions"],
        "summary": "dummy api",
        "description": "",
        "operationId": "getDummyCDPipelineModuleInfo",
        "consumes": ["application/json", "text/yaml", "text/html"],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseCDPipelineModuleInfo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/executions/{planExecutionId}": {
      "get": {
        "tags": ["executions"],
        "summary": "Gets Execution Detail",
        "description": "",
        "operationId": "getPipelineExecutionDetail",
        "consumes": ["application/json", "text/yaml", "text/html"],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "planExecutionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "stageIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePipelineExecutionDetail"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/executions/executionStatus": {
      "get": {
        "tags": ["executions"],
        "summary": "Gets Execution Status list",
        "description": "",
        "operationId": "getExecutionStatuses",
        "consumes": ["application/json", "text/yaml", "text/html"],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListExecutionStatus"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/jira/projects": {
      "get": {
        "tags": ["jira"],
        "summary": "Get jira projects",
        "description": "",
        "operationId": "getJiraProjects",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "connectorRef",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListJiraProjectBasicNG"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/jira/validate": {
      "get": {
        "tags": ["jira"],
        "summary": "Validate jira credentials",
        "description": "",
        "operationId": "validateJiraCredentials",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "connectorRef",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseBoolean"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/jira/statuses": {
      "get": {
        "tags": ["jira"],
        "summary": "Get jira statuses",
        "description": "",
        "operationId": "getJiraStatuses",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "connectorRef",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectKey",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "issueType",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListJiraStatusNG"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/jira/createMetadata": {
      "get": {
        "tags": ["jira"],
        "summary": "Get jira issue create metadata",
        "description": "",
        "operationId": "getJiraIssueCreateMetadata",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "connectorRef",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectKey",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "issueType",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "expand",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fetchStatus",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseJiraIssueCreateMetadataNG"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/jira/updateMetadata": {
      "get": {
        "tags": ["jira"],
        "summary": "Get jira issue update metadata",
        "description": "",
        "operationId": "getJiraIssueUpdateMetadata",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "connectorRef",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "issueKey",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseJiraIssueUpdateMetadataNG"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/source-code-manager": {
      "get": {
        "tags": ["source-code-manager"],
        "summary": "get source code manager information",
        "description": "",
        "operationId": "getSourceCodeManagers",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListSourceCodeManagerDTO"
            }
          }
        }
      },
      "post": {
        "tags": ["source-code-manager"],
        "summary": "save source code manager",
        "description": "",
        "operationId": "saveSourceCodeManagers",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SourceCodeManagerDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseSourceCodeManagerDTO"
            }
          }
        }
      }
    },
    "/source-code-manager/{identifier}": {
      "put": {
        "tags": ["source-code-manager"],
        "summary": "update source code manager",
        "description": "",
        "operationId": "updateSourceCodeManagers",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SourceCodeManagerDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseSourceCodeManagerDTO"
            }
          }
        }
      },
      "delete": {
        "tags": ["source-code-manager"],
        "summary": "delete source code manager",
        "description": "",
        "operationId": "deleteSourceCodeManagers",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseBoolean"
            }
          }
        }
      }
    },
    "/user-info": {
      "get": {
        "tags": ["user-info"],
        "summary": "get user information",
        "description": "",
        "operationId": "getUserInfo",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseUserInfo"
            }
          }
        }
      },
      "put": {
        "tags": ["user-info"],
        "summary": "update user information",
        "description": "",
        "operationId": "updateUserInfo",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UserInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseUserInfo"
            }
          }
        }
      }
    },
    "/user-info/two-factor-auth/{authMechanism}": {
      "get": {
        "tags": ["user-info"],
        "summary": "get two factor auth settings",
        "description": "",
        "operationId": "getTwoFactorAuthSettings",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "authMechanism",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": ["TOTP"]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseTwoFactorAuthSettingsInfo"
            }
          }
        }
      }
    },
    "/user-info/enable-two-factor-auth": {
      "put": {
        "tags": ["user-info"],
        "summary": "enable two factor auth settings",
        "description": "",
        "operationId": "enableTwoFactorAuth",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TwoFactorAuthSettingsInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseUserInfo"
            }
          }
        }
      }
    },
    "/user-info/disable-two-factor-auth": {
      "put": {
        "tags": ["user-info"],
        "summary": "disable two factor auth settings",
        "description": "",
        "operationId": "disableTwoFactorAuth",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseUserInfo"
            }
          }
        }
      }
    },
    "/webhook": {
      "post": {
        "tags": ["webhook"],
        "summary": "accept webhook event",
        "description": "",
        "operationId": "webhookEndpoint",
        "consumes": ["application/json", "application/yaml", "text/plain"],
        "produces": ["application/json", "application/yaml", "text/plain"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseString"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/inputSets/{inputSetIdentifier}": {
      "get": {
        "tags": ["inputSets"],
        "summary": "Gets an InputSet by identifier",
        "description": "",
        "operationId": "getInputSetForPipeline",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "inputSetIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "deleted",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseInputSetResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["inputSets"],
        "summary": "Update an InputSet by identifier",
        "description": "",
        "operationId": "updateInputSetForPipeline",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "inputSetIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/InputSetConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseInputSetResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": ["inputSets"],
        "summary": "Delete an inputSet by identifier",
        "description": "",
        "operationId": "deleteInputSetForPipeline",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "inputSetIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseBoolean"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/inputSets/overlay/{inputSetIdentifier}": {
      "get": {
        "tags": ["inputSets"],
        "summary": "Gets an Overlay InputSet by identifier",
        "description": "",
        "operationId": "getOverlayInputSetForPipeline",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "inputSetIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "deleted",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseOverlayInputSetResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["inputSets"],
        "summary": "Update an Overlay InputSet by identifier",
        "description": "",
        "operationId": "updateOverlayInputSetForPipeline",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "inputSetIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OverlayInputSetConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseOverlayInputSetResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/inputSets": {
      "get": {
        "tags": ["inputSets"],
        "summary": "Gets InputSets list for a pipeline",
        "description": "",
        "operationId": "getInputSetsListForPipeline",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "inputSetType",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "ALL",
            "enum": ["ALL", "INPUT_SET", "OVERLAY_INPUT_SET"]
          },
          {
            "name": "searchTerm",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortOrders",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageInputSetSummaryResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": ["inputSets"],
        "summary": "Create an InputSet For Pipeline",
        "description": "",
        "operationId": "createInputSetForPipeline",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/InputSetConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseInputSetResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/inputSets/overlay": {
      "post": {
        "tags": ["inputSets"],
        "summary": "Create an Overlay InputSet For Pipeline",
        "description": "",
        "operationId": "createOverlayInputSetForPipeline",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OverlayInputSetConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseOverlayInputSetResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/inputSets/template": {
      "get": {
        "tags": ["inputSets"],
        "summary": "Get template from a pipeline yaml",
        "description": "",
        "operationId": "getTemplateFromPipeline",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseInputSetTemplateResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/inputSets/merge": {
      "post": {
        "tags": ["inputSets"],
        "summary": "Merges given input sets list on pipeline and return input set template format of applied pipeline",
        "description": "",
        "operationId": "getMergeInputSetFromPipelineTemplateWithListInput",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "useFQNIfError",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MergeInputSetRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMergeInputSetResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipelines/{pipelineIdentifier}": {
      "get": {
        "tags": ["pipelines"],
        "summary": "Gets a pipeline by identifier",
        "description": "",
        "operationId": "getPipeline",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseNGPipelineResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["pipelines"],
        "summary": "Update a Pipeline",
        "description": "",
        "operationId": "putPipeline",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NgPipeline"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseString"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": ["pipelines"],
        "summary": "Delete a pipeline",
        "description": "",
        "operationId": "softDeletePipeline",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseBoolean"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipelines/summary/{pipelineIdentifier}": {
      "get": {
        "tags": ["pipelines"],
        "summary": "Gets a pipeline by identifier",
        "description": "",
        "operationId": "getPipelineSummary",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseNGPipelineSummaryResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipelines": {
      "get": {
        "tags": ["pipelines"],
        "summary": "Gets Pipeline list",
        "description": "",
        "operationId": "getPipelineList",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 25,
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "searchTerm",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageNGPipelineSummaryResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": ["pipelines"],
        "summary": "Create a Pipeline",
        "description": "",
        "operationId": "postPipeline",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NgPipeline"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseString"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipelines/dummyApiForSwaggerSchemaCheck": {
      "get": {
        "tags": ["pipelines"],
        "summary": "dummy api for checking pms schema",
        "description": "",
        "operationId": "dummyApiForSwaggerSchemaCheck",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePipelineConfig"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/signup": {
      "post": {
        "tags": ["signup"],
        "operationId": "signup",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SignupDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/RestResponseUserInfo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/signup/oauth": {
      "post": {
        "tags": ["signup"],
        "operationId": "signupOAuth",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OAuthSignupDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/RestResponseUserInfo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/partial-yaml-schema": {
      "get": {
        "tags": ["partial-yaml-schema"],
        "summary": "Get Partial Yaml Schema",
        "description": "",
        "operationId": "getPartialYamlSchema",
        "consumes": [
          "application/json",
          "text/yaml",
          "text/html",
          "text/plain"
        ],
        "produces": [
          "application/json",
          "text/yaml",
          "text/html",
          "text/plain"
        ],
        "parameters": [
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["account", "org", "project", "unknown"]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePartialSchemaDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/yaml-schema": {
      "get": {
        "tags": ["yaml-schema"],
        "summary": "Get Yaml Schema",
        "description": "",
        "operationId": "getYamlSchema",
        "consumes": [
          "application/json",
          "text/yaml",
          "text/html",
          "text/plain"
        ],
        "produces": [
          "application/json",
          "text/yaml",
          "text/html",
          "text/plain"
        ],
        "parameters": [
          {
            "name": "entityType",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "Projects",
              "Pipelines",
              "PipelineSteps",
              "Connectors",
              "Secrets",
              "Service",
              "Environment",
              "InputSets",
              "CvConfig",
              "Delegates",
              "DelegateConfigurations",
              "CvVerificationJob",
              "IntegrationStage",
              "IntegrationSteps",
              "CvKubernetesActivitySource",
              "DeploymentSteps",
              "DeploymentStage",
              "ApprovalStage",
              "Triggers"
            ]
          },
          {
            "name": "subtype",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "K8sCluster",
              "Git",
              "Splunk",
              "AppDynamics",
              "Vault",
              "DockerRegistry",
              "Local",
              "GcpKms",
              "Gcp",
              "Aws",
              "Artifactory",
              "Jira",
              "Nexus",
              "Github",
              "Gitlab",
              "Bitbucket",
              "Codecommit",
              "CEAws",
              "CEAzure",
              "GcpCloudCost",
              "CEK8sCluster",
              "HttpHelmRepo",
              "NewRelic"
            ]
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["account", "org", "project", "unknown"]
          },
          {
            "name": "identifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseJsonNode"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/yaml-snippet": {
      "get": {
        "tags": ["yaml-snippet"],
        "summary": "Get Yaml Snippet Metadata",
        "description": "",
        "operationId": "getYamlSnippetMetadata",
        "consumes": [
          "application/json",
          "text/yaml",
          "text/html",
          "text/plain"
        ],
        "produces": [
          "application/json",
          "text/yaml",
          "text/html",
          "text/plain"
        ],
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "k8s",
                "git",
                "docker",
                "connector",
                "secretmanager",
                "secret",
                "secretText",
                "secretFile",
                "sshKey",
                "service",
                "infra",
                "steps",
                "pipeline",
                "http",
                "splunk",
                "appdynamics",
                "vault",
                "local",
                "gcpkms",
                "gcp",
                "aws",
                "artifactory",
                "jira",
                "nexus",
                "github",
                "gitlab",
                "bitbucket",
                "ceaws",
                "ceazure",
                "cek8s",
                "codecommit",
                "httphelmrepo",
                "newrelic"
              ]
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseYamlSnippets"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/yaml-snippet/{identifier}": {
      "get": {
        "tags": ["yaml-snippet"],
        "summary": "Get Yaml Snippet",
        "description": "",
        "operationId": "getYamlSnippet",
        "consumes": [
          "application/json",
          "text/yaml",
          "text/html",
          "text/plain"
        ],
        "produces": [
          "application/json",
          "text/yaml",
          "text/html",
          "text/plain"
        ],
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["account", "org", "project", "unknown"]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseJsonNode"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Account": {
      "type": "object",
      "required": [
        "accountName",
        "appId",
        "companyName",
        "lastUpdatedAt",
        "uuid"
      ],
      "properties": {
        "uuid": {
          "type": "string"
        },
        "appId": {
          "type": "string"
        },
        "createdBy": {
          "$ref": "#/definitions/EmbeddedUser"
        },
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "lastUpdatedBy": {
          "$ref": "#/definitions/EmbeddedUser"
        },
        "lastUpdatedAt": {
          "type": "integer",
          "format": "int64"
        },
        "companyName": {
          "type": "string"
        },
        "accountName": {
          "type": "string"
        },
        "whitelistedDomains": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "licenseId": {
          "type": "string"
        },
        "dataRetentionDurationMs": {
          "type": "integer",
          "format": "int64"
        },
        "licenseInfo": {
          "$ref": "#/definitions/LicenseInfo"
        },
        "ceLicenseInfo": {
          "$ref": "#/definitions/CeLicenseInfo"
        },
        "accountEvents": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/AccountEvent"
          }
        },
        "subdomainUrl": {
          "type": "string"
        },
        "twoFactorAdminEnforced": {
          "type": "boolean"
        },
        "forImport": {
          "type": "boolean"
        },
        "migratedToClusterUrl": {
          "type": "string"
        },
        "defaultExperience": {
          "type": "string",
          "enum": ["NG", "CG"]
        },
        "localEncryptionEnabled": {
          "type": "boolean"
        },
        "delegateConfiguration": {
          "$ref": "#/definitions/DelegateConfiguration"
        },
        "techStacks": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/TechStack"
          }
        },
        "oauthEnabled": {
          "type": "boolean"
        },
        "accountPreferences": {
          "$ref": "#/definitions/AccountPreferences"
        },
        "cloudCostEnabled": {
          "type": "boolean"
        },
        "ceAutoCollectK8sEvents": {
          "type": "boolean"
        },
        "trialSignupOptions": {
          "$ref": "#/definitions/TrialSignupOptions"
        },
        "serviceGuardLimit": {
          "type": "integer",
          "format": "int64"
        },
        "defaults": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "harnessSupportAccessAllowed": {
          "type": "boolean"
        },
        "povAccount": {
          "type": "boolean"
        }
      }
    },
    "Response": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "object"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ResponseAccount": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/Account"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "Failure": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "code": {
          "type": "string",
          "enum": [
            "DEFAULT_ERROR_CODE",
            "INVALID_ARGUMENT",
            "INVALID_EMAIL",
            "DOMAIN_NOT_ALLOWED_TO_REGISTER",
            "USER_ALREADY_REGISTERED",
            "USER_INVITATION_DOES_NOT_EXIST",
            "USER_DOES_NOT_EXIST",
            "USER_INVITE_OPERATION_FAILED",
            "USER_DISABLED",
            "ACCOUNT_DOES_NOT_EXIST",
            "INACTIVE_ACCOUNT",
            "ACCOUNT_MIGRATED",
            "USER_DOMAIN_NOT_ALLOWED",
            "MAX_FAILED_ATTEMPT_COUNT_EXCEEDED",
            "RESOURCE_NOT_FOUND",
            "ROLE_DOES_NOT_EXIST",
            "EMAIL_NOT_VERIFIED",
            "EMAIL_VERIFICATION_TOKEN_NOT_FOUND",
            "INVALID_TOKEN",
            "INVALID_CAPTCHA_TOKEN",
            "NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS",
            "EXPIRED_TOKEN",
            "TOKEN_ALREADY_REFRESHED_ONCE",
            "ACCESS_DENIED",
            "NG_ACCESS_DENIED",
            "INVALID_CREDENTIAL",
            "INVALID_KEY",
            "INVALID_KEYPATH",
            "INVALID_VARIABLE",
            "UNKNOWN_HOST",
            "UNREACHABLE_HOST",
            "INVALID_PORT",
            "SSH_SESSION_TIMEOUT",
            "SOCKET_CONNECTION_ERROR",
            "SOCKET_CONNECTION_TIMEOUT",
            "CONNECTION_TIMEOUT",
            "SSH_CONNECTION_ERROR",
            "USER_GROUP_ERROR",
            "INVALID_EXECUTION_ID",
            "ERROR_IN_GETTING_CHANNEL_STREAMS",
            "UNEXPECTED",
            "UNKNOWN_ERROR",
            "UNKNOWN_EXECUTOR_TYPE_ERROR",
            "DUPLICATE_STATE_NAMES",
            "TRANSITION_NOT_LINKED",
            "TRANSITION_TO_INCORRECT_STATE",
            "TRANSITION_TYPE_NULL",
            "STATES_WITH_DUP_TRANSITIONS",
            "BARRIERS_NOT_RUNNING_CONCURRENTLY",
            "NON_FORK_STATES",
            "NON_REPEAT_STATES",
            "INITIAL_STATE_NOT_DEFINED",
            "FILE_INTEGRITY_CHECK_FAILED",
            "INVALID_URL",
            "FILE_DOWNLOAD_FAILED",
            "PLATFORM_SOFTWARE_DELETE_ERROR",
            "INVALID_CSV_FILE",
            "INVALID_REQUEST",
            "INVALID_INFRA_STATE",
            "PIPELINE_ALREADY_TRIGGERED",
            "NON_EXISTING_PIPELINE",
            "DUPLICATE_COMMAND_NAMES",
            "INVALID_PIPELINE",
            "COMMAND_DOES_NOT_EXIST",
            "DUPLICATE_ARTIFACTSTREAM_NAMES",
            "DUPLICATE_HOST_NAMES",
            "STATE_NOT_FOR_TYPE",
            "STATE_MACHINE_ISSUE",
            "STATE_DISCONTINUE_FAILED",
            "STATE_PAUSE_FAILED",
            "PAUSE_ALL_ALREADY",
            "RESUME_ALL_ALREADY",
            "ROLLBACK_ALREADY",
            "ABORT_ALL_ALREADY",
            "RETRY_FAILED",
            "UNKNOWN_ARTIFACT_TYPE",
            "UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE",
            "INIT_TIMEOUT",
            "LICENSE_EXPIRED",
            "NOT_LICENSED",
            "REQUEST_TIMEOUT",
            "WORKFLOW_ALREADY_TRIGGERED",
            "JENKINS_ERROR",
            "INVALID_ARTIFACT_SOURCE",
            "INVALID_ARTIFACT_SERVER",
            "INVALID_CLOUD_PROVIDER",
            "UPDATE_NOT_ALLOWED",
            "DELETE_NOT_ALLOWED",
            "APPDYNAMICS_CONFIGURATION_ERROR",
            "APM_CONFIGURATION_ERROR",
            "SPLUNK_CONFIGURATION_ERROR",
            "ELK_CONFIGURATION_ERROR",
            "LOGZ_CONFIGURATION_ERROR",
            "SUMO_CONFIGURATION_ERROR",
            "INSTANA_CONFIGURATION_ERROR",
            "APPDYNAMICS_ERROR",
            "STACKDRIVER_ERROR",
            "STACKDRIVER_CONFIGURATION_ERROR",
            "NEWRELIC_CONFIGURATION_ERROR",
            "NEWRELIC_ERROR",
            "DYNA_TRACE_CONFIGURATION_ERROR",
            "DYNA_TRACE_ERROR",
            "CLOUDWATCH_ERROR",
            "CLOUDWATCH_CONFIGURATION_ERROR",
            "PROMETHEUS_CONFIGURATION_ERROR",
            "DATA_DOG_CONFIGURATION_ERROR",
            "SERVICE_GUARD_CONFIGURATION_ERROR",
            "ENCRYPTION_NOT_CONFIGURED",
            "UNAVAILABLE_DELEGATES",
            "WORKFLOW_EXECUTION_IN_PROGRESS",
            "PIPELINE_EXECUTION_IN_PROGRESS",
            "AWS_ACCESS_DENIED",
            "AWS_CLUSTER_NOT_FOUND",
            "AWS_SERVICE_NOT_FOUND",
            "INVALID_YAML_PAYLOAD",
            "UNRECOGNIZED_YAML_FIELDS",
            "COULD_NOT_MAP_BEFORE_YAML",
            "MISSING_BEFORE_YAML",
            "MISSING_YAML",
            "NON_EMPTY_DELETIONS",
            "GENERAL_YAML_ERROR",
            "GENERAL_YAML_INFO",
            "YAML_GIT_SYNC_ERROR",
            "GIT_CONNECTION_ERROR",
            "GIT_ERROR",
            "ARTIFACT_SERVER_ERROR",
            "ENCRYPT_DECRYPT_ERROR",
            "SECRET_MANAGEMENT_ERROR",
            "KMS_OPERATION_ERROR",
            "GCP_KMS_OPERATION_ERROR",
            "VAULT_OPERATION_ERROR",
            "AWS_SECRETS_MANAGER_OPERATION_ERROR",
            "AZURE_KEY_VAULT_OPERATION_ERROR",
            "CYBERARK_OPERATION_ERROR",
            "UNSUPPORTED_OPERATION_EXCEPTION",
            "FEATURE_UNAVAILABLE",
            "GENERAL_ERROR",
            "BASELINE_CONFIGURATION_ERROR",
            "SAML_IDP_CONFIGURATION_NOT_AVAILABLE",
            "INVALID_AUTHENTICATION_MECHANISM",
            "INVALID_SAML_CONFIGURATION",
            "INVALID_OAUTH_CONFIGURATION",
            "INVALID_LDAP_CONFIGURATION",
            "USER_GROUP_SYNC_FAILURE",
            "USER_GROUP_ALREADY_EXIST",
            "INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION",
            "EXPLANATION",
            "HINT",
            "NOT_WHITELISTED_IP",
            "INVALID_TOTP_TOKEN",
            "EMAIL_FAILED",
            "SSL_HANDSHAKE_FAILED",
            "NO_APPS_ASSIGNED",
            "INVALID_INFRA_CONFIGURATION",
            "TEMPLATES_LINKED",
            "USER_HAS_NO_PERMISSIONS",
            "USER_NOT_AUTHORIZED",
            "USER_ALREADY_PRESENT",
            "INVALID_USAGE_RESTRICTION",
            "USAGE_RESTRICTION_ERROR",
            "STATE_EXECUTION_INSTANCE_NOT_FOUND",
            "DELEGATE_TASK_RETRY",
            "KUBERNETES_YAML_ERROR",
            "SAVE_FILE_INTO_GCP_STORAGE_FAILED",
            "READ_FILE_FROM_GCP_STORAGE_FAILED",
            "USAGE_LIMITS_EXCEEDED",
            "EVENT_PUBLISH_FAILED",
            "JIRA_ERROR",
            "EXPRESSION_EVALUATION_FAILED",
            "KUBERNETES_VALUES_ERROR",
            "KUBERNETES_CLUSTER_ERROR",
            "INCORRECT_SIGN_IN_MECHANISM",
            "OAUTH_LOGIN_FAILED",
            "INVALID_TERRAFORM_TARGETS_REQUEST",
            "TERRAFORM_EXECUTION_ERROR",
            "FILE_READ_FAILED",
            "FILE_SIZE_EXCEEDS_LIMIT",
            "CLUSTER_NOT_FOUND",
            "MARKETPLACE_TOKEN_NOT_FOUND",
            "INVALID_MARKETPLACE_TOKEN",
            "INVALID_TICKETING_SERVER",
            "SERVICENOW_ERROR",
            "PASSWORD_EXPIRED",
            "USER_LOCKED",
            "PASSWORD_STRENGTH_CHECK_FAILED",
            "ACCOUNT_DISABLED",
            "INVALID_ACCOUNT_PERMISSION",
            "PAGERDUTY_ERROR",
            "HEALTH_ERROR",
            "SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED",
            "DOMAIN_WHITELIST_FILTER_CHECK_FAILED",
            "INVALID_DASHBOARD_UPDATE_REQUEST",
            "DUPLICATE_FIELD",
            "INVALID_AZURE_VAULT_CONFIGURATION",
            "USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS",
            "INVALID_ROLLBACK",
            "SUMO_DATA_COLLECTION_ERROR",
            "DEPLOYMENT_GOVERNANCE_ERROR",
            "BATCH_PROCESSING_ERROR",
            "GRAPHQL_ERROR",
            "FILE_CREATE_ERROR",
            "ILLEGAL_STATE",
            "GIT_DIFF_COMMIT_NOT_IN_ORDER",
            "FAILED_TO_ACQUIRE_PERSISTENT_LOCK",
            "FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK",
            "POD_NOT_FOUND_ERROR",
            "COMMAND_EXECUTION_ERROR",
            "REGISTRY_EXCEPTION",
            "ENGINE_INTERRUPT_PROCESSING_EXCEPTION",
            "ENGINE_IO_EXCEPTION",
            "ENGINE_OUTCOME_EXCEPTION",
            "ENGINE_SWEEPING_OUTPUT_EXCEPTION",
            "CACHE_NOT_FOUND_EXCEPTION",
            "ENGINE_ENTITY_UPDATE_EXCEPTION",
            "SHELL_EXECUTION_EXCEPTION",
            "TEMPLATE_NOT_FOUND",
            "AZURE_SERVICE_EXCEPTION",
            "AZURE_CLIENT_EXCEPTION",
            "GIT_UNSEEN_REMOTE_HEAD_COMMIT",
            "TIMEOUT_ENGINE_EXCEPTION",
            "NO_AVAILABLE_DELEGATES",
            "NO_INSTALLED_DELEGATES",
            "DUPLICATE_DELEGATE_EXCEPTION",
            "GCP_MARKETPLACE_EXCEPTION",
            "MISSING_DEFAULT_GOOGLE_CREDENTIALS",
            "INCORRECT_DEFAULT_GOOGLE_CREDENTIALS",
            "OPTIMISTIC_LOCKING_EXCEPTION",
            "NG_PIPELINE_EXECUTION_EXCEPTION",
            "NG_PIPELINE_CREATE_EXCEPTION",
            "RESOURCE_NOT_FOUND_EXCEPTION",
            "PMS_INITIALIZE_SDK_EXCEPTION",
            "UNEXPECTED_SNIPPET_EXCEPTION",
            "UNEXPECTED_SCHEMA_EXCEPTION",
            "CONNECTOR_VALIDATION_EXCEPTION",
            "GCP_SECRET_MANAGER_OPERATION_ERROR",
            "GCP_SECRET_OPERATION_ERROR",
            "GIT_OPERATION_ERROR",
            "TASK_FAILURE_ERROR",
            "INSTANCE_STATS_PROCESS_ERROR",
            "INSTANCE_STATS_MIGRATION_ERROR",
            "DEPLOYMENT_MIGRATION_ERROR",
            "INSTANCE_STATS_AGGREGATION_ERROR",
            "UNRESOLVED_EXPRESSIONS_ERROR",
            "KRYO_HANDLER_NOT_FOUND_ERROR",
            "DELEGATE_ERROR_HANDLER_EXCEPTION",
            "UNEXPECTED_TYPE_ERROR",
            "EXCEPTION_HANDLER_NOT_FOUND",
            "CONNECTOR_NOT_FOUND_EXCEPTION",
            "GCP_SERVER_ERROR",
            "HTTP_RESPONSE_EXCEPTION",
            "DATA"
          ]
        },
        "message": {
          "type": "string"
        },
        "correlationId": {
          "type": "string"
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ValidationError"
          }
        }
      }
    },
    "ValidationError": {
      "type": "object",
      "properties": {
        "fieldId": {
          "type": "string"
        },
        "error": {
          "type": "string"
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "code": {
          "type": "string",
          "enum": [
            "DEFAULT_ERROR_CODE",
            "INVALID_ARGUMENT",
            "INVALID_EMAIL",
            "DOMAIN_NOT_ALLOWED_TO_REGISTER",
            "USER_ALREADY_REGISTERED",
            "USER_INVITATION_DOES_NOT_EXIST",
            "USER_DOES_NOT_EXIST",
            "USER_INVITE_OPERATION_FAILED",
            "USER_DISABLED",
            "ACCOUNT_DOES_NOT_EXIST",
            "INACTIVE_ACCOUNT",
            "ACCOUNT_MIGRATED",
            "USER_DOMAIN_NOT_ALLOWED",
            "MAX_FAILED_ATTEMPT_COUNT_EXCEEDED",
            "RESOURCE_NOT_FOUND",
            "ROLE_DOES_NOT_EXIST",
            "EMAIL_NOT_VERIFIED",
            "EMAIL_VERIFICATION_TOKEN_NOT_FOUND",
            "INVALID_TOKEN",
            "INVALID_CAPTCHA_TOKEN",
            "NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS",
            "EXPIRED_TOKEN",
            "TOKEN_ALREADY_REFRESHED_ONCE",
            "ACCESS_DENIED",
            "NG_ACCESS_DENIED",
            "INVALID_CREDENTIAL",
            "INVALID_KEY",
            "INVALID_KEYPATH",
            "INVALID_VARIABLE",
            "UNKNOWN_HOST",
            "UNREACHABLE_HOST",
            "INVALID_PORT",
            "SSH_SESSION_TIMEOUT",
            "SOCKET_CONNECTION_ERROR",
            "SOCKET_CONNECTION_TIMEOUT",
            "CONNECTION_TIMEOUT",
            "SSH_CONNECTION_ERROR",
            "USER_GROUP_ERROR",
            "INVALID_EXECUTION_ID",
            "ERROR_IN_GETTING_CHANNEL_STREAMS",
            "UNEXPECTED",
            "UNKNOWN_ERROR",
            "UNKNOWN_EXECUTOR_TYPE_ERROR",
            "DUPLICATE_STATE_NAMES",
            "TRANSITION_NOT_LINKED",
            "TRANSITION_TO_INCORRECT_STATE",
            "TRANSITION_TYPE_NULL",
            "STATES_WITH_DUP_TRANSITIONS",
            "BARRIERS_NOT_RUNNING_CONCURRENTLY",
            "NON_FORK_STATES",
            "NON_REPEAT_STATES",
            "INITIAL_STATE_NOT_DEFINED",
            "FILE_INTEGRITY_CHECK_FAILED",
            "INVALID_URL",
            "FILE_DOWNLOAD_FAILED",
            "PLATFORM_SOFTWARE_DELETE_ERROR",
            "INVALID_CSV_FILE",
            "INVALID_REQUEST",
            "INVALID_INFRA_STATE",
            "PIPELINE_ALREADY_TRIGGERED",
            "NON_EXISTING_PIPELINE",
            "DUPLICATE_COMMAND_NAMES",
            "INVALID_PIPELINE",
            "COMMAND_DOES_NOT_EXIST",
            "DUPLICATE_ARTIFACTSTREAM_NAMES",
            "DUPLICATE_HOST_NAMES",
            "STATE_NOT_FOR_TYPE",
            "STATE_MACHINE_ISSUE",
            "STATE_DISCONTINUE_FAILED",
            "STATE_PAUSE_FAILED",
            "PAUSE_ALL_ALREADY",
            "RESUME_ALL_ALREADY",
            "ROLLBACK_ALREADY",
            "ABORT_ALL_ALREADY",
            "RETRY_FAILED",
            "UNKNOWN_ARTIFACT_TYPE",
            "UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE",
            "INIT_TIMEOUT",
            "LICENSE_EXPIRED",
            "NOT_LICENSED",
            "REQUEST_TIMEOUT",
            "WORKFLOW_ALREADY_TRIGGERED",
            "JENKINS_ERROR",
            "INVALID_ARTIFACT_SOURCE",
            "INVALID_ARTIFACT_SERVER",
            "INVALID_CLOUD_PROVIDER",
            "UPDATE_NOT_ALLOWED",
            "DELETE_NOT_ALLOWED",
            "APPDYNAMICS_CONFIGURATION_ERROR",
            "APM_CONFIGURATION_ERROR",
            "SPLUNK_CONFIGURATION_ERROR",
            "ELK_CONFIGURATION_ERROR",
            "LOGZ_CONFIGURATION_ERROR",
            "SUMO_CONFIGURATION_ERROR",
            "INSTANA_CONFIGURATION_ERROR",
            "APPDYNAMICS_ERROR",
            "STACKDRIVER_ERROR",
            "STACKDRIVER_CONFIGURATION_ERROR",
            "NEWRELIC_CONFIGURATION_ERROR",
            "NEWRELIC_ERROR",
            "DYNA_TRACE_CONFIGURATION_ERROR",
            "DYNA_TRACE_ERROR",
            "CLOUDWATCH_ERROR",
            "CLOUDWATCH_CONFIGURATION_ERROR",
            "PROMETHEUS_CONFIGURATION_ERROR",
            "DATA_DOG_CONFIGURATION_ERROR",
            "SERVICE_GUARD_CONFIGURATION_ERROR",
            "ENCRYPTION_NOT_CONFIGURED",
            "UNAVAILABLE_DELEGATES",
            "WORKFLOW_EXECUTION_IN_PROGRESS",
            "PIPELINE_EXECUTION_IN_PROGRESS",
            "AWS_ACCESS_DENIED",
            "AWS_CLUSTER_NOT_FOUND",
            "AWS_SERVICE_NOT_FOUND",
            "INVALID_YAML_PAYLOAD",
            "UNRECOGNIZED_YAML_FIELDS",
            "COULD_NOT_MAP_BEFORE_YAML",
            "MISSING_BEFORE_YAML",
            "MISSING_YAML",
            "NON_EMPTY_DELETIONS",
            "GENERAL_YAML_ERROR",
            "GENERAL_YAML_INFO",
            "YAML_GIT_SYNC_ERROR",
            "GIT_CONNECTION_ERROR",
            "GIT_ERROR",
            "ARTIFACT_SERVER_ERROR",
            "ENCRYPT_DECRYPT_ERROR",
            "SECRET_MANAGEMENT_ERROR",
            "KMS_OPERATION_ERROR",
            "GCP_KMS_OPERATION_ERROR",
            "VAULT_OPERATION_ERROR",
            "AWS_SECRETS_MANAGER_OPERATION_ERROR",
            "AZURE_KEY_VAULT_OPERATION_ERROR",
            "CYBERARK_OPERATION_ERROR",
            "UNSUPPORTED_OPERATION_EXCEPTION",
            "FEATURE_UNAVAILABLE",
            "GENERAL_ERROR",
            "BASELINE_CONFIGURATION_ERROR",
            "SAML_IDP_CONFIGURATION_NOT_AVAILABLE",
            "INVALID_AUTHENTICATION_MECHANISM",
            "INVALID_SAML_CONFIGURATION",
            "INVALID_OAUTH_CONFIGURATION",
            "INVALID_LDAP_CONFIGURATION",
            "USER_GROUP_SYNC_FAILURE",
            "USER_GROUP_ALREADY_EXIST",
            "INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION",
            "EXPLANATION",
            "HINT",
            "NOT_WHITELISTED_IP",
            "INVALID_TOTP_TOKEN",
            "EMAIL_FAILED",
            "SSL_HANDSHAKE_FAILED",
            "NO_APPS_ASSIGNED",
            "INVALID_INFRA_CONFIGURATION",
            "TEMPLATES_LINKED",
            "USER_HAS_NO_PERMISSIONS",
            "USER_NOT_AUTHORIZED",
            "USER_ALREADY_PRESENT",
            "INVALID_USAGE_RESTRICTION",
            "USAGE_RESTRICTION_ERROR",
            "STATE_EXECUTION_INSTANCE_NOT_FOUND",
            "DELEGATE_TASK_RETRY",
            "KUBERNETES_YAML_ERROR",
            "SAVE_FILE_INTO_GCP_STORAGE_FAILED",
            "READ_FILE_FROM_GCP_STORAGE_FAILED",
            "USAGE_LIMITS_EXCEEDED",
            "EVENT_PUBLISH_FAILED",
            "JIRA_ERROR",
            "EXPRESSION_EVALUATION_FAILED",
            "KUBERNETES_VALUES_ERROR",
            "KUBERNETES_CLUSTER_ERROR",
            "INCORRECT_SIGN_IN_MECHANISM",
            "OAUTH_LOGIN_FAILED",
            "INVALID_TERRAFORM_TARGETS_REQUEST",
            "TERRAFORM_EXECUTION_ERROR",
            "FILE_READ_FAILED",
            "FILE_SIZE_EXCEEDS_LIMIT",
            "CLUSTER_NOT_FOUND",
            "MARKETPLACE_TOKEN_NOT_FOUND",
            "INVALID_MARKETPLACE_TOKEN",
            "INVALID_TICKETING_SERVER",
            "SERVICENOW_ERROR",
            "PASSWORD_EXPIRED",
            "USER_LOCKED",
            "PASSWORD_STRENGTH_CHECK_FAILED",
            "ACCOUNT_DISABLED",
            "INVALID_ACCOUNT_PERMISSION",
            "PAGERDUTY_ERROR",
            "HEALTH_ERROR",
            "SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED",
            "DOMAIN_WHITELIST_FILTER_CHECK_FAILED",
            "INVALID_DASHBOARD_UPDATE_REQUEST",
            "DUPLICATE_FIELD",
            "INVALID_AZURE_VAULT_CONFIGURATION",
            "USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS",
            "INVALID_ROLLBACK",
            "SUMO_DATA_COLLECTION_ERROR",
            "DEPLOYMENT_GOVERNANCE_ERROR",
            "BATCH_PROCESSING_ERROR",
            "GRAPHQL_ERROR",
            "FILE_CREATE_ERROR",
            "ILLEGAL_STATE",
            "GIT_DIFF_COMMIT_NOT_IN_ORDER",
            "FAILED_TO_ACQUIRE_PERSISTENT_LOCK",
            "FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK",
            "POD_NOT_FOUND_ERROR",
            "COMMAND_EXECUTION_ERROR",
            "REGISTRY_EXCEPTION",
            "ENGINE_INTERRUPT_PROCESSING_EXCEPTION",
            "ENGINE_IO_EXCEPTION",
            "ENGINE_OUTCOME_EXCEPTION",
            "ENGINE_SWEEPING_OUTPUT_EXCEPTION",
            "CACHE_NOT_FOUND_EXCEPTION",
            "ENGINE_ENTITY_UPDATE_EXCEPTION",
            "SHELL_EXECUTION_EXCEPTION",
            "TEMPLATE_NOT_FOUND",
            "AZURE_SERVICE_EXCEPTION",
            "AZURE_CLIENT_EXCEPTION",
            "GIT_UNSEEN_REMOTE_HEAD_COMMIT",
            "TIMEOUT_ENGINE_EXCEPTION",
            "NO_AVAILABLE_DELEGATES",
            "NO_INSTALLED_DELEGATES",
            "DUPLICATE_DELEGATE_EXCEPTION",
            "GCP_MARKETPLACE_EXCEPTION",
            "MISSING_DEFAULT_GOOGLE_CREDENTIALS",
            "INCORRECT_DEFAULT_GOOGLE_CREDENTIALS",
            "OPTIMISTIC_LOCKING_EXCEPTION",
            "NG_PIPELINE_EXECUTION_EXCEPTION",
            "NG_PIPELINE_CREATE_EXCEPTION",
            "RESOURCE_NOT_FOUND_EXCEPTION",
            "PMS_INITIALIZE_SDK_EXCEPTION",
            "UNEXPECTED_SNIPPET_EXCEPTION",
            "UNEXPECTED_SCHEMA_EXCEPTION",
            "CONNECTOR_VALIDATION_EXCEPTION",
            "GCP_SECRET_MANAGER_OPERATION_ERROR",
            "GCP_SECRET_OPERATION_ERROR",
            "GIT_OPERATION_ERROR",
            "TASK_FAILURE_ERROR",
            "INSTANCE_STATS_PROCESS_ERROR",
            "INSTANCE_STATS_MIGRATION_ERROR",
            "DEPLOYMENT_MIGRATION_ERROR",
            "INSTANCE_STATS_AGGREGATION_ERROR",
            "UNRESOLVED_EXPRESSIONS_ERROR",
            "KRYO_HANDLER_NOT_FOUND_ERROR",
            "DELEGATE_ERROR_HANDLER_EXCEPTION",
            "UNEXPECTED_TYPE_ERROR",
            "EXCEPTION_HANDLER_NOT_FOUND",
            "CONNECTOR_NOT_FOUND_EXCEPTION",
            "GCP_SERVER_ERROR",
            "HTTP_RESPONSE_EXCEPTION",
            "DATA"
          ]
        },
        "message": {
          "type": "string"
        },
        "correlationId": {
          "type": "string"
        },
        "detailedMessage": {
          "type": "string"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "ResponseMessage": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "enum": [
            "DEFAULT_ERROR_CODE",
            "INVALID_ARGUMENT",
            "INVALID_EMAIL",
            "DOMAIN_NOT_ALLOWED_TO_REGISTER",
            "USER_ALREADY_REGISTERED",
            "USER_INVITATION_DOES_NOT_EXIST",
            "USER_DOES_NOT_EXIST",
            "USER_INVITE_OPERATION_FAILED",
            "USER_DISABLED",
            "ACCOUNT_DOES_NOT_EXIST",
            "INACTIVE_ACCOUNT",
            "ACCOUNT_MIGRATED",
            "USER_DOMAIN_NOT_ALLOWED",
            "MAX_FAILED_ATTEMPT_COUNT_EXCEEDED",
            "RESOURCE_NOT_FOUND",
            "ROLE_DOES_NOT_EXIST",
            "EMAIL_NOT_VERIFIED",
            "EMAIL_VERIFICATION_TOKEN_NOT_FOUND",
            "INVALID_TOKEN",
            "INVALID_CAPTCHA_TOKEN",
            "NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS",
            "EXPIRED_TOKEN",
            "TOKEN_ALREADY_REFRESHED_ONCE",
            "ACCESS_DENIED",
            "NG_ACCESS_DENIED",
            "INVALID_CREDENTIAL",
            "INVALID_KEY",
            "INVALID_KEYPATH",
            "INVALID_VARIABLE",
            "UNKNOWN_HOST",
            "UNREACHABLE_HOST",
            "INVALID_PORT",
            "SSH_SESSION_TIMEOUT",
            "SOCKET_CONNECTION_ERROR",
            "SOCKET_CONNECTION_TIMEOUT",
            "CONNECTION_TIMEOUT",
            "SSH_CONNECTION_ERROR",
            "USER_GROUP_ERROR",
            "INVALID_EXECUTION_ID",
            "ERROR_IN_GETTING_CHANNEL_STREAMS",
            "UNEXPECTED",
            "UNKNOWN_ERROR",
            "UNKNOWN_EXECUTOR_TYPE_ERROR",
            "DUPLICATE_STATE_NAMES",
            "TRANSITION_NOT_LINKED",
            "TRANSITION_TO_INCORRECT_STATE",
            "TRANSITION_TYPE_NULL",
            "STATES_WITH_DUP_TRANSITIONS",
            "BARRIERS_NOT_RUNNING_CONCURRENTLY",
            "NON_FORK_STATES",
            "NON_REPEAT_STATES",
            "INITIAL_STATE_NOT_DEFINED",
            "FILE_INTEGRITY_CHECK_FAILED",
            "INVALID_URL",
            "FILE_DOWNLOAD_FAILED",
            "PLATFORM_SOFTWARE_DELETE_ERROR",
            "INVALID_CSV_FILE",
            "INVALID_REQUEST",
            "INVALID_INFRA_STATE",
            "PIPELINE_ALREADY_TRIGGERED",
            "NON_EXISTING_PIPELINE",
            "DUPLICATE_COMMAND_NAMES",
            "INVALID_PIPELINE",
            "COMMAND_DOES_NOT_EXIST",
            "DUPLICATE_ARTIFACTSTREAM_NAMES",
            "DUPLICATE_HOST_NAMES",
            "STATE_NOT_FOR_TYPE",
            "STATE_MACHINE_ISSUE",
            "STATE_DISCONTINUE_FAILED",
            "STATE_PAUSE_FAILED",
            "PAUSE_ALL_ALREADY",
            "RESUME_ALL_ALREADY",
            "ROLLBACK_ALREADY",
            "ABORT_ALL_ALREADY",
            "RETRY_FAILED",
            "UNKNOWN_ARTIFACT_TYPE",
            "UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE",
            "INIT_TIMEOUT",
            "LICENSE_EXPIRED",
            "NOT_LICENSED",
            "REQUEST_TIMEOUT",
            "WORKFLOW_ALREADY_TRIGGERED",
            "JENKINS_ERROR",
            "INVALID_ARTIFACT_SOURCE",
            "INVALID_ARTIFACT_SERVER",
            "INVALID_CLOUD_PROVIDER",
            "UPDATE_NOT_ALLOWED",
            "DELETE_NOT_ALLOWED",
            "APPDYNAMICS_CONFIGURATION_ERROR",
            "APM_CONFIGURATION_ERROR",
            "SPLUNK_CONFIGURATION_ERROR",
            "ELK_CONFIGURATION_ERROR",
            "LOGZ_CONFIGURATION_ERROR",
            "SUMO_CONFIGURATION_ERROR",
            "INSTANA_CONFIGURATION_ERROR",
            "APPDYNAMICS_ERROR",
            "STACKDRIVER_ERROR",
            "STACKDRIVER_CONFIGURATION_ERROR",
            "NEWRELIC_CONFIGURATION_ERROR",
            "NEWRELIC_ERROR",
            "DYNA_TRACE_CONFIGURATION_ERROR",
            "DYNA_TRACE_ERROR",
            "CLOUDWATCH_ERROR",
            "CLOUDWATCH_CONFIGURATION_ERROR",
            "PROMETHEUS_CONFIGURATION_ERROR",
            "DATA_DOG_CONFIGURATION_ERROR",
            "SERVICE_GUARD_CONFIGURATION_ERROR",
            "ENCRYPTION_NOT_CONFIGURED",
            "UNAVAILABLE_DELEGATES",
            "WORKFLOW_EXECUTION_IN_PROGRESS",
            "PIPELINE_EXECUTION_IN_PROGRESS",
            "AWS_ACCESS_DENIED",
            "AWS_CLUSTER_NOT_FOUND",
            "AWS_SERVICE_NOT_FOUND",
            "INVALID_YAML_PAYLOAD",
            "UNRECOGNIZED_YAML_FIELDS",
            "COULD_NOT_MAP_BEFORE_YAML",
            "MISSING_BEFORE_YAML",
            "MISSING_YAML",
            "NON_EMPTY_DELETIONS",
            "GENERAL_YAML_ERROR",
            "GENERAL_YAML_INFO",
            "YAML_GIT_SYNC_ERROR",
            "GIT_CONNECTION_ERROR",
            "GIT_ERROR",
            "ARTIFACT_SERVER_ERROR",
            "ENCRYPT_DECRYPT_ERROR",
            "SECRET_MANAGEMENT_ERROR",
            "KMS_OPERATION_ERROR",
            "GCP_KMS_OPERATION_ERROR",
            "VAULT_OPERATION_ERROR",
            "AWS_SECRETS_MANAGER_OPERATION_ERROR",
            "AZURE_KEY_VAULT_OPERATION_ERROR",
            "CYBERARK_OPERATION_ERROR",
            "UNSUPPORTED_OPERATION_EXCEPTION",
            "FEATURE_UNAVAILABLE",
            "GENERAL_ERROR",
            "BASELINE_CONFIGURATION_ERROR",
            "SAML_IDP_CONFIGURATION_NOT_AVAILABLE",
            "INVALID_AUTHENTICATION_MECHANISM",
            "INVALID_SAML_CONFIGURATION",
            "INVALID_OAUTH_CONFIGURATION",
            "INVALID_LDAP_CONFIGURATION",
            "USER_GROUP_SYNC_FAILURE",
            "USER_GROUP_ALREADY_EXIST",
            "INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION",
            "EXPLANATION",
            "HINT",
            "NOT_WHITELISTED_IP",
            "INVALID_TOTP_TOKEN",
            "EMAIL_FAILED",
            "SSL_HANDSHAKE_FAILED",
            "NO_APPS_ASSIGNED",
            "INVALID_INFRA_CONFIGURATION",
            "TEMPLATES_LINKED",
            "USER_HAS_NO_PERMISSIONS",
            "USER_NOT_AUTHORIZED",
            "USER_ALREADY_PRESENT",
            "INVALID_USAGE_RESTRICTION",
            "USAGE_RESTRICTION_ERROR",
            "STATE_EXECUTION_INSTANCE_NOT_FOUND",
            "DELEGATE_TASK_RETRY",
            "KUBERNETES_YAML_ERROR",
            "SAVE_FILE_INTO_GCP_STORAGE_FAILED",
            "READ_FILE_FROM_GCP_STORAGE_FAILED",
            "USAGE_LIMITS_EXCEEDED",
            "EVENT_PUBLISH_FAILED",
            "JIRA_ERROR",
            "EXPRESSION_EVALUATION_FAILED",
            "KUBERNETES_VALUES_ERROR",
            "KUBERNETES_CLUSTER_ERROR",
            "INCORRECT_SIGN_IN_MECHANISM",
            "OAUTH_LOGIN_FAILED",
            "INVALID_TERRAFORM_TARGETS_REQUEST",
            "TERRAFORM_EXECUTION_ERROR",
            "FILE_READ_FAILED",
            "FILE_SIZE_EXCEEDS_LIMIT",
            "CLUSTER_NOT_FOUND",
            "MARKETPLACE_TOKEN_NOT_FOUND",
            "INVALID_MARKETPLACE_TOKEN",
            "INVALID_TICKETING_SERVER",
            "SERVICENOW_ERROR",
            "PASSWORD_EXPIRED",
            "USER_LOCKED",
            "PASSWORD_STRENGTH_CHECK_FAILED",
            "ACCOUNT_DISABLED",
            "INVALID_ACCOUNT_PERMISSION",
            "PAGERDUTY_ERROR",
            "HEALTH_ERROR",
            "SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED",
            "DOMAIN_WHITELIST_FILTER_CHECK_FAILED",
            "INVALID_DASHBOARD_UPDATE_REQUEST",
            "DUPLICATE_FIELD",
            "INVALID_AZURE_VAULT_CONFIGURATION",
            "USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS",
            "INVALID_ROLLBACK",
            "SUMO_DATA_COLLECTION_ERROR",
            "DEPLOYMENT_GOVERNANCE_ERROR",
            "BATCH_PROCESSING_ERROR",
            "GRAPHQL_ERROR",
            "FILE_CREATE_ERROR",
            "ILLEGAL_STATE",
            "GIT_DIFF_COMMIT_NOT_IN_ORDER",
            "FAILED_TO_ACQUIRE_PERSISTENT_LOCK",
            "FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK",
            "POD_NOT_FOUND_ERROR",
            "COMMAND_EXECUTION_ERROR",
            "REGISTRY_EXCEPTION",
            "ENGINE_INTERRUPT_PROCESSING_EXCEPTION",
            "ENGINE_IO_EXCEPTION",
            "ENGINE_OUTCOME_EXCEPTION",
            "ENGINE_SWEEPING_OUTPUT_EXCEPTION",
            "CACHE_NOT_FOUND_EXCEPTION",
            "ENGINE_ENTITY_UPDATE_EXCEPTION",
            "SHELL_EXECUTION_EXCEPTION",
            "TEMPLATE_NOT_FOUND",
            "AZURE_SERVICE_EXCEPTION",
            "AZURE_CLIENT_EXCEPTION",
            "GIT_UNSEEN_REMOTE_HEAD_COMMIT",
            "TIMEOUT_ENGINE_EXCEPTION",
            "NO_AVAILABLE_DELEGATES",
            "NO_INSTALLED_DELEGATES",
            "DUPLICATE_DELEGATE_EXCEPTION",
            "GCP_MARKETPLACE_EXCEPTION",
            "MISSING_DEFAULT_GOOGLE_CREDENTIALS",
            "INCORRECT_DEFAULT_GOOGLE_CREDENTIALS",
            "OPTIMISTIC_LOCKING_EXCEPTION",
            "NG_PIPELINE_EXECUTION_EXCEPTION",
            "NG_PIPELINE_CREATE_EXCEPTION",
            "RESOURCE_NOT_FOUND_EXCEPTION",
            "PMS_INITIALIZE_SDK_EXCEPTION",
            "UNEXPECTED_SNIPPET_EXCEPTION",
            "UNEXPECTED_SCHEMA_EXCEPTION",
            "CONNECTOR_VALIDATION_EXCEPTION",
            "GCP_SECRET_MANAGER_OPERATION_ERROR",
            "GCP_SECRET_OPERATION_ERROR",
            "GIT_OPERATION_ERROR",
            "TASK_FAILURE_ERROR",
            "INSTANCE_STATS_PROCESS_ERROR",
            "INSTANCE_STATS_MIGRATION_ERROR",
            "DEPLOYMENT_MIGRATION_ERROR",
            "INSTANCE_STATS_AGGREGATION_ERROR",
            "UNRESOLVED_EXPRESSIONS_ERROR",
            "KRYO_HANDLER_NOT_FOUND_ERROR",
            "DELEGATE_ERROR_HANDLER_EXCEPTION",
            "UNEXPECTED_TYPE_ERROR",
            "EXCEPTION_HANDLER_NOT_FOUND",
            "CONNECTOR_NOT_FOUND_EXCEPTION",
            "GCP_SERVER_ERROR",
            "HTTP_RESPONSE_EXCEPTION",
            "DATA"
          ]
        },
        "level": {
          "type": "string",
          "enum": ["INFO", "ERROR"]
        },
        "message": {
          "type": "string"
        },
        "exception": {
          "$ref": "#/definitions/Throwable"
        },
        "failureTypes": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "EXPIRED",
              "DELEGATE_PROVISIONING",
              "CONNECTIVITY",
              "AUTHENTICATION",
              "VERIFICATION_FAILURE",
              "APPLICATION_ERROR",
              "AUTHORIZATION_ERROR",
              "TIMEOUT_ERROR"
            ]
          }
        }
      }
    },
    "StackTraceElement": {
      "type": "object",
      "properties": {
        "methodName": {
          "type": "string"
        },
        "fileName": {
          "type": "string"
        },
        "lineNumber": {
          "type": "integer",
          "format": "int32"
        },
        "className": {
          "type": "string"
        },
        "nativeMethod": {
          "type": "boolean"
        }
      }
    },
    "Throwable": {
      "type": "object",
      "properties": {
        "cause": {
          "$ref": "#/definitions/Throwable"
        },
        "stackTrace": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StackTraceElement"
          }
        },
        "message": {
          "type": "string"
        },
        "localizedMessage": {
          "type": "string"
        },
        "suppressed": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Throwable"
          }
        }
      }
    },
    "ResponseMapServiceDefinitionTypeListExecutionStrategyType": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["Basic", "Canary", "BlueGreen", "Rolling", "Default"]
            }
          }
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ResponseString": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "string"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ResponseListServiceDefinitionType": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["Ssh", "Kubernetes", "Ecs", "NativeHelm", "Pcf"]
          }
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ResponseStepCategory": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/StepCategory"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "StepCategory": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "stepsData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StepData"
          }
        },
        "stepCategories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StepCategory"
          }
        }
      }
    },
    "StepData": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Placeholder",
            "Placeholder",
            "Placeholder",
            "K8sRollingDeploy",
            "K8sRollingRollback",
            "K8sBGSwapServices",
            "K8sDelete",
            "K8sCanaryDelete",
            "K8sCanaryDeploy",
            "TerraformApply",
            "TerraformPlan",
            "TerraformDestroy",
            "TerraformRollback",
            "Placeholder",
            "Placeholder",
            "Placeholder",
            "Placeholder",
            "Placeholder",
            "Placeholder",
            "Placeholder",
            "ShellScript",
            "Placeholder",
            "Placeholder"
          ]
        },
        "name": {
          "type": "string"
        }
      }
    },
    "NGPipelineValidationInfo": {
      "type": "object",
      "properties": {
        "pipelineYaml": {
          "type": "string"
        },
        "uuidToErrorResponseMap": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/VisitorErrorResponseWrapper"
          }
        },
        "errorResponse": {
          "type": "boolean"
        }
      }
    },
    "ResponseNGPipelineValidationInfo": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/NGPipelineValidationInfo"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "VisitorErrorResponse": {
      "type": "object",
      "properties": {
        "fieldName": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "VisitorErrorResponseWrapper": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VisitorErrorResponse"
          }
        }
      }
    },
    "ByteString": {
      "type": "object",
      "properties": {
        "empty": {
          "type": "boolean"
        },
        "validUtf8": {
          "type": "boolean"
        }
      }
    },
    "Commit": {
      "type": "object",
      "properties": {
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "message": {
          "type": "string"
        },
        "initialized": {
          "type": "boolean"
        },
        "serializedSize": {
          "type": "integer",
          "format": "int32"
        },
        "parserForType": {
          "$ref": "#/definitions/ParserCommit"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/Commit"
        },
        "messageBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "link": {
          "type": "string"
        },
        "committer": {
          "$ref": "#/definitions/Signature"
        },
        "committerOrBuilder": {
          "$ref": "#/definitions/SignatureOrBuilder"
        },
        "sha": {
          "type": "string"
        },
        "shaBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "linkBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "author": {
          "$ref": "#/definitions/Signature"
        },
        "authorOrBuilder": {
          "$ref": "#/definitions/SignatureOrBuilder"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "CommitOrBuilder": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "messageBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "link": {
          "type": "string"
        },
        "committer": {
          "$ref": "#/definitions/Signature"
        },
        "committerOrBuilder": {
          "$ref": "#/definitions/SignatureOrBuilder"
        },
        "sha": {
          "type": "string"
        },
        "shaBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "linkBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "author": {
          "$ref": "#/definitions/Signature"
        },
        "authorOrBuilder": {
          "$ref": "#/definitions/SignatureOrBuilder"
        },
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/Message"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "initialized": {
          "type": "boolean"
        }
      }
    },
    "Descriptor": {
      "type": "object",
      "properties": {
        "index": {
          "type": "integer",
          "format": "int32"
        },
        "fullName": {
          "type": "string"
        },
        "file": {
          "$ref": "#/definitions/FileDescriptor"
        },
        "containingType": {
          "$ref": "#/definitions/Descriptor"
        },
        "nestedTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Descriptor"
          }
        },
        "enumTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EnumDescriptor"
          }
        },
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FieldDescriptor"
          }
        },
        "extensions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FieldDescriptor"
          }
        },
        "oneofs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OneofDescriptor"
          }
        },
        "name": {
          "type": "string"
        },
        "options": {
          "$ref": "#/definitions/MessageOptions"
        },
        "extendable": {
          "type": "boolean"
        }
      }
    },
    "EnumDescriptor": {
      "type": "object",
      "properties": {
        "index": {
          "type": "integer",
          "format": "int32"
        },
        "fullName": {
          "type": "string"
        },
        "file": {
          "$ref": "#/definitions/FileDescriptor"
        },
        "containingType": {
          "$ref": "#/definitions/Descriptor"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EnumValueDescriptor"
          }
        },
        "name": {
          "type": "string"
        },
        "options": {
          "$ref": "#/definitions/EnumOptions"
        }
      }
    },
    "EnumOptions": {
      "type": "object",
      "properties": {
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "uninterpretedOptionCount": {
          "type": "integer",
          "format": "int32"
        },
        "initialized": {
          "type": "boolean"
        },
        "serializedSize": {
          "type": "integer",
          "format": "int32"
        },
        "parserForType": {
          "$ref": "#/definitions/ParserEnumOptions"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/EnumOptions"
        },
        "uninterpretedOptionList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UninterpretedOption"
          }
        },
        "uninterpretedOptionOrBuilderList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UninterpretedOptionOrBuilder"
          }
        },
        "deprecated": {
          "type": "boolean"
        },
        "allowAlias": {
          "type": "boolean"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "allFieldsRaw": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "EnumValueDescriptor": {
      "type": "object",
      "properties": {
        "index": {
          "type": "integer",
          "format": "int32"
        },
        "fullName": {
          "type": "string"
        },
        "file": {
          "$ref": "#/definitions/FileDescriptor"
        },
        "type": {
          "$ref": "#/definitions/EnumDescriptor"
        },
        "name": {
          "type": "string"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "options": {
          "$ref": "#/definitions/EnumValueOptions"
        }
      }
    },
    "EnumValueOptions": {
      "type": "object",
      "properties": {
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "uninterpretedOptionCount": {
          "type": "integer",
          "format": "int32"
        },
        "initialized": {
          "type": "boolean"
        },
        "serializedSize": {
          "type": "integer",
          "format": "int32"
        },
        "parserForType": {
          "$ref": "#/definitions/ParserEnumValueOptions"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/EnumValueOptions"
        },
        "uninterpretedOptionList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UninterpretedOption"
          }
        },
        "uninterpretedOptionOrBuilderList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UninterpretedOptionOrBuilder"
          }
        },
        "deprecated": {
          "type": "boolean"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "allFieldsRaw": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "ExecutionMetadata": {
      "type": "object",
      "properties": {
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "yaml": {
          "type": "string"
        },
        "runSequence": {
          "type": "integer",
          "format": "int32"
        },
        "triggerInfo": {
          "$ref": "#/definitions/ExecutionTriggerInfo"
        },
        "triggerInfoOrBuilder": {
          "$ref": "#/definitions/ExecutionTriggerInfoOrBuilder"
        },
        "triggerPayload": {
          "$ref": "#/definitions/TriggerPayload"
        },
        "triggerPayloadOrBuilder": {
          "$ref": "#/definitions/TriggerPayloadOrBuilder"
        },
        "pipelineIdentifier": {
          "type": "string"
        },
        "pipelineIdentifierBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "inputSetYaml": {
          "type": "string"
        },
        "inputSetYamlBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "executionUuid": {
          "type": "string"
        },
        "executionUuidBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "yamlBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "principalInfoOrBuilder": {
          "$ref": "#/definitions/ExecutionPrincipalInfoOrBuilder"
        },
        "processedYaml": {
          "type": "string"
        },
        "processedYamlBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "principalInfo": {
          "$ref": "#/definitions/ExecutionPrincipalInfo"
        },
        "initialized": {
          "type": "boolean"
        },
        "serializedSize": {
          "type": "integer",
          "format": "int32"
        },
        "parserForType": {
          "$ref": "#/definitions/ParserExecutionMetadata"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/ExecutionMetadata"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "ExecutionPrincipalInfo": {
      "type": "object",
      "properties": {
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "principal": {
          "type": "string"
        },
        "principalBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "principalTypeValue": {
          "type": "integer",
          "format": "int32"
        },
        "principalType": {
          "type": "string",
          "enum": [
            "UNKNOWN",
            "USER",
            "USER_GROUP",
            "API_KEY",
            "SERVICE",
            "UNRECOGNIZED"
          ]
        },
        "initialized": {
          "type": "boolean"
        },
        "serializedSize": {
          "type": "integer",
          "format": "int32"
        },
        "parserForType": {
          "$ref": "#/definitions/ParserExecutionPrincipalInfo"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/ExecutionPrincipalInfo"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "ExecutionPrincipalInfoOrBuilder": {
      "type": "object",
      "properties": {
        "principal": {
          "type": "string"
        },
        "principalBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "principalTypeValue": {
          "type": "integer",
          "format": "int32"
        },
        "principalType": {
          "type": "string",
          "enum": [
            "UNKNOWN",
            "USER",
            "USER_GROUP",
            "API_KEY",
            "SERVICE",
            "UNRECOGNIZED"
          ]
        },
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/Message"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "initialized": {
          "type": "boolean"
        }
      }
    },
    "ExecutionTriggerInfo": {
      "type": "object",
      "properties": {
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "triggerTypeValue": {
          "type": "integer",
          "format": "int32"
        },
        "triggerType": {
          "type": "string",
          "enum": [
            "NOOP",
            "MANUAL",
            "WEBHOOK",
            "WEBHOOK_CUSTOM",
            "SCHEDULER_CRON",
            "UNRECOGNIZED"
          ]
        },
        "triggeredBy": {
          "$ref": "#/definitions/TriggeredBy"
        },
        "triggeredByOrBuilder": {
          "$ref": "#/definitions/TriggeredByOrBuilder"
        },
        "initialized": {
          "type": "boolean"
        },
        "serializedSize": {
          "type": "integer",
          "format": "int32"
        },
        "parserForType": {
          "$ref": "#/definitions/ParserExecutionTriggerInfo"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/ExecutionTriggerInfo"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "ExecutionTriggerInfoOrBuilder": {
      "type": "object",
      "properties": {
        "triggerTypeValue": {
          "type": "integer",
          "format": "int32"
        },
        "triggerType": {
          "type": "string",
          "enum": [
            "NOOP",
            "MANUAL",
            "WEBHOOK",
            "WEBHOOK_CUSTOM",
            "SCHEDULER_CRON",
            "UNRECOGNIZED"
          ]
        },
        "triggeredBy": {
          "$ref": "#/definitions/TriggeredBy"
        },
        "triggeredByOrBuilder": {
          "$ref": "#/definitions/TriggeredByOrBuilder"
        },
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/Message"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "initialized": {
          "type": "boolean"
        }
      }
    },
    "FieldDescriptor": {
      "type": "object",
      "properties": {
        "index": {
          "type": "integer",
          "format": "int32"
        },
        "fullName": {
          "type": "string"
        },
        "jsonName": {
          "type": "string"
        },
        "file": {
          "$ref": "#/definitions/FileDescriptor"
        },
        "extensionScope": {
          "$ref": "#/definitions/Descriptor"
        },
        "type": {
          "type": "string",
          "enum": [
            "DOUBLE",
            "FLOAT",
            "INT64",
            "UINT64",
            "INT32",
            "FIXED64",
            "FIXED32",
            "BOOL",
            "STRING",
            "GROUP",
            "MESSAGE",
            "BYTES",
            "UINT32",
            "ENUM",
            "SFIXED32",
            "SFIXED64",
            "SINT32",
            "SINT64"
          ]
        },
        "containingType": {
          "$ref": "#/definitions/Descriptor"
        },
        "messageType": {
          "$ref": "#/definitions/Descriptor"
        },
        "containingOneof": {
          "$ref": "#/definitions/OneofDescriptor"
        },
        "enumType": {
          "$ref": "#/definitions/EnumDescriptor"
        },
        "defaultValue": {
          "type": "object"
        },
        "required": {
          "type": "boolean"
        },
        "optional": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "options": {
          "$ref": "#/definitions/FieldOptions"
        },
        "extension": {
          "type": "boolean"
        },
        "packed": {
          "type": "boolean"
        },
        "liteJavaType": {
          "type": "string",
          "enum": [
            "INT",
            "LONG",
            "FLOAT",
            "DOUBLE",
            "BOOLEAN",
            "STRING",
            "BYTE_STRING",
            "ENUM",
            "MESSAGE"
          ]
        },
        "liteType": {
          "type": "string",
          "enum": [
            "DOUBLE",
            "FLOAT",
            "INT64",
            "UINT64",
            "INT32",
            "FIXED64",
            "FIXED32",
            "BOOL",
            "STRING",
            "GROUP",
            "MESSAGE",
            "BYTES",
            "UINT32",
            "ENUM",
            "SFIXED32",
            "SFIXED64",
            "SINT32",
            "SINT64"
          ]
        },
        "packable": {
          "type": "boolean"
        },
        "repeated": {
          "type": "boolean"
        },
        "javaType": {
          "type": "string",
          "enum": [
            "INT",
            "LONG",
            "FLOAT",
            "DOUBLE",
            "BOOLEAN",
            "STRING",
            "BYTE_STRING",
            "ENUM",
            "MESSAGE"
          ]
        },
        "mapField": {
          "type": "boolean"
        }
      }
    },
    "FieldOptions": {
      "type": "object",
      "properties": {
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "uninterpretedOptionCount": {
          "type": "integer",
          "format": "int32"
        },
        "packed": {
          "type": "boolean"
        },
        "initialized": {
          "type": "boolean"
        },
        "serializedSize": {
          "type": "integer",
          "format": "int32"
        },
        "parserForType": {
          "$ref": "#/definitions/ParserFieldOptions"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/FieldOptions"
        },
        "ctype": {
          "type": "string",
          "enum": ["STRING", "CORD", "STRING_PIECE"]
        },
        "jstype": {
          "type": "string",
          "enum": ["JS_NORMAL", "JS_STRING", "JS_NUMBER"]
        },
        "lazy": {
          "type": "boolean"
        },
        "weak": {
          "type": "boolean"
        },
        "uninterpretedOptionList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UninterpretedOption"
          }
        },
        "uninterpretedOptionOrBuilderList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UninterpretedOptionOrBuilder"
          }
        },
        "deprecated": {
          "type": "boolean"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "allFieldsRaw": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "FileDescriptor": {
      "type": "object",
      "properties": {
        "messageTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Descriptor"
          }
        },
        "enumTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EnumDescriptor"
          }
        },
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceDescriptor"
          }
        },
        "extensions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FieldDescriptor"
          }
        },
        "dependencies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FileDescriptor"
          }
        },
        "publicDependencies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FileDescriptor"
          }
        },
        "fullName": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "package": {
          "type": "string"
        },
        "file": {
          "$ref": "#/definitions/FileDescriptor"
        },
        "options": {
          "$ref": "#/definitions/FileOptions"
        },
        "syntax": {
          "type": "string",
          "enum": ["UNKNOWN", "PROTO2", "PROTO3"]
        }
      }
    },
    "FileOptions": {
      "type": "object",
      "properties": {
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "uninterpretedOptionCount": {
          "type": "integer",
          "format": "int32"
        },
        "javaStringCheckUtf8": {
          "type": "boolean"
        },
        "initialized": {
          "type": "boolean"
        },
        "serializedSize": {
          "type": "integer",
          "format": "int32"
        },
        "parserForType": {
          "$ref": "#/definitions/ParserFileOptions"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/FileOptions"
        },
        "uninterpretedOptionList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UninterpretedOption"
          }
        },
        "uninterpretedOptionOrBuilderList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UninterpretedOptionOrBuilder"
          }
        },
        "deprecated": {
          "type": "boolean"
        },
        "javaPackage": {
          "type": "string"
        },
        "javaPackageBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "javaOuterClassname": {
          "type": "string"
        },
        "javaOuterClassnameBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "javaMultipleFiles": {
          "type": "boolean"
        },
        "javaGenerateEqualsAndHash": {
          "type": "boolean"
        },
        "optimizeFor": {
          "type": "string",
          "enum": ["SPEED", "CODE_SIZE", "LITE_RUNTIME"]
        },
        "goPackage": {
          "type": "string"
        },
        "goPackageBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "ccGenericServices": {
          "type": "boolean"
        },
        "javaGenericServices": {
          "type": "boolean"
        },
        "pyGenericServices": {
          "type": "boolean"
        },
        "phpGenericServices": {
          "type": "boolean"
        },
        "ccEnableArenas": {
          "type": "boolean"
        },
        "objcClassPrefix": {
          "type": "string"
        },
        "objcClassPrefixBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "csharpNamespace": {
          "type": "string"
        },
        "csharpNamespaceBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "swiftPrefix": {
          "type": "string"
        },
        "swiftPrefixBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "phpClassPrefix": {
          "type": "string"
        },
        "phpClassPrefixBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "phpNamespace": {
          "type": "string"
        },
        "phpNamespaceBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "phpMetadataNamespace": {
          "type": "string"
        },
        "phpMetadataNamespaceBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "rubyPackage": {
          "type": "string"
        },
        "rubyPackageBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "allFieldsRaw": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "Label": {
      "type": "object",
      "properties": {
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "name": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "colorBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "initialized": {
          "type": "boolean"
        },
        "serializedSize": {
          "type": "integer",
          "format": "int32"
        },
        "parserForType": {
          "$ref": "#/definitions/ParserLabel"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/Label"
        },
        "nameBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "LabelOrBuilder": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "colorBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "nameBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/Message"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "initialized": {
          "type": "boolean"
        }
      }
    },
    "Message": {
      "type": "object",
      "properties": {
        "parserForType": {
          "$ref": "#/definitions/ParserMessage"
        },
        "serializedSize": {
          "type": "integer",
          "format": "int32"
        },
        "initialized": {
          "type": "boolean"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/MessageLite"
        },
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "MessageLite": {
      "type": "object",
      "properties": {
        "serializedSize": {
          "type": "integer",
          "format": "int32"
        },
        "parserForType": {
          "$ref": "#/definitions/ParserMessageLite"
        },
        "initialized": {
          "type": "boolean"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/MessageLite"
        }
      }
    },
    "MessageOptions": {
      "type": "object",
      "properties": {
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "uninterpretedOptionCount": {
          "type": "integer",
          "format": "int32"
        },
        "mapEntry": {
          "type": "boolean"
        },
        "messageSetWireFormat": {
          "type": "boolean"
        },
        "initialized": {
          "type": "boolean"
        },
        "serializedSize": {
          "type": "integer",
          "format": "int32"
        },
        "parserForType": {
          "$ref": "#/definitions/ParserMessageOptions"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/MessageOptions"
        },
        "noStandardDescriptorAccessor": {
          "type": "boolean"
        },
        "uninterpretedOptionList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UninterpretedOption"
          }
        },
        "uninterpretedOptionOrBuilderList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UninterpretedOptionOrBuilder"
          }
        },
        "deprecated": {
          "type": "boolean"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "allFieldsRaw": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "MethodDescriptor": {
      "type": "object",
      "properties": {
        "index": {
          "type": "integer",
          "format": "int32"
        },
        "fullName": {
          "type": "string"
        },
        "file": {
          "$ref": "#/definitions/FileDescriptor"
        },
        "service": {
          "$ref": "#/definitions/ServiceDescriptor"
        },
        "inputType": {
          "$ref": "#/definitions/Descriptor"
        },
        "outputType": {
          "$ref": "#/definitions/Descriptor"
        },
        "name": {
          "type": "string"
        },
        "options": {
          "$ref": "#/definitions/MethodOptions"
        },
        "clientStreaming": {
          "type": "boolean"
        },
        "serverStreaming": {
          "type": "boolean"
        }
      }
    },
    "MethodOptions": {
      "type": "object",
      "properties": {
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "uninterpretedOptionCount": {
          "type": "integer",
          "format": "int32"
        },
        "initialized": {
          "type": "boolean"
        },
        "serializedSize": {
          "type": "integer",
          "format": "int32"
        },
        "parserForType": {
          "$ref": "#/definitions/ParserMethodOptions"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/MethodOptions"
        },
        "idempotencyLevel": {
          "type": "string",
          "enum": ["IDEMPOTENCY_UNKNOWN", "NO_SIDE_EFFECTS", "IDEMPOTENT"]
        },
        "uninterpretedOptionList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UninterpretedOption"
          }
        },
        "uninterpretedOptionOrBuilderList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UninterpretedOptionOrBuilder"
          }
        },
        "deprecated": {
          "type": "boolean"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "allFieldsRaw": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "NGPipelineError": {
      "type": "object",
      "properties": {
        "fieldName": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "identifierOfErrorSource": {
          "type": "string"
        }
      }
    },
    "NGPipelineErrorResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NGPipelineError"
          }
        }
      }
    },
    "NGPipelineErrorWrapper": {
      "type": "object",
      "properties": {
        "errorPipelineYaml": {
          "type": "string"
        },
        "uuidToErrorResponseMap": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/NGPipelineErrorResponse"
          }
        }
      }
    },
    "NGPipelineExecutionResponse": {
      "type": "object",
      "properties": {
        "planExecution": {
          "$ref": "#/definitions/PlanExecution"
        },
        "pipelineErrorResponse": {
          "$ref": "#/definitions/NGPipelineErrorWrapper"
        },
        "errorResponse": {
          "type": "boolean"
        }
      }
    },
    "NamePart": {
      "type": "object",
      "properties": {
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "initialized": {
          "type": "boolean"
        },
        "serializedSize": {
          "type": "integer",
          "format": "int32"
        },
        "parserForType": {
          "$ref": "#/definitions/ParserNamePart"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/NamePart"
        },
        "namePart": {
          "type": "string"
        },
        "namePartBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "isExtension": {
          "type": "boolean"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "NamePartOrBuilder": {
      "type": "object",
      "properties": {
        "namePart": {
          "type": "string"
        },
        "namePartBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "isExtension": {
          "type": "boolean"
        },
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/Message"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "initialized": {
          "type": "boolean"
        }
      }
    },
    "OneofDescriptor": {
      "type": "object",
      "properties": {
        "index": {
          "type": "integer",
          "format": "int32"
        },
        "fullName": {
          "type": "string"
        },
        "file": {
          "$ref": "#/definitions/FileDescriptor"
        },
        "containingType": {
          "$ref": "#/definitions/Descriptor"
        },
        "fieldCount": {
          "type": "integer",
          "format": "int32"
        },
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FieldDescriptor"
          }
        },
        "name": {
          "type": "string"
        },
        "options": {
          "$ref": "#/definitions/OneofOptions"
        }
      }
    },
    "OneofOptions": {
      "type": "object",
      "properties": {
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "uninterpretedOptionCount": {
          "type": "integer",
          "format": "int32"
        },
        "initialized": {
          "type": "boolean"
        },
        "serializedSize": {
          "type": "integer",
          "format": "int32"
        },
        "parserForType": {
          "$ref": "#/definitions/ParserOneofOptions"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/OneofOptions"
        },
        "uninterpretedOptionList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UninterpretedOption"
          }
        },
        "uninterpretedOptionOrBuilderList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UninterpretedOptionOrBuilder"
          }
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "allFieldsRaw": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "ParsedPayload": {
      "type": "object",
      "properties": {
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "initialized": {
          "type": "boolean"
        },
        "serializedSize": {
          "type": "integer",
          "format": "int32"
        },
        "parserForType": {
          "$ref": "#/definitions/ParserParsedPayload"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/ParsedPayload"
        },
        "prOrBuilder": {
          "$ref": "#/definitions/PullRequestHookOrBuilder"
        },
        "pr": {
          "$ref": "#/definitions/PullRequestHook"
        },
        "push": {
          "$ref": "#/definitions/PushHook"
        },
        "pushOrBuilder": {
          "$ref": "#/definitions/PushHookOrBuilder"
        },
        "payloadCase": {
          "type": "string",
          "enum": ["PR", "PUSH", "PAYLOAD_NOT_SET"]
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "ParsedPayloadOrBuilder": {
      "type": "object",
      "properties": {
        "prOrBuilder": {
          "$ref": "#/definitions/PullRequestHookOrBuilder"
        },
        "pr": {
          "$ref": "#/definitions/PullRequestHook"
        },
        "push": {
          "$ref": "#/definitions/PushHook"
        },
        "pushOrBuilder": {
          "$ref": "#/definitions/PushHookOrBuilder"
        },
        "payloadCase": {
          "type": "string",
          "enum": ["PR", "PUSH", "PAYLOAD_NOT_SET"]
        },
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/Message"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "initialized": {
          "type": "boolean"
        }
      }
    },
    "Parser": {
      "type": "object"
    },
    "ParserCommit": {
      "type": "object"
    },
    "ParserEnumOptions": {
      "type": "object"
    },
    "ParserEnumValueOptions": {
      "type": "object"
    },
    "ParserExecutionMetadata": {
      "type": "object"
    },
    "ParserExecutionPrincipalInfo": {
      "type": "object"
    },
    "ParserExecutionTriggerInfo": {
      "type": "object"
    },
    "ParserFieldOptions": {
      "type": "object"
    },
    "ParserFileOptions": {
      "type": "object"
    },
    "ParserLabel": {
      "type": "object"
    },
    "ParserMessage": {
      "type": "object"
    },
    "ParserMessageLite": {
      "type": "object"
    },
    "ParserMessageOptions": {
      "type": "object"
    },
    "ParserMethodOptions": {
      "type": "object"
    },
    "ParserNamePart": {
      "type": "object"
    },
    "ParserOneofOptions": {
      "type": "object"
    },
    "ParserParsedPayload": {
      "type": "object"
    },
    "ParserPerm": {
      "type": "object"
    },
    "ParserPullRequest": {
      "type": "object"
    },
    "ParserPullRequestHook": {
      "type": "object"
    },
    "ParserPushHook": {
      "type": "object"
    },
    "ParserReference": {
      "type": "object"
    },
    "ParserRepository": {
      "type": "object"
    },
    "ParserServiceOptions": {
      "type": "object"
    },
    "ParserSignature": {
      "type": "object"
    },
    "ParserTimestamp": {
      "type": "object"
    },
    "ParserTriggerPayload": {
      "type": "object"
    },
    "ParserTriggeredBy": {
      "type": "object"
    },
    "ParserUninterpretedOption": {
      "type": "object"
    },
    "ParserUser": {
      "type": "object"
    },
    "Perm": {
      "type": "object",
      "properties": {
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "admin": {
          "type": "boolean"
        },
        "pull": {
          "type": "boolean"
        },
        "initialized": {
          "type": "boolean"
        },
        "serializedSize": {
          "type": "integer",
          "format": "int32"
        },
        "parserForType": {
          "$ref": "#/definitions/ParserPerm"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/Perm"
        },
        "push": {
          "type": "boolean"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "PermOrBuilder": {
      "type": "object",
      "properties": {
        "admin": {
          "type": "boolean"
        },
        "pull": {
          "type": "boolean"
        },
        "push": {
          "type": "boolean"
        },
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/Message"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "initialized": {
          "type": "boolean"
        }
      }
    },
    "PlanExecution": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string"
        },
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "setupAbstractions": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "validUntil": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "enum": [
            "NO_OP",
            "RUNNING",
            "INTERVENTION_WAITING",
            "TIMED_WAITING",
            "ASYNC_WAITING",
            "TASK_WAITING",
            "DISCONTINUING",
            "PAUSING",
            "QUEUED",
            "SKIPPED",
            "PAUSED",
            "ABORTED",
            "ERRORED",
            "FAILED",
            "EXPIRED",
            "SUSPENDED",
            "SUCCEEDED",
            "IGNORE_FAILED",
            "APPROVAL_WAITING",
            "RESOURCE_WAITING",
            "UNRECOGNIZED"
          ]
        },
        "startTs": {
          "type": "integer",
          "format": "int64"
        },
        "endTs": {
          "type": "integer",
          "format": "int64"
        },
        "metadata": {
          "$ref": "#/definitions/ExecutionMetadata"
        },
        "lastUpdatedAt": {
          "type": "integer",
          "format": "int64"
        },
        "version": {
          "type": "integer",
          "format": "int64"
        },
        "nextIteration": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PullRequest": {
      "type": "object",
      "properties": {
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "target": {
          "type": "string"
        },
        "ref": {
          "type": "string"
        },
        "number": {
          "type": "integer",
          "format": "int64"
        },
        "title": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "head": {
          "$ref": "#/definitions/Reference"
        },
        "base": {
          "$ref": "#/definitions/Reference"
        },
        "initialized": {
          "type": "boolean"
        },
        "serializedSize": {
          "type": "integer",
          "format": "int32"
        },
        "parserForType": {
          "$ref": "#/definitions/ParserPullRequest"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/PullRequest"
        },
        "link": {
          "type": "string"
        },
        "refBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "bodyBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "sha": {
          "type": "string"
        },
        "titleBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "shaBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "sourceBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "targetBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "fork": {
          "type": "string"
        },
        "forkBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "linkBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "closed": {
          "type": "boolean"
        },
        "merged": {
          "type": "boolean"
        },
        "baseOrBuilder": {
          "$ref": "#/definitions/ReferenceOrBuilder"
        },
        "headOrBuilder": {
          "$ref": "#/definitions/ReferenceOrBuilder"
        },
        "author": {
          "$ref": "#/definitions/User"
        },
        "authorOrBuilder": {
          "$ref": "#/definitions/UserOrBuilder"
        },
        "createdOrBuilder": {
          "$ref": "#/definitions/TimestampOrBuilder"
        },
        "updated": {
          "$ref": "#/definitions/Timestamp"
        },
        "updatedOrBuilder": {
          "$ref": "#/definitions/TimestampOrBuilder"
        },
        "labelsList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Label"
          }
        },
        "labelsCount": {
          "type": "integer",
          "format": "int32"
        },
        "labelsOrBuilderList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LabelOrBuilder"
          }
        },
        "created": {
          "$ref": "#/definitions/Timestamp"
        },
        "body": {
          "type": "string"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "PullRequestHook": {
      "type": "object",
      "properties": {
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "initialized": {
          "type": "boolean"
        },
        "serializedSize": {
          "type": "integer",
          "format": "int32"
        },
        "parserForType": {
          "$ref": "#/definitions/ParserPullRequestHook"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/PullRequestHook"
        },
        "action": {
          "type": "string",
          "enum": [
            "UNKNOWN",
            "CREATE",
            "UPDATE",
            "DELETE",
            "OPEN",
            "REOPEN",
            "CLOSE",
            "LABEL",
            "UNLABEL",
            "SYNC",
            "MERGE",
            "UNRECOGNIZED"
          ]
        },
        "prOrBuilder": {
          "$ref": "#/definitions/PullRequestOrBuilder"
        },
        "pr": {
          "$ref": "#/definitions/PullRequest"
        },
        "actionValue": {
          "type": "integer",
          "format": "int32"
        },
        "repo": {
          "$ref": "#/definitions/Repository"
        },
        "repoOrBuilder": {
          "$ref": "#/definitions/RepositoryOrBuilder"
        },
        "sender": {
          "$ref": "#/definitions/User"
        },
        "senderOrBuilder": {
          "$ref": "#/definitions/UserOrBuilder"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "PullRequestHookOrBuilder": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "enum": [
            "UNKNOWN",
            "CREATE",
            "UPDATE",
            "DELETE",
            "OPEN",
            "REOPEN",
            "CLOSE",
            "LABEL",
            "UNLABEL",
            "SYNC",
            "MERGE",
            "UNRECOGNIZED"
          ]
        },
        "prOrBuilder": {
          "$ref": "#/definitions/PullRequestOrBuilder"
        },
        "pr": {
          "$ref": "#/definitions/PullRequest"
        },
        "actionValue": {
          "type": "integer",
          "format": "int32"
        },
        "repo": {
          "$ref": "#/definitions/Repository"
        },
        "repoOrBuilder": {
          "$ref": "#/definitions/RepositoryOrBuilder"
        },
        "sender": {
          "$ref": "#/definitions/User"
        },
        "senderOrBuilder": {
          "$ref": "#/definitions/UserOrBuilder"
        },
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/Message"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "initialized": {
          "type": "boolean"
        }
      }
    },
    "PullRequestOrBuilder": {
      "type": "object",
      "properties": {
        "target": {
          "type": "string"
        },
        "ref": {
          "type": "string"
        },
        "number": {
          "type": "integer",
          "format": "int64"
        },
        "title": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "head": {
          "$ref": "#/definitions/Reference"
        },
        "base": {
          "$ref": "#/definitions/Reference"
        },
        "link": {
          "type": "string"
        },
        "refBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "bodyBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "sha": {
          "type": "string"
        },
        "titleBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "shaBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "sourceBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "targetBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "fork": {
          "type": "string"
        },
        "forkBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "linkBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "closed": {
          "type": "boolean"
        },
        "merged": {
          "type": "boolean"
        },
        "baseOrBuilder": {
          "$ref": "#/definitions/ReferenceOrBuilder"
        },
        "headOrBuilder": {
          "$ref": "#/definitions/ReferenceOrBuilder"
        },
        "author": {
          "$ref": "#/definitions/User"
        },
        "authorOrBuilder": {
          "$ref": "#/definitions/UserOrBuilder"
        },
        "createdOrBuilder": {
          "$ref": "#/definitions/TimestampOrBuilder"
        },
        "updated": {
          "$ref": "#/definitions/Timestamp"
        },
        "updatedOrBuilder": {
          "$ref": "#/definitions/TimestampOrBuilder"
        },
        "labelsList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Label"
          }
        },
        "labelsCount": {
          "type": "integer",
          "format": "int32"
        },
        "labelsOrBuilderList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LabelOrBuilder"
          }
        },
        "created": {
          "$ref": "#/definitions/Timestamp"
        },
        "body": {
          "type": "string"
        },
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/Message"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "initialized": {
          "type": "boolean"
        }
      }
    },
    "PushHook": {
      "type": "object",
      "properties": {
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "ref": {
          "type": "string"
        },
        "initialized": {
          "type": "boolean"
        },
        "serializedSize": {
          "type": "integer",
          "format": "int32"
        },
        "parserForType": {
          "$ref": "#/definitions/ParserPushHook"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/PushHook"
        },
        "after": {
          "type": "string"
        },
        "repo": {
          "$ref": "#/definitions/Repository"
        },
        "baseRefBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "before": {
          "type": "string"
        },
        "baseRef": {
          "type": "string"
        },
        "repoOrBuilder": {
          "$ref": "#/definitions/RepositoryOrBuilder"
        },
        "sender": {
          "$ref": "#/definitions/User"
        },
        "senderOrBuilder": {
          "$ref": "#/definitions/UserOrBuilder"
        },
        "beforeBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "afterBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "commit": {
          "$ref": "#/definitions/Commit"
        },
        "commitOrBuilder": {
          "$ref": "#/definitions/CommitOrBuilder"
        },
        "commitsList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Commit"
          }
        },
        "commitsCount": {
          "type": "integer",
          "format": "int32"
        },
        "commitsOrBuilderList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CommitOrBuilder"
          }
        },
        "refBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "PushHookOrBuilder": {
      "type": "object",
      "properties": {
        "ref": {
          "type": "string"
        },
        "after": {
          "type": "string"
        },
        "repo": {
          "$ref": "#/definitions/Repository"
        },
        "baseRefBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "before": {
          "type": "string"
        },
        "baseRef": {
          "type": "string"
        },
        "repoOrBuilder": {
          "$ref": "#/definitions/RepositoryOrBuilder"
        },
        "sender": {
          "$ref": "#/definitions/User"
        },
        "senderOrBuilder": {
          "$ref": "#/definitions/UserOrBuilder"
        },
        "beforeBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "afterBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "commit": {
          "$ref": "#/definitions/Commit"
        },
        "commitOrBuilder": {
          "$ref": "#/definitions/CommitOrBuilder"
        },
        "commitsList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Commit"
          }
        },
        "commitsCount": {
          "type": "integer",
          "format": "int32"
        },
        "commitsOrBuilderList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CommitOrBuilder"
          }
        },
        "refBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/Message"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "initialized": {
          "type": "boolean"
        }
      }
    },
    "Reference": {
      "type": "object",
      "properties": {
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "pathBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "initialized": {
          "type": "boolean"
        },
        "serializedSize": {
          "type": "integer",
          "format": "int32"
        },
        "parserForType": {
          "$ref": "#/definitions/ParserReference"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/Reference"
        },
        "sha": {
          "type": "string"
        },
        "shaBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "nameBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "ReferenceOrBuilder": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "pathBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "sha": {
          "type": "string"
        },
        "shaBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "nameBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/Message"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "initialized": {
          "type": "boolean"
        }
      }
    },
    "Repository": {
      "type": "object",
      "properties": {
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "branchBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "clone": {
          "type": "string"
        },
        "perm": {
          "$ref": "#/definitions/Perm"
        },
        "idBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "namespaceBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "permOrBuilder": {
          "$ref": "#/definitions/PermOrBuilder"
        },
        "namespace": {
          "type": "string"
        },
        "initialized": {
          "type": "boolean"
        },
        "serializedSize": {
          "type": "integer",
          "format": "int32"
        },
        "parserForType": {
          "$ref": "#/definitions/ParserRepository"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/Repository"
        },
        "link": {
          "type": "string"
        },
        "private": {
          "type": "boolean"
        },
        "cloneBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "cloneSsh": {
          "type": "string"
        },
        "cloneSshBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "linkBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "createdOrBuilder": {
          "$ref": "#/definitions/TimestampOrBuilder"
        },
        "updated": {
          "$ref": "#/definitions/Timestamp"
        },
        "updatedOrBuilder": {
          "$ref": "#/definitions/TimestampOrBuilder"
        },
        "branch": {
          "type": "string"
        },
        "created": {
          "$ref": "#/definitions/Timestamp"
        },
        "nameBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "RepositoryOrBuilder": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "branchBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "clone": {
          "type": "string"
        },
        "perm": {
          "$ref": "#/definitions/Perm"
        },
        "idBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "namespaceBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "permOrBuilder": {
          "$ref": "#/definitions/PermOrBuilder"
        },
        "namespace": {
          "type": "string"
        },
        "link": {
          "type": "string"
        },
        "private": {
          "type": "boolean"
        },
        "cloneBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "cloneSsh": {
          "type": "string"
        },
        "cloneSshBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "linkBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "createdOrBuilder": {
          "$ref": "#/definitions/TimestampOrBuilder"
        },
        "updated": {
          "$ref": "#/definitions/Timestamp"
        },
        "updatedOrBuilder": {
          "$ref": "#/definitions/TimestampOrBuilder"
        },
        "branch": {
          "type": "string"
        },
        "created": {
          "$ref": "#/definitions/Timestamp"
        },
        "nameBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/Message"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "initialized": {
          "type": "boolean"
        }
      }
    },
    "ResponseNGPipelineExecutionResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/NGPipelineExecutionResponse"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ServiceDescriptor": {
      "type": "object",
      "properties": {
        "index": {
          "type": "integer",
          "format": "int32"
        },
        "fullName": {
          "type": "string"
        },
        "file": {
          "$ref": "#/definitions/FileDescriptor"
        },
        "methods": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MethodDescriptor"
          }
        },
        "name": {
          "type": "string"
        },
        "options": {
          "$ref": "#/definitions/ServiceOptions"
        }
      }
    },
    "ServiceOptions": {
      "type": "object",
      "properties": {
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "uninterpretedOptionCount": {
          "type": "integer",
          "format": "int32"
        },
        "initialized": {
          "type": "boolean"
        },
        "serializedSize": {
          "type": "integer",
          "format": "int32"
        },
        "parserForType": {
          "$ref": "#/definitions/ParserServiceOptions"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/ServiceOptions"
        },
        "uninterpretedOptionList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UninterpretedOption"
          }
        },
        "uninterpretedOptionOrBuilderList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UninterpretedOptionOrBuilder"
          }
        },
        "deprecated": {
          "type": "boolean"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "allFieldsRaw": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "Signature": {
      "type": "object",
      "properties": {
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "date": {
          "$ref": "#/definitions/Timestamp"
        },
        "initialized": {
          "type": "boolean"
        },
        "serializedSize": {
          "type": "integer",
          "format": "int32"
        },
        "parserForType": {
          "$ref": "#/definitions/ParserSignature"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/Signature"
        },
        "loginBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "emailBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "avatar": {
          "type": "string"
        },
        "avatarBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "dateOrBuilder": {
          "$ref": "#/definitions/TimestampOrBuilder"
        },
        "login": {
          "type": "string"
        },
        "nameBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "SignatureOrBuilder": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "date": {
          "$ref": "#/definitions/Timestamp"
        },
        "loginBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "emailBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "avatar": {
          "type": "string"
        },
        "avatarBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "dateOrBuilder": {
          "$ref": "#/definitions/TimestampOrBuilder"
        },
        "login": {
          "type": "string"
        },
        "nameBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/Message"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "initialized": {
          "type": "boolean"
        }
      }
    },
    "Timestamp": {
      "type": "object",
      "properties": {
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "seconds": {
          "type": "integer",
          "format": "int64"
        },
        "nanos": {
          "type": "integer",
          "format": "int32"
        },
        "initialized": {
          "type": "boolean"
        },
        "serializedSize": {
          "type": "integer",
          "format": "int32"
        },
        "parserForType": {
          "$ref": "#/definitions/ParserTimestamp"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/Timestamp"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "TimestampOrBuilder": {
      "type": "object",
      "properties": {
        "seconds": {
          "type": "integer",
          "format": "int64"
        },
        "nanos": {
          "type": "integer",
          "format": "int32"
        },
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/Message"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "initialized": {
          "type": "boolean"
        }
      }
    },
    "TriggerPayload": {
      "type": "object",
      "properties": {
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "type": {
          "type": "string",
          "enum": ["CUSTOM", "GIT", "SCHEDULED", "UNRECOGNIZED"]
        },
        "jsonPayloadBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "jsonPayload": {
          "type": "string"
        },
        "parsedPayload": {
          "$ref": "#/definitions/ParsedPayload"
        },
        "parsedPayloadOrBuilder": {
          "$ref": "#/definitions/ParsedPayloadOrBuilder"
        },
        "typeValue": {
          "type": "integer",
          "format": "int32"
        },
        "initialized": {
          "type": "boolean"
        },
        "serializedSize": {
          "type": "integer",
          "format": "int32"
        },
        "parserForType": {
          "$ref": "#/definitions/ParserTriggerPayload"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/TriggerPayload"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "TriggerPayloadOrBuilder": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["CUSTOM", "GIT", "SCHEDULED", "UNRECOGNIZED"]
        },
        "jsonPayloadBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "jsonPayload": {
          "type": "string"
        },
        "parsedPayload": {
          "$ref": "#/definitions/ParsedPayload"
        },
        "parsedPayloadOrBuilder": {
          "$ref": "#/definitions/ParsedPayloadOrBuilder"
        },
        "typeValue": {
          "type": "integer",
          "format": "int32"
        },
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/Message"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "initialized": {
          "type": "boolean"
        }
      }
    },
    "TriggeredBy": {
      "type": "object",
      "properties": {
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "identifier": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        },
        "uuidBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "identifierBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "extraInfoCount": {
          "type": "integer",
          "format": "int32"
        },
        "extraInfo": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "extraInfoMap": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "initialized": {
          "type": "boolean"
        },
        "serializedSize": {
          "type": "integer",
          "format": "int32"
        },
        "parserForType": {
          "$ref": "#/definitions/ParserTriggeredBy"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/TriggeredBy"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "TriggeredByOrBuilder": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        },
        "uuidBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "identifierBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "extraInfoCount": {
          "type": "integer",
          "format": "int32"
        },
        "extraInfo": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "extraInfoMap": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/Message"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "initialized": {
          "type": "boolean"
        }
      }
    },
    "UninterpretedOption": {
      "type": "object",
      "properties": {
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "doubleValue": {
          "type": "number",
          "format": "double"
        },
        "nameCount": {
          "type": "integer",
          "format": "int32"
        },
        "stringValue": {
          "$ref": "#/definitions/ByteString"
        },
        "initialized": {
          "type": "boolean"
        },
        "serializedSize": {
          "type": "integer",
          "format": "int32"
        },
        "parserForType": {
          "$ref": "#/definitions/ParserUninterpretedOption"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/UninterpretedOption"
        },
        "nameList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NamePart"
          }
        },
        "nameOrBuilderList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NamePartOrBuilder"
          }
        },
        "identifierValue": {
          "type": "string"
        },
        "identifierValueBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "positiveIntValue": {
          "type": "integer",
          "format": "int64"
        },
        "negativeIntValue": {
          "type": "integer",
          "format": "int64"
        },
        "aggregateValue": {
          "type": "string"
        },
        "aggregateValueBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "UninterpretedOptionOrBuilder": {
      "type": "object",
      "properties": {
        "doubleValue": {
          "type": "number",
          "format": "double"
        },
        "nameCount": {
          "type": "integer",
          "format": "int32"
        },
        "stringValue": {
          "$ref": "#/definitions/ByteString"
        },
        "nameList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NamePart"
          }
        },
        "nameOrBuilderList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NamePartOrBuilder"
          }
        },
        "identifierValue": {
          "type": "string"
        },
        "identifierValueBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "positiveIntValue": {
          "type": "integer",
          "format": "int64"
        },
        "negativeIntValue": {
          "type": "integer",
          "format": "int64"
        },
        "aggregateValue": {
          "type": "string"
        },
        "aggregateValueBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/Message"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "initialized": {
          "type": "boolean"
        }
      }
    },
    "UnknownFieldSet": {
      "type": "object",
      "properties": {
        "serializedSizeAsMessageSet": {
          "type": "integer",
          "format": "int32"
        },
        "initialized": {
          "type": "boolean"
        },
        "serializedSize": {
          "type": "integer",
          "format": "int32"
        },
        "parserForType": {
          "$ref": "#/definitions/Parser"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/UnknownFieldSet"
        }
      }
    },
    "User": {
      "type": "object",
      "required": ["appId", "lastUpdatedAt", "uuid"],
      "properties": {
        "uuid": {
          "type": "string"
        },
        "appId": {
          "type": "string"
        },
        "createdBy": {
          "$ref": "#/definitions/EmbeddedUser"
        },
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "lastUpdatedBy": {
          "$ref": "#/definitions/EmbeddedUser"
        },
        "lastUpdatedAt": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "givenName": {
          "type": "string"
        },
        "familyName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "companyName": {
          "type": "string"
        },
        "accountName": {
          "type": "string"
        },
        "userGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserGroup"
          }
        },
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Account"
          }
        },
        "pendingAccounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Account"
          }
        },
        "supportAccounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Account"
          }
        },
        "lastLogin": {
          "type": "integer",
          "format": "int64"
        },
        "firstLogin": {
          "type": "boolean"
        },
        "password": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "token": {
          "type": "string"
        },
        "twoFactorJwtToken": {
          "type": "string"
        },
        "emailVerified": {
          "type": "boolean"
        },
        "passwordExpired": {
          "type": "boolean"
        },
        "userLocked": {
          "type": "boolean"
        },
        "statsFetchedOn": {
          "type": "integer",
          "format": "int64"
        },
        "lastAccountId": {
          "type": "string"
        },
        "defaultAccountId": {
          "type": "string"
        },
        "lastAppId": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "imported": {
          "type": "boolean"
        },
        "userLockoutInfo": {
          "$ref": "#/definitions/UserLockoutInfo"
        },
        "twoFactorAuthenticationEnabled": {
          "type": "boolean"
        },
        "twoFactorAuthenticationMechanism": {
          "type": "string",
          "enum": ["TOTP"]
        },
        "oauthProvider": {
          "type": "string"
        },
        "reportedSegmentTracks": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "utmInfo": {
          "$ref": "#/definitions/UtmInfo"
        },
        "accountIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "UserOrBuilder": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "loginBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "emailBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "avatar": {
          "type": "string"
        },
        "avatarBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "createdOrBuilder": {
          "$ref": "#/definitions/TimestampOrBuilder"
        },
        "updated": {
          "$ref": "#/definitions/Timestamp"
        },
        "updatedOrBuilder": {
          "$ref": "#/definitions/TimestampOrBuilder"
        },
        "login": {
          "type": "string"
        },
        "created": {
          "$ref": "#/definitions/Timestamp"
        },
        "nameBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/Message"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "initialized": {
          "type": "boolean"
        }
      }
    },
    "AbortFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": ["type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["Abort"]
            }
          }
        }
      ]
    },
    "AddSegmentToVariationTargetMapYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/PatchInstruction"
        },
        {
          "type": "object",
          "required": ["spec", "type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "SetFeatureFlagState",
                "AddTargetsToVariationTargetMap",
                "RemoveTargetsToVariationTargetMap",
                "AddSegmentsToVariationTargetMap",
                "RemoveSegmentsToVariationTargetMap"
              ]
            },
            "spec": {
              "$ref": "#/definitions/AddSegmentToVariationTargetMapYamlSpec"
            }
          }
        }
      ]
    },
    "AddSegmentToVariationTargetMapYamlSpec": {
      "type": "object",
      "properties": {
        "variation": {
          "type": "string"
        },
        "segments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "AddTargetsToVariationTargetMapYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/PatchInstruction"
        },
        {
          "type": "object",
          "required": ["spec", "type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "SetFeatureFlagState",
                "AddTargetsToVariationTargetMap",
                "RemoveTargetsToVariationTargetMap",
                "AddSegmentsToVariationTargetMap",
                "RemoveSegmentsToVariationTargetMap"
              ]
            },
            "spec": {
              "$ref": "#/definitions/AddTargetsToVariationTargetMapYamlSpec"
            }
          }
        }
      ]
    },
    "AddTargetsToVariationTargetMapYamlSpec": {
      "type": "object",
      "properties": {
        "variation": {
          "type": "string"
        },
        "targets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ApproverInputInfo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "defaultValue": {
          "type": "string"
        }
      }
    },
    "Approvers": {
      "type": "object",
      "required": ["disallowPipelineExecutor", "minimumCount", "userGroups"],
      "properties": {
        "userGroups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "minimumCount": {
          "type": "integer",
          "format": "int32"
        },
        "disallowPipelineExecutor": {
          "type": "boolean"
        }
      }
    },
    "ArtifactConfig": {
      "type": "object",
      "discriminator": "type"
    },
    "ArtifactListConfig": {
      "type": "object",
      "properties": {
        "primary": {
          "$ref": "#/definitions/ArtifactSpecWrapper"
        },
        "sidecars": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SidecarArtifactWrapper"
          }
        },
        "metadata": {
          "type": "string"
        }
      }
    },
    "ArtifactOverrideSetWrapper": {
      "type": "object",
      "properties": {
        "overrideSet": {
          "$ref": "#/definitions/ArtifactOverrideSets"
        }
      }
    },
    "ArtifactOverrideSets": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string"
        },
        "artifacts": {
          "$ref": "#/definitions/ArtifactListConfig"
        }
      }
    },
    "ArtifactSpecWrapper": {
      "type": "object",
      "required": ["type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["Dockerhub", "Gcr", "Ecr"]
        },
        "spec": {
          "$ref": "#/definitions/ArtifactConfig"
        }
      }
    },
    "BarrierStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["barrierRef"],
          "properties": {
            "barrierRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "BitbucketStore": {
      "allOf": [
        {
          "$ref": "#/definitions/StoreConfig"
        },
        {
          "type": "object",
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "gitFetchType": {
              "type": "string",
              "enum": ["BRANCH", "COMMIT"]
            },
            "branch": {
              "type": "string"
            },
            "commitId": {
              "type": "string"
            },
            "paths": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "folderPath": {
              "type": "string"
            },
            "repoName": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ]
    },
    "BranchBuildSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/BuildSpec"
        },
        {
          "type": "object",
          "required": ["branch"],
          "properties": {
            "branch": {
              "type": "string"
            }
          }
        }
      ]
    },
    "Build": {
      "type": "object",
      "required": ["spec", "type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["branch", "tag"]
        },
        "spec": {
          "$ref": "#/definitions/BuildSpec"
        }
      }
    },
    "BuildSpec": {
      "type": "object"
    },
    "CodeBase": {
      "type": "object",
      "required": ["build", "connectorRef"],
      "properties": {
        "connectorRef": {
          "type": "string"
        },
        "repoName": {
          "type": "string"
        },
        "build": {
          "$ref": "#/definitions/Build"
        }
      }
    },
    "Condition": {
      "type": "object",
      "required": ["key", "operator", "value"],
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "operator": {
          "type": "string",
          "enum": ["equals", "not equals", "in", "not in"]
        }
      }
    },
    "CountInstanceSelection": {
      "allOf": [
        {
          "$ref": "#/definitions/InstanceSelectionBase"
        },
        {
          "type": "object",
          "properties": {
            "count": {
              "type": "string"
            }
          }
        }
      ]
    },
    "CriteriaSpec": {
      "type": "object",
      "discriminator": "type"
    },
    "CriteriaSpecWrapper": {
      "type": "object",
      "required": ["spec", "type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["Jexl", "KeyValues"]
        },
        "spec": {
          "$ref": "#/definitions/CriteriaSpec"
        }
      }
    },
    "DeleteManifestPathSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/DeleteResourcesBaseSpec"
        },
        {
          "type": "object",
          "properties": {
            "manifestPaths": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "DeleteReleaseNameSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/DeleteResourcesBaseSpec"
        },
        {
          "type": "object",
          "properties": {}
        }
      ]
    },
    "DeleteResourceNameSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/DeleteResourcesBaseSpec"
        },
        {
          "type": "object",
          "properties": {}
        }
      ]
    },
    "DeleteResourcesBaseSpec": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ResourceName", "ReleaseName", "ManifestPath"]
        },
        "manifestPaths": {
          "type": "string"
        },
        "resourceNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "deleteNamespace": {
          "type": "boolean"
        },
        "allManifestPaths": {
          "type": "boolean"
        }
      }
    },
    "DeleteResourcesWrapper": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ResourceName", "ReleaseName", "ManifestPath"]
        },
        "spec": {
          "$ref": "#/definitions/DeleteResourcesBaseSpec"
        }
      }
    },
    "DeploymentStage": {
      "allOf": [
        {
          "$ref": "#/definitions/StageType"
        },
        {
          "type": "object",
          "properties": {
            "variables": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NGVariable"
              }
            },
            "serviceConfig": {
              "$ref": "#/definitions/ServiceConfig"
            },
            "infrastructure": {
              "$ref": "#/definitions/PipelineInfrastructure"
            },
            "execution": {
              "$ref": "#/definitions/ExecutionElement"
            },
            "skipCondition": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ]
    },
    "DockerHubArtifactConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/ArtifactConfig"
        },
        {
          "type": "object",
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "imagePath": {
              "type": "string"
            },
            "tag": {
              "type": "string"
            },
            "tagRegex": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ]
    },
    "EcrArtifactConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/ArtifactConfig"
        },
        {
          "type": "object",
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "region": {
              "type": "string"
            },
            "imagePath": {
              "type": "string"
            },
            "tag": {
              "type": "string"
            },
            "tagRegex": {
              "type": "string"
            }
          }
        }
      ]
    },
    "EnvironmentYaml": {
      "type": "object",
      "required": ["identifier", "name", "type"],
      "properties": {
        "name": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["PreProduction", "Production"]
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ExecutionElement": {
      "type": "object",
      "properties": {
        "steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecutionWrapper"
          }
        },
        "rollbackSteps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecutionWrapper"
          }
        },
        "metadata": {
          "type": "string"
        }
      }
    },
    "ExecutionElementConfig": {
      "type": "object",
      "properties": {
        "steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecutionWrapperConfig"
          }
        },
        "rollbackSteps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecutionWrapperConfig"
          }
        }
      }
    },
    "ExecutionTarget": {
      "type": "object",
      "properties": {
        "host": {
          "type": "string"
        },
        "connectorRef": {
          "type": "string"
        },
        "workingDirectory": {
          "type": "string"
        }
      }
    },
    "ExecutionWrapper": {
      "type": "object"
    },
    "ExecutionWrapperConfig": {
      "type": "object",
      "properties": {
        "step": {
          "$ref": "#/definitions/StepElementConfig"
        },
        "parallel": {
          "$ref": "#/definitions/ParallelStepElementConfig"
        },
        "stepGroup": {
          "$ref": "#/definitions/StepGroupElementConfig"
        }
      }
    },
    "FailureStrategyActionConfig": {
      "type": "object",
      "required": ["type"],
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Ignore",
            "Retry",
            "MarkAsSuccess",
            "Abort",
            "StageRollback",
            "StepGroupRollback",
            "ManualIntervention"
          ]
        }
      }
    },
    "FailureStrategyConfig": {
      "type": "object",
      "required": ["onFailure"],
      "properties": {
        "onFailure": {
          "$ref": "#/definitions/OnFailureConfig"
        }
      }
    },
    "FeatureUpdateStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "environment",
            "feature",
            "featureUpdateRef",
            "instructions",
            "state"
          ],
          "properties": {
            "featureUpdateRef": {
              "type": "string"
            },
            "feature": {
              "type": "string"
            },
            "environment": {
              "type": "string"
            },
            "instructions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PatchInstruction"
              }
            },
            "state": {
              "type": "string"
            }
          }
        }
      ]
    },
    "GcrArtifactConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/ArtifactConfig"
        },
        {
          "type": "object",
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "registryHostname": {
              "type": "string"
            },
            "imagePath": {
              "type": "string"
            },
            "tag": {
              "type": "string"
            },
            "tagRegex": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ]
    },
    "GcsStoreConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/StoreConfig"
        },
        {
          "type": "object",
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "bucketName": {
              "type": "string"
            },
            "folderPath": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ]
    },
    "GitLabStore": {
      "allOf": [
        {
          "$ref": "#/definitions/StoreConfig"
        },
        {
          "type": "object",
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "gitFetchType": {
              "type": "string",
              "enum": ["BRANCH", "COMMIT"]
            },
            "branch": {
              "type": "string"
            },
            "commitId": {
              "type": "string"
            },
            "paths": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "folderPath": {
              "type": "string"
            },
            "repoName": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ]
    },
    "GitStore": {
      "allOf": [
        {
          "$ref": "#/definitions/StoreConfig"
        },
        {
          "type": "object",
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "gitFetchType": {
              "type": "string",
              "enum": ["BRANCH", "COMMIT"]
            },
            "branch": {
              "type": "string"
            },
            "commitId": {
              "type": "string"
            },
            "paths": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "folderPath": {
              "type": "string"
            },
            "repoName": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ]
    },
    "GithubStore": {
      "allOf": [
        {
          "$ref": "#/definitions/StoreConfig"
        },
        {
          "type": "object",
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "gitFetchType": {
              "type": "string",
              "enum": ["BRANCH", "COMMIT"]
            },
            "branch": {
              "type": "string"
            },
            "commitId": {
              "type": "string"
            },
            "paths": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "folderPath": {
              "type": "string"
            },
            "repoName": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ]
    },
    "HarnessApprovalStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "approvalMessage",
            "approvers",
            "includePipelineExecutionHistory"
          ],
          "properties": {
            "approvalMessage": {
              "type": "string"
            },
            "includePipelineExecutionHistory": {
              "type": "boolean"
            },
            "approvers": {
              "$ref": "#/definitions/Approvers"
            },
            "approverInputs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ApproverInputInfo"
              }
            }
          }
        }
      ]
    },
    "HelmChartManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "store": {
              "$ref": "#/definitions/StoreConfigWrapper"
            },
            "chartName": {
              "type": "string"
            },
            "chartVersion": {
              "type": "string"
            },
            "helmVersion": {
              "type": "string",
              "enum": ["V2", "V3"]
            },
            "skipResourceVersioning": {
              "type": "boolean"
            },
            "commandFlags": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HelmManifestCommandFlag"
              }
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ]
    },
    "HelmManifestCommandFlag": {
      "type": "object",
      "required": ["commandType"],
      "properties": {
        "commandType": {
          "type": "string",
          "enum": ["Fetch", "Version", "Template", "Pull"]
        },
        "flag": {
          "type": "string"
        }
      }
    },
    "HoldingScope": {
      "type": "object",
      "required": ["nodeSetupId", "scope"],
      "properties": {
        "scope": {
          "type": "string"
        },
        "nodeSetupId": {
          "type": "string"
        }
      }
    },
    "HttpHeaderConfig": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "HttpStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["method", "url"],
          "properties": {
            "url": {
              "type": "string"
            },
            "method": {
              "type": "string"
            },
            "requestBody": {
              "type": "string"
            },
            "assertion": {
              "type": "string"
            },
            "outputVariables": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NGVariable"
              }
            },
            "headers": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HttpHeaderConfig"
              }
            },
            "delegateSelectors": {
              "$ref": "#/definitions/ParameterFieldListTaskSelectorYaml"
            }
          }
        }
      ]
    },
    "HttpStoreConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/StoreConfig"
        },
        {
          "type": "object",
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ]
    },
    "IgnoreFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": ["type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["Ignore"]
            }
          }
        }
      ]
    },
    "InfraOverrides": {
      "type": "object",
      "properties": {
        "environment": {
          "$ref": "#/definitions/EnvironmentYaml"
        },
        "infrastructureDefinition": {
          "$ref": "#/definitions/InfrastructureDef"
        }
      }
    },
    "InfraUseFromStage": {
      "type": "object",
      "required": ["stage"],
      "properties": {
        "stage": {
          "type": "string"
        },
        "overrides": {
          "$ref": "#/definitions/InfraOverrides"
        }
      }
    },
    "Infrastructure": {
      "type": "object",
      "discriminator": "type"
    },
    "InfrastructureDef": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "spec": {
          "$ref": "#/definitions/Infrastructure"
        },
        "provisioner": {
          "$ref": "#/definitions/ExecutionElementConfig"
        }
      }
    },
    "InlineTerraformBackendConfigSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/TerraformBackendConfigSpec"
        },
        {
          "type": "object",
          "properties": {
            "content": {
              "type": "string"
            }
          }
        }
      ]
    },
    "InlineTerraformVarFileSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/TerraformVarFileSpec"
        },
        {
          "type": "object",
          "properties": {
            "content": {
              "type": "string"
            }
          }
        }
      ]
    },
    "InputSetValidator": {
      "type": "object",
      "properties": {
        "validatorType": {
          "type": "string",
          "enum": ["ALLOWED_VALUES", "REGEX"]
        },
        "parameters": {
          "type": "string"
        }
      }
    },
    "InstanceSelectionBase": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["Count", "Percentage"]
        },
        "instances": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "InstanceSelectionWrapper": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["Count", "Percentage"]
        },
        "spec": {
          "$ref": "#/definitions/InstanceSelectionBase"
        }
      }
    },
    "JexlCriteriaSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/CriteriaSpec"
        },
        {
          "type": "object",
          "required": ["expression"],
          "properties": {
            "expression": {
              "type": "string"
            }
          }
        }
      ]
    },
    "JiraApprovalStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "approvalCriteria",
            "connectorRef",
            "issueKey",
            "rejectionCriteria"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "issueKey": {
              "type": "string"
            },
            "approvalCriteria": {
              "$ref": "#/definitions/CriteriaSpecWrapper"
            },
            "rejectionCriteria": {
              "$ref": "#/definitions/CriteriaSpecWrapper"
            }
          }
        }
      ]
    },
    "JiraCreateStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "projectKey": {
              "type": "string"
            },
            "issueType": {
              "type": "string"
            },
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JiraField"
              }
            }
          }
        }
      ]
    },
    "JiraField": {
      "type": "object",
      "required": ["value"],
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "JiraUpdateStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["connectorRef", "issueKey"],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "issueKey": {
              "type": "string"
            },
            "transitionTo": {
              "$ref": "#/definitions/TransitionTo"
            },
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JiraField"
              }
            }
          }
        }
      ]
    },
    "K8SDirectInfrastructure": {
      "allOf": [
        {
          "$ref": "#/definitions/Infrastructure"
        },
        {
          "type": "object",
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "namespace": {
              "type": "string"
            },
            "releaseName": {
              "type": "string"
            }
          }
        }
      ]
    },
    "K8sApplyStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["skipDryRun"],
          "properties": {
            "skipDryRun": {
              "$ref": "#/definitions/ParameterFieldBoolean"
            },
            "skipSteadyStateCheck": {
              "$ref": "#/definitions/ParameterFieldBoolean"
            },
            "filePaths": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "K8sBGSwapServicesStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "skipDryRun": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "K8sBlueGreenStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "skipDryRun": {
              "$ref": "#/definitions/ParameterFieldBoolean"
            }
          }
        }
      ]
    },
    "K8sCanaryDeleteStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "skipDryRun": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "K8sCanaryStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["instanceSelection"],
          "properties": {
            "instanceSelection": {
              "$ref": "#/definitions/InstanceSelectionWrapper"
            },
            "skipDryRun": {
              "$ref": "#/definitions/ParameterFieldBoolean"
            }
          }
        }
      ]
    },
    "K8sDeleteStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["deleteResources"],
          "properties": {
            "deleteResources": {
              "$ref": "#/definitions/DeleteResourcesWrapper"
            },
            "skipDryRun": {
              "$ref": "#/definitions/ParameterFieldBoolean"
            }
          }
        }
      ]
    },
    "K8sGcpInfrastructure": {
      "allOf": [
        {
          "$ref": "#/definitions/Infrastructure"
        },
        {
          "type": "object",
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "namespace": {
              "type": "string"
            },
            "releaseName": {
              "type": "string"
            },
            "cluster": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ]
    },
    "K8sManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "store": {
              "$ref": "#/definitions/StoreConfigWrapper"
            },
            "skipResourceVersioning": {
              "type": "boolean"
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ]
    },
    "K8sRollingRollbackStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "skipDryRun": {
              "$ref": "#/definitions/ParameterFieldBoolean"
            }
          }
        }
      ]
    },
    "K8sRollingStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["skipDryRun"],
          "properties": {
            "skipDryRun": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "K8sScaleStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["instanceSelection"],
          "properties": {
            "instanceSelection": {
              "$ref": "#/definitions/InstanceSelectionWrapper"
            },
            "workload": {
              "type": "string"
            },
            "skipDryRun": {
              "$ref": "#/definitions/ParameterFieldBoolean"
            },
            "skipSteadyStateCheck": {
              "$ref": "#/definitions/ParameterFieldBoolean"
            }
          }
        }
      ]
    },
    "KeyValuesCriteriaSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/CriteriaSpec"
        },
        {
          "type": "object",
          "required": ["conditions"],
          "properties": {
            "matchAnyCondition": {
              "type": "boolean"
            },
            "conditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Condition"
              }
            }
          }
        }
      ]
    },
    "KubernetesServiceSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/ServiceSpec"
        },
        {
          "type": "object",
          "properties": {
            "metadata": {
              "type": "string"
            }
          }
        }
      ]
    },
    "KustomizeManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "store": {
              "$ref": "#/definitions/StoreConfigWrapper"
            },
            "skipResourceVersioning": {
              "type": "boolean"
            },
            "pluginPath": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ]
    },
    "ManifestAttributes": {
      "type": "object",
      "discriminator": "type"
    },
    "ManifestConfig": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "spec": {
          "$ref": "#/definitions/ManifestAttributes"
        }
      }
    },
    "ManifestConfigWrapper": {
      "type": "object",
      "properties": {
        "manifest": {
          "$ref": "#/definitions/ManifestConfig"
        }
      }
    },
    "ManifestOverrideSetWrapper": {
      "type": "object",
      "properties": {
        "overrideSet": {
          "$ref": "#/definitions/ManifestOverrideSets"
        }
      }
    },
    "ManifestOverrideSets": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string"
        },
        "manifests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ManifestConfigWrapper"
          }
        }
      }
    },
    "ManualFailureSpecConfig": {
      "type": "object",
      "required": ["onTimeout", "timeout"],
      "properties": {
        "timeout": {
          "type": "string"
        },
        "onTimeout": {
          "$ref": "#/definitions/OnTimeoutConfig"
        }
      }
    },
    "ManualInterventionFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": ["spec", "type"],
          "properties": {
            "spec": {
              "readOnly": true,
              "$ref": "#/definitions/ManualFailureSpecConfig"
            },
            "type": {
              "type": "string",
              "enum": ["ManualIntervention"]
            }
          }
        }
      ]
    },
    "MarkAsSuccessFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": ["type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["MarkAsSuccess"]
            }
          }
        }
      ]
    },
    "NGVariable": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "required": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["String", "Number", "Secret"]
        },
        "description": {
          "type": "string"
        },
        "metadata": {
          "type": "string"
        }
      }
    },
    "NGVariableOverrideSetWrapper": {
      "type": "object",
      "properties": {
        "overrideSet": {
          "$ref": "#/definitions/NGVariableOverrideSets"
        },
        "uuid": {
          "type": "string"
        }
      }
    },
    "NGVariableOverrideSets": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string"
        },
        "variables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NGVariable"
          }
        }
      }
    },
    "NativeHelmServiceSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/ServiceSpec"
        },
        {
          "type": "object",
          "properties": {
            "metadata": {
              "type": "string"
            }
          }
        }
      ]
    },
    "NgPipeline": {
      "type": "object",
      "required": ["identifier", "name"],
      "properties": {
        "name": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "variables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NGVariable"
          }
        },
        "ciCodebase": {
          "$ref": "#/definitions/CodeBase"
        },
        "stages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StageElementWrapper"
          }
        },
        "metadata": {
          "type": "string"
        }
      }
    },
    "NumberNGVariable": {
      "allOf": [
        {
          "$ref": "#/definitions/NGVariable"
        },
        {
          "type": "object",
          "required": ["value"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["Number"]
            },
            "value": {
              "type": "number",
              "format": "double"
            },
            "default": {
              "type": "number",
              "format": "double"
            }
          }
        }
      ]
    },
    "OnFailureConfig": {
      "type": "object",
      "required": ["action", "errors"],
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "action": {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        }
      }
    },
    "OnRetryFailureConfig": {
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        }
      }
    },
    "OnTimeoutConfig": {
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        }
      }
    },
    "OpenshiftManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "store": {
              "$ref": "#/definitions/StoreConfigWrapper"
            },
            "skipResourceVersioning": {
              "type": "boolean"
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ]
    },
    "OpenshiftParamManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "store": {
              "$ref": "#/definitions/StoreConfigWrapper"
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ]
    },
    "ParallelStageElement": {
      "allOf": [
        {
          "$ref": "#/definitions/StageElementWrapper"
        },
        {
          "type": "object",
          "required": ["sections"],
          "properties": {
            "sections": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StageElementWrapper"
              }
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ]
    },
    "ParallelStepElement": {
      "allOf": [
        {
          "$ref": "#/definitions/ExecutionWrapper"
        },
        {
          "type": "object",
          "required": ["sections"],
          "properties": {
            "sections": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExecutionWrapper"
              }
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ]
    },
    "ParallelStepElementConfig": {
      "type": "object",
      "required": ["sections"],
      "properties": {
        "sections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecutionWrapperConfig"
          }
        }
      }
    },
    "ParameterField": {
      "type": "object",
      "properties": {
        "expressionValue": {
          "type": "string"
        },
        "expression": {
          "type": "boolean"
        },
        "value": {
          "type": "object"
        },
        "typeString": {
          "type": "boolean"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        }
      }
    },
    "ParameterFieldBoolean": {
      "type": "object",
      "properties": {
        "expressionValue": {
          "type": "string"
        },
        "expression": {
          "type": "boolean"
        },
        "value": {
          "type": "boolean"
        },
        "typeString": {
          "type": "boolean"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        }
      }
    },
    "ParameterFieldInteger": {
      "type": "object",
      "properties": {
        "expressionValue": {
          "type": "string"
        },
        "expression": {
          "type": "boolean"
        },
        "value": {
          "type": "integer",
          "format": "int32"
        },
        "typeString": {
          "type": "boolean"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        }
      }
    },
    "ParameterFieldListTaskSelectorYaml": {
      "type": "object",
      "properties": {
        "expressionValue": {
          "type": "string"
        },
        "expression": {
          "type": "boolean"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskSelectorYaml"
          }
        },
        "typeString": {
          "type": "boolean"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        }
      }
    },
    "PatchInstruction": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "SetFeatureFlagState",
            "AddTargetsToVariationTargetMap",
            "RemoveTargetsToVariationTargetMap",
            "AddSegmentsToVariationTargetMap",
            "RemoveSegmentsToVariationTargetMap"
          ]
        }
      }
    },
    "PercentageInstanceSelection": {
      "allOf": [
        {
          "$ref": "#/definitions/InstanceSelectionBase"
        },
        {
          "type": "object",
          "properties": {
            "percentage": {
              "$ref": "#/definitions/ParameterFieldInteger"
            }
          }
        }
      ]
    },
    "PipelineInfrastructure": {
      "type": "object",
      "properties": {
        "infrastructureDefinition": {
          "$ref": "#/definitions/InfrastructureDef"
        },
        "useFromStage": {
          "$ref": "#/definitions/InfraUseFromStage"
        },
        "environment": {
          "$ref": "#/definitions/EnvironmentYaml"
        },
        "allowSimultaneousDeployments": {
          "type": "boolean"
        },
        "infrastructureKey": {
          "type": "string"
        },
        "environmentRef": {
          "type": "string"
        }
      }
    },
    "RemoteTerraformVarFileSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/TerraformVarFileSpec"
        },
        {
          "type": "object",
          "properties": {
            "store": {
              "$ref": "#/definitions/StoreConfigWrapper"
            }
          }
        }
      ]
    },
    "RemoveSegmentToVariationTargetMapYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/PatchInstruction"
        },
        {
          "type": "object",
          "required": ["spec", "type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "SetFeatureFlagState",
                "AddTargetsToVariationTargetMap",
                "RemoveTargetsToVariationTargetMap",
                "AddSegmentsToVariationTargetMap",
                "RemoveSegmentsToVariationTargetMap"
              ]
            },
            "spec": {
              "$ref": "#/definitions/RemoveSegmentToVariationTargetMapYamlSpec"
            }
          }
        }
      ]
    },
    "RemoveSegmentToVariationTargetMapYamlSpec": {
      "type": "object",
      "properties": {
        "variation": {
          "type": "string"
        },
        "segments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "RemoveTargetsToVariationTargetMapYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/PatchInstruction"
        },
        {
          "type": "object",
          "required": ["spec", "type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "SetFeatureFlagState",
                "AddTargetsToVariationTargetMap",
                "RemoveTargetsToVariationTargetMap",
                "AddSegmentsToVariationTargetMap",
                "RemoveSegmentsToVariationTargetMap"
              ]
            },
            "spec": {
              "$ref": "#/definitions/RemoveTargetsToVariationTargetMapYamlSpec"
            }
          }
        }
      ]
    },
    "RemoveTargetsToVariationTargetMapYamlSpec": {
      "type": "object",
      "properties": {
        "variation": {
          "type": "string"
        },
        "targets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ResourceConstraintStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "acquireMode",
            "holdingScope",
            "name",
            "permits",
            "resourceUnit"
          ],
          "properties": {
            "name": {
              "type": "string"
            },
            "resourceUnit": {
              "type": "string"
            },
            "acquireMode": {
              "type": "string",
              "enum": ["ENSURE", "ACCUMULATE"]
            },
            "permits": {
              "type": "integer",
              "format": "int32"
            },
            "holdingScope": {
              "$ref": "#/definitions/HoldingScope"
            }
          }
        }
      ]
    },
    "RetryFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": ["spec", "type"],
          "properties": {
            "spec": {
              "readOnly": true,
              "$ref": "#/definitions/RetryFailureSpecConfig"
            },
            "type": {
              "type": "string",
              "enum": ["Retry"]
            }
          }
        }
      ]
    },
    "RetryFailureSpecConfig": {
      "type": "object",
      "required": ["onRetryFailure", "retryCount", "retryIntervals"],
      "properties": {
        "retryCount": {
          "type": "integer",
          "format": "int32"
        },
        "retryIntervals": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "onRetryFailure": {
          "$ref": "#/definitions/OnRetryFailureConfig"
        }
      }
    },
    "S3StoreConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/StoreConfig"
        },
        {
          "type": "object",
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "bucketName": {
              "type": "string"
            },
            "region": {
              "type": "string"
            },
            "folderPath": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ]
    },
    "SecretNGVariable": {
      "allOf": [
        {
          "$ref": "#/definitions/NGVariable"
        },
        {
          "type": "object",
          "required": ["value"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["Secret"]
            },
            "value": {
              "type": "string"
            },
            "default": {
              "type": "string"
            }
          }
        }
      ]
    },
    "ServiceConfig": {
      "type": "object",
      "properties": {
        "useFromStage": {
          "$ref": "#/definitions/ServiceUseFromStage"
        },
        "service": {
          "$ref": "#/definitions/ServiceYaml"
        },
        "serviceRef": {
          "type": "string"
        },
        "serviceDefinition": {
          "$ref": "#/definitions/ServiceDefinition"
        },
        "stageOverrides": {
          "$ref": "#/definitions/StageOverridesConfig"
        }
      }
    },
    "ServiceDefinition": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "spec": {
          "$ref": "#/definitions/ServiceSpec"
        }
      }
    },
    "ServiceOverrides": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "ServiceSpec": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "variables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NGVariable"
          }
        },
        "artifacts": {
          "$ref": "#/definitions/ArtifactListConfig"
        },
        "manifests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ManifestConfigWrapper"
          }
        },
        "manifestOverrideSets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ManifestOverrideSetWrapper"
          }
        },
        "artifactOverrideSets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ArtifactOverrideSetWrapper"
          }
        },
        "variableOverrideSets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NGVariableOverrideSetWrapper"
          }
        }
      }
    },
    "ServiceUseFromStage": {
      "type": "object",
      "required": ["stage"],
      "properties": {
        "stage": {
          "type": "string"
        },
        "overrides": {
          "$ref": "#/definitions/ServiceOverrides"
        },
        "metadata": {
          "type": "string"
        }
      }
    },
    "ServiceYaml": {
      "type": "object",
      "required": ["identifier", "name"],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "SetFeatureFlagStateYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/PatchInstruction"
        },
        {
          "type": "object",
          "required": ["spec", "type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "SetFeatureFlagState",
                "AddTargetsToVariationTargetMap",
                "RemoveTargetsToVariationTargetMap",
                "AddSegmentsToVariationTargetMap",
                "RemoveSegmentsToVariationTargetMap"
              ]
            },
            "spec": {
              "$ref": "#/definitions/SetFeatureFlagStateYamlSpec"
            }
          }
        }
      ]
    },
    "SetFeatureFlagStateYamlSpec": {
      "type": "object",
      "properties": {
        "state": {
          "type": "string"
        }
      }
    },
    "ShellScriptBaseSource": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string"
        }
      }
    },
    "ShellScriptInlineSource": {
      "allOf": [
        {
          "$ref": "#/definitions/ShellScriptBaseSource"
        },
        {
          "type": "object",
          "properties": {
            "script": {
              "type": "string"
            }
          }
        }
      ]
    },
    "ShellScriptSourceWrapper": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "spec": {
          "$ref": "#/definitions/ShellScriptBaseSource"
        }
      }
    },
    "ShellScriptStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["onDelegate", "shell", "source"],
          "properties": {
            "shell": {
              "type": "string",
              "enum": ["Bash", "PowerShell"]
            },
            "source": {
              "$ref": "#/definitions/ShellScriptSourceWrapper"
            },
            "executionTarget": {
              "$ref": "#/definitions/ExecutionTarget"
            },
            "onDelegate": {
              "$ref": "#/definitions/ParameterFieldBoolean"
            },
            "outputVariables": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NGVariable"
              }
            },
            "environmentVariables": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NGVariable"
              }
            },
            "delegateSelectors": {
              "$ref": "#/definitions/ParameterFieldListTaskSelectorYaml"
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ]
    },
    "SidecarArtifact": {
      "type": "object",
      "required": ["type"],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["Dockerhub", "Gcr", "Ecr"]
        },
        "spec": {
          "$ref": "#/definitions/ArtifactConfig"
        }
      }
    },
    "SidecarArtifactWrapper": {
      "type": "object",
      "properties": {
        "sidecar": {
          "$ref": "#/definitions/SidecarArtifact"
        }
      }
    },
    "StageElement": {
      "allOf": [
        {
          "$ref": "#/definitions/StageElementWrapper"
        },
        {
          "type": "object",
          "required": ["failureStrategies", "identifier"],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "failureStrategies": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FailureStrategyConfig"
              }
            },
            "type": {
              "type": "string"
            },
            "skipCondition": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/StageType"
            }
          }
        }
      ]
    },
    "StageElementWrapper": {
      "type": "object"
    },
    "StageOverridesConfig": {
      "type": "object",
      "properties": {
        "variables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NGVariable"
          }
        },
        "useVariableOverrideSets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "useArtifactOverrideSets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "artifacts": {
          "$ref": "#/definitions/ArtifactListConfig"
        },
        "useManifestOverrideSets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "manifests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ManifestConfigWrapper"
          }
        }
      }
    },
    "StageRollbackFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": ["type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["StageRollback"]
            }
          }
        }
      ]
    },
    "StageType": {
      "type": "object",
      "required": ["identifier"],
      "discriminator": "type",
      "properties": {
        "identifier": {
          "type": "string"
        }
      }
    },
    "StepElement": {
      "allOf": [
        {
          "$ref": "#/definitions/ExecutionWrapper"
        },
        {
          "type": "object",
          "required": ["identifier"],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "failureStrategies": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FailureStrategyConfig"
              }
            },
            "type": {
              "type": "string"
            },
            "skipCondition": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/StepSpecType"
            }
          }
        }
      ]
    },
    "StepElementConfig": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "timeout": {
          "type": "string"
        },
        "failureStrategies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FailureStrategyConfig"
          }
        },
        "skipCondition": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "spec": {
          "$ref": "#/definitions/StepSpecType"
        }
      }
    },
    "StepGroupElement": {
      "allOf": [
        {
          "$ref": "#/definitions/ExecutionWrapper"
        },
        {
          "type": "object",
          "required": ["identifier", "steps"],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "failureStrategies": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FailureStrategyConfig"
              }
            },
            "steps": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExecutionWrapper"
              }
            },
            "rollbackSteps": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExecutionWrapper"
              }
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ]
    },
    "StepGroupElementConfig": {
      "type": "object",
      "required": ["identifier", "steps"],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "skipCondition": {
          "type": "string"
        },
        "failureStrategies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FailureStrategyConfig"
          }
        },
        "steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecutionWrapperConfig"
          }
        },
        "rollbackSteps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecutionWrapperConfig"
          }
        }
      }
    },
    "StepGroupFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": ["type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["StepGroupRollback"]
            }
          }
        }
      ]
    },
    "StepSpecType": {
      "type": "object",
      "discriminator": "type"
    },
    "StoreConfig": {
      "type": "object",
      "discriminator": "type"
    },
    "StoreConfigWrapper": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "metadata": {
          "type": "string"
        },
        "spec": {
          "$ref": "#/definitions/StoreConfig"
        }
      }
    },
    "StringNGVariable": {
      "allOf": [
        {
          "$ref": "#/definitions/NGVariable"
        },
        {
          "type": "object",
          "required": ["value"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["String"]
            },
            "value": {
              "type": "string"
            },
            "default": {
              "type": "string"
            }
          }
        }
      ]
    },
    "TagBuildSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/BuildSpec"
        },
        {
          "type": "object",
          "required": ["tag"],
          "properties": {
            "tag": {
              "type": "string"
            }
          }
        }
      ]
    },
    "TaskSelectorYaml": {
      "type": "object",
      "properties": {
        "delegateSelectors": {
          "type": "string"
        }
      }
    },
    "TerraformApplyStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "provisionerIdentifier": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            },
            "configuration": {
              "$ref": "#/definitions/TerrformStepConfiguration"
            }
          }
        }
      ]
    },
    "TerraformBackendConfig": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "spec": {
          "$ref": "#/definitions/TerraformBackendConfigSpec"
        }
      }
    },
    "TerraformBackendConfigSpec": {
      "type": "object",
      "discriminator": "type"
    },
    "TerraformConfigFilesWrapper": {
      "type": "object",
      "properties": {
        "store": {
          "$ref": "#/definitions/StoreConfigWrapper"
        }
      }
    },
    "TerraformDestroyStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "provisionerIdentifier": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            },
            "configuration": {
              "$ref": "#/definitions/TerrformStepConfiguration"
            }
          }
        }
      ]
    },
    "TerraformExecutionData": {
      "type": "object",
      "properties": {
        "workspace": {
          "type": "string"
        },
        "targets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "environmentVariables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NGVariable"
          }
        },
        "configFiles": {
          "$ref": "#/definitions/TerraformConfigFilesWrapper"
        },
        "varFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TerraformVarFileWrapper"
          }
        },
        "backendConfig": {
          "$ref": "#/definitions/TerraformBackendConfig"
        }
      }
    },
    "TerraformPlanExecutionData": {
      "type": "object",
      "properties": {
        "workspace": {
          "type": "string"
        },
        "targets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "environmentVariables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NGVariable"
          }
        },
        "command": {
          "type": "string",
          "enum": ["APPLY", "DESTROY"]
        },
        "secretManagerId": {
          "type": "string"
        },
        "configFiles": {
          "$ref": "#/definitions/TerraformConfigFilesWrapper"
        },
        "varFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TerraformVarFileWrapper"
          }
        },
        "backendConfig": {
          "$ref": "#/definitions/TerraformBackendConfig"
        }
      }
    },
    "TerraformPlanStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "provisionerIdentifier": {
              "type": "string"
            },
            "configuration": {
              "$ref": "#/definitions/TerraformPlanExecutionData"
            }
          }
        }
      ]
    },
    "TerraformVarFile": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "spec": {
          "$ref": "#/definitions/TerraformVarFileSpec"
        }
      }
    },
    "TerraformVarFileSpec": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string"
        }
      }
    },
    "TerraformVarFileWrapper": {
      "type": "object",
      "properties": {
        "varFile": {
          "$ref": "#/definitions/TerraformVarFile"
        }
      }
    },
    "TerrformStepConfiguration": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["Inline", "InheritFromPlan", "InheritFromApply"]
        },
        "spec": {
          "$ref": "#/definitions/TerraformExecutionData"
        }
      }
    },
    "TransitionTo": {
      "type": "object",
      "required": ["status"],
      "properties": {
        "status": {
          "type": "string"
        },
        "transitionName": {
          "type": "string"
        }
      }
    },
    "ValuesManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "store": {
              "$ref": "#/definitions/StoreConfigWrapper"
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ]
    },
    "MergeInputSetRequest": {
      "type": "object",
      "properties": {
        "inputSetReferences": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "AppDynamicsConnectorDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["accountId", "accountname", "controllerUrl"],
          "properties": {
            "username": {
              "type": "string"
            },
            "accountname": {
              "type": "string"
            },
            "controllerUrl": {
              "type": "string"
            },
            "accountId": {
              "type": "string"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            },
            "passwordRef": {
              "type": "string"
            },
            "clientSecretRef": {
              "type": "string"
            },
            "clientId": {
              "type": "string"
            },
            "authType": {
              "type": "string",
              "enum": ["UsernamePassword", "ApiClientToken"]
            }
          }
        }
      ]
    },
    "ArtifactoryAuthCredentials": {
      "type": "object"
    },
    "ArtifactoryAuthentication": {
      "type": "object",
      "required": ["type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["UsernamePassword", "Anonymous"]
        },
        "spec": {
          "$ref": "#/definitions/ArtifactoryAuthCredentials"
        }
      }
    },
    "ArtifactoryConnector": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["artifactoryServerUrl"],
          "properties": {
            "artifactoryServerUrl": {
              "type": "string"
            },
            "auth": {
              "$ref": "#/definitions/ArtifactoryAuthentication"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "ArtifactoryUsernamePasswordAuth": {
      "allOf": [
        {
          "$ref": "#/definitions/ArtifactoryAuthCredentials"
        },
        {
          "type": "object",
          "required": ["passwordRef"],
          "properties": {
            "username": {
              "type": "string"
            },
            "usernameRef": {
              "type": "string"
            },
            "passwordRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "AwsCodeCommitAuthenticationDTO": {
      "type": "object",
      "required": ["spec", "type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["HTTPS"]
        },
        "spec": {
          "$ref": "#/definitions/AwsCodeCommitCredentialsDTO"
        }
      }
    },
    "AwsCodeCommitConnectorDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["authentication", "type", "url"],
          "properties": {
            "url": {
              "type": "string"
            },
            "authentication": {
              "$ref": "#/definitions/AwsCodeCommitAuthenticationDTO"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            },
            "type": {
              "type": "string",
              "enum": ["Repo", "Region"]
            }
          }
        }
      ]
    },
    "AwsCodeCommitCredentialsDTO": {
      "type": "object"
    },
    "AwsCodeCommitHttpsCredentialsDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/AwsCodeCommitCredentialsDTO"
        },
        {
          "type": "object",
          "required": ["spec", "type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["AWSCredentials"]
            },
            "spec": {
              "$ref": "#/definitions/AwsCodeCommitHttpsCredentialsSpecDTO"
            }
          }
        }
      ]
    },
    "AwsCodeCommitHttpsCredentialsSpecDTO": {
      "type": "object"
    },
    "AwsCodeCommitSecretKeyAccessKeyDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/AwsCodeCommitHttpsCredentialsSpecDTO"
        },
        {
          "type": "object",
          "required": ["secretKeyRef"],
          "properties": {
            "accessKey": {
              "type": "string"
            },
            "accessKeyRef": {
              "type": "string"
            },
            "secretKeyRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "AwsConnector": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["credential"],
          "properties": {
            "credential": {
              "$ref": "#/definitions/AwsCredential"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "AwsCredential": {
      "type": "object",
      "required": ["type"],
      "properties": {
        "crossAccountAccess": {
          "$ref": "#/definitions/CrossAccountAccess"
        },
        "type": {
          "type": "string",
          "enum": ["InheritFromDelegate", "ManualConfig"]
        },
        "spec": {
          "$ref": "#/definitions/AwsCredentialSpec"
        }
      }
    },
    "AwsCredentialSpec": {
      "type": "object"
    },
    "AwsCurAttributes": {
      "type": "object",
      "required": ["reportName", "s3BucketName"],
      "properties": {
        "reportName": {
          "type": "string"
        },
        "s3BucketName": {
          "type": "string"
        }
      }
    },
    "AwsManualConfigSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/AwsCredentialSpec"
        },
        {
          "type": "object",
          "required": ["secretKeyRef"],
          "properties": {
            "accessKey": {
              "type": "string"
            },
            "accessKeyRef": {
              "type": "string"
            },
            "secretKeyRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "BillingExportSpec": {
      "type": "object",
      "required": ["containerName", "directoryName", "storageAccountName"],
      "properties": {
        "storageAccountName": {
          "type": "string"
        },
        "containerName": {
          "type": "string"
        },
        "directoryName": {
          "type": "string"
        }
      }
    },
    "BitbucketApiAccess": {
      "type": "object",
      "required": ["spec", "type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["UsernameToken"]
        },
        "spec": {
          "$ref": "#/definitions/BitbucketApiAccessSpecDTO"
        }
      }
    },
    "BitbucketApiAccessSpecDTO": {
      "type": "object"
    },
    "BitbucketAuthentication": {
      "type": "object",
      "required": ["spec", "type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["Http", "Ssh"]
        },
        "spec": {
          "$ref": "#/definitions/BitbucketCredentialsDTO"
        }
      }
    },
    "BitbucketConnector": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["authentication", "type", "url"],
          "properties": {
            "url": {
              "type": "string"
            },
            "authentication": {
              "$ref": "#/definitions/BitbucketAuthentication"
            },
            "apiAccess": {
              "$ref": "#/definitions/BitbucketApiAccess"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            },
            "type": {
              "type": "string",
              "enum": ["Account", "Repo"]
            }
          }
        }
      ]
    },
    "BitbucketCredentialsDTO": {
      "type": "object"
    },
    "BitbucketHttpCredentials": {
      "allOf": [
        {
          "$ref": "#/definitions/BitbucketCredentialsDTO"
        },
        {
          "type": "object",
          "required": ["spec", "type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["UsernamePassword"]
            },
            "spec": {
              "$ref": "#/definitions/BitbucketHttpCredentialsSpecDTO"
            }
          }
        }
      ]
    },
    "BitbucketHttpCredentialsSpecDTO": {
      "type": "object"
    },
    "BitbucketSshCredentials": {
      "allOf": [
        {
          "$ref": "#/definitions/BitbucketCredentialsDTO"
        },
        {
          "type": "object",
          "required": ["sshKeyRef"],
          "properties": {
            "sshKeyRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "BitbucketUsernamePassword": {
      "allOf": [
        {
          "$ref": "#/definitions/BitbucketHttpCredentialsSpecDTO"
        },
        {
          "type": "object",
          "required": ["passwordRef"],
          "properties": {
            "username": {
              "type": "string"
            },
            "usernameRef": {
              "type": "string"
            },
            "passwordRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "BitbucketUsernameTokenApiAccess": {
      "allOf": [
        {
          "$ref": "#/definitions/BitbucketApiAccessSpecDTO"
        },
        {
          "type": "object",
          "required": ["tokenRef"],
          "properties": {
            "username": {
              "type": "string"
            },
            "usernameRef": {
              "type": "string"
            },
            "tokenRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "CEAwsConnector": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["crossAccountAccess"],
          "properties": {
            "crossAccountAccess": {
              "$ref": "#/definitions/CrossAccountAccess"
            },
            "curAttributes": {
              "$ref": "#/definitions/AwsCurAttributes"
            },
            "featuresEnabled": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["CUR", "EVENTS", "OPTIMIZATION"]
              }
            }
          }
        }
      ]
    },
    "CEAzureConnector": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["subscriptionId", "tenantId"],
          "properties": {
            "featuresEnabled": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["BILLING", "OPTIMIZATION"]
              }
            },
            "tenantId": {
              "type": "string"
            },
            "subscriptionId": {
              "type": "string"
            },
            "billingExportSpec": {
              "$ref": "#/definitions/BillingExportSpec"
            }
          }
        }
      ]
    },
    "CEKubernetesClusterConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["connectorRef"],
          "properties": {
            "connectorRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "ConnectorActivityDetails": {
      "type": "object",
      "properties": {
        "lastActivityTime": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ConnectorConfigDTO": {
      "type": "object"
    },
    "ConnectorConnectivityDetails": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "PARTIAL"]
        },
        "errorSummary": {
          "type": "string"
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorDetail"
          }
        },
        "testedAt": {
          "type": "integer",
          "format": "int64"
        },
        "lastTestedAt": {
          "type": "integer",
          "format": "int64"
        },
        "lastConnectedAt": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ConnectorInfoDTO": {
      "type": "object",
      "required": ["identifier", "name", "spec", "type"],
      "properties": {
        "name": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "orgIdentifier": {
          "type": "string"
        },
        "projectIdentifier": {
          "type": "string"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "type": {
          "type": "string",
          "enum": [
            "K8sCluster",
            "Git",
            "Splunk",
            "AppDynamics",
            "Vault",
            "DockerRegistry",
            "Local",
            "GcpKms",
            "Gcp",
            "Aws",
            "Artifactory",
            "Jira",
            "Nexus",
            "Github",
            "Gitlab",
            "Bitbucket",
            "Codecommit",
            "CEAws",
            "CEAzure",
            "GcpCloudCost",
            "CEK8sCluster",
            "HttpHelmRepo",
            "NewRelic"
          ]
        },
        "spec": {
          "$ref": "#/definitions/ConnectorConfigDTO"
        }
      }
    },
    "ConnectorResponse": {
      "type": "object",
      "properties": {
        "connector": {
          "$ref": "#/definitions/ConnectorInfoDTO"
        },
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "lastModifiedAt": {
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "$ref": "#/definitions/ConnectorConnectivityDetails"
        },
        "activityDetails": {
          "$ref": "#/definitions/ConnectorActivityDetails"
        },
        "harnessManaged": {
          "type": "boolean"
        },
        "gitDetails": {
          "$ref": "#/definitions/EntityGitDetails"
        }
      }
    },
    "CrossAccountAccess": {
      "type": "object",
      "required": ["crossAccountRoleArn"],
      "properties": {
        "crossAccountRoleArn": {
          "type": "string"
        },
        "externalId": {
          "type": "string"
        }
      }
    },
    "CustomCommitAttributes": {
      "type": "object",
      "properties": {
        "authorName": {
          "type": "string"
        },
        "authorEmail": {
          "type": "string"
        },
        "commitMessage": {
          "type": "string"
        }
      }
    },
    "DockerAuthCredentialsDTO": {
      "type": "object"
    },
    "DockerAuthenticationDTO": {
      "type": "object",
      "required": ["type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["UsernamePassword", "Anonymous"]
        },
        "spec": {
          "$ref": "#/definitions/DockerAuthCredentialsDTO"
        }
      }
    },
    "DockerConnectorDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["dockerRegistryUrl", "providerType"],
          "properties": {
            "dockerRegistryUrl": {
              "type": "string"
            },
            "providerType": {
              "type": "string",
              "enum": ["DockerHub", "Harbor", "Quay", "Other"]
            },
            "auth": {
              "$ref": "#/definitions/DockerAuthenticationDTO"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "DockerUserNamePasswordDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/DockerAuthCredentialsDTO"
        },
        {
          "type": "object",
          "required": ["passwordRef"],
          "properties": {
            "username": {
              "type": "string"
            },
            "usernameRef": {
              "type": "string"
            },
            "passwordRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "EntityGitDetails": {
      "type": "object",
      "properties": {
        "objectId": {
          "type": "string"
        },
        "branch": {
          "type": "string"
        },
        "repoIdentifier": {
          "type": "string"
        }
      }
    },
    "ErrorDetail": {
      "type": "object",
      "properties": {
        "reason": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "GcpBillingExportSpec": {
      "type": "object",
      "required": ["datasetId", "projectId"],
      "properties": {
        "projectId": {
          "type": "string"
        },
        "datasetId": {
          "type": "string"
        }
      }
    },
    "GcpCloudCostConnector": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "properties": {
            "featuresEnabled": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["BILLING"]
              }
            },
            "billingExportSpec": {
              "$ref": "#/definitions/GcpBillingExportSpec"
            }
          }
        }
      ]
    },
    "GcpConnector": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "properties": {
            "credential": {
              "$ref": "#/definitions/GcpConnectorCredential"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "GcpConnectorCredential": {
      "type": "object",
      "required": ["type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["InheritFromDelegate", "ManualConfig"]
        },
        "spec": {
          "$ref": "#/definitions/GcpCredentialSpec"
        }
      }
    },
    "GcpCredentialSpec": {
      "type": "object"
    },
    "GcpKmsConnectorDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "properties": {
            "projectId": {
              "type": "string"
            },
            "region": {
              "type": "string"
            },
            "keyRing": {
              "type": "string"
            },
            "keyName": {
              "type": "string"
            },
            "credentials": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "default": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "GcpManualDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/GcpCredentialSpec"
        },
        {
          "type": "object",
          "required": ["secretKeyRef"],
          "properties": {
            "secretKeyRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "GitAuthenticationDTO": {
      "type": "object",
      "discriminator": "type"
    },
    "GitConfigDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["connectionType", "spec", "type", "url"],
          "properties": {
            "url": {
              "type": "string"
            },
            "branchName": {
              "type": "string"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            },
            "type": {
              "type": "string",
              "enum": ["Http", "Ssh"]
            },
            "connectionType": {
              "type": "string",
              "enum": ["Account", "Repo"]
            },
            "spec": {
              "$ref": "#/definitions/GitAuthenticationDTO"
            },
            "gitSync": {
              "$ref": "#/definitions/GitSyncConfig"
            }
          }
        }
      ]
    },
    "GitHTTPAuthenticationDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/GitAuthenticationDTO"
        },
        {
          "type": "object",
          "required": ["passwordRef"],
          "properties": {
            "username": {
              "type": "string"
            },
            "usernameRef": {
              "type": "string"
            },
            "passwordRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "GitSSHAuthenticationDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/GitAuthenticationDTO"
        },
        {
          "type": "object",
          "required": ["sshKeyRef"],
          "properties": {
            "sshKeyRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "GitSyncConfig": {
      "type": "object",
      "required": ["gitConnectorType"],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "projectIdentifier": {
          "type": "string"
        },
        "orgIdentifier": {
          "type": "string"
        },
        "gitConnectorRef": {
          "type": "string"
        },
        "repo": {
          "type": "string"
        },
        "branch": {
          "type": "string"
        },
        "gitConnectorType": {
          "type": "string",
          "enum": ["Github", "Gitlab", "Bitbucket"]
        },
        "gitSyncFolderConfigDTOs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GitSyncFolderConfigDTO"
          }
        }
      }
    },
    "GithubApiAccess": {
      "type": "object",
      "required": ["type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["GithubApp", "Token"]
        },
        "spec": {
          "$ref": "#/definitions/GithubApiAccessSpecDTO"
        }
      }
    },
    "GithubApiAccessSpecDTO": {
      "type": "object"
    },
    "GithubAppSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/GithubApiAccessSpecDTO"
        },
        {
          "type": "object",
          "required": ["applicationId", "installationId", "privateKeyRef"],
          "properties": {
            "installationId": {
              "type": "string"
            },
            "applicationId": {
              "type": "string"
            },
            "privateKeyRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "GithubAuthentication": {
      "type": "object",
      "required": ["spec", "type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["Http", "Ssh"]
        },
        "spec": {
          "$ref": "#/definitions/GithubCredentialsDTO"
        }
      }
    },
    "GithubConnector": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["authentication", "type", "url"],
          "properties": {
            "url": {
              "type": "string"
            },
            "authentication": {
              "$ref": "#/definitions/GithubAuthentication"
            },
            "apiAccess": {
              "$ref": "#/definitions/GithubApiAccess"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            },
            "type": {
              "type": "string",
              "enum": ["Account", "Repo"]
            }
          }
        }
      ]
    },
    "GithubCredentialsDTO": {
      "type": "object"
    },
    "GithubHttpCredentials": {
      "allOf": [
        {
          "$ref": "#/definitions/GithubCredentialsDTO"
        },
        {
          "type": "object",
          "required": ["spec", "type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["UsernamePassword", "UsernameToken"]
            },
            "spec": {
              "$ref": "#/definitions/GithubHttpCredentialsSpecDTO"
            }
          }
        }
      ]
    },
    "GithubHttpCredentialsSpecDTO": {
      "type": "object"
    },
    "GithubSshCredentials": {
      "allOf": [
        {
          "$ref": "#/definitions/GithubCredentialsDTO"
        },
        {
          "type": "object",
          "required": ["sshKeyRef"],
          "properties": {
            "sshKeyRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "GithubTokenSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/GithubApiAccessSpecDTO"
        },
        {
          "type": "object",
          "required": ["tokenRef"],
          "properties": {
            "tokenRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "GithubUsernamePassword": {
      "allOf": [
        {
          "$ref": "#/definitions/GithubHttpCredentialsSpecDTO"
        },
        {
          "type": "object",
          "required": ["passwordRef"],
          "properties": {
            "username": {
              "type": "string"
            },
            "usernameRef": {
              "type": "string"
            },
            "passwordRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "GithubUsernameToken": {
      "allOf": [
        {
          "$ref": "#/definitions/GithubHttpCredentialsSpecDTO"
        },
        {
          "type": "object",
          "required": ["tokenRef"],
          "properties": {
            "username": {
              "type": "string"
            },
            "usernameRef": {
              "type": "string"
            },
            "tokenRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "GitlabApiAccess": {
      "type": "object",
      "required": ["type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["Token"]
        },
        "spec": {
          "$ref": "#/definitions/GitlabApiAccessSpecDTO"
        }
      }
    },
    "GitlabApiAccessSpecDTO": {
      "type": "object"
    },
    "GitlabAuthentication": {
      "type": "object",
      "required": ["spec", "type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["Http", "Ssh"]
        },
        "spec": {
          "$ref": "#/definitions/GitlabCredentialsDTO"
        }
      }
    },
    "GitlabConnector": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["authentication", "type", "url"],
          "properties": {
            "url": {
              "type": "string"
            },
            "authentication": {
              "$ref": "#/definitions/GitlabAuthentication"
            },
            "apiAccess": {
              "$ref": "#/definitions/GitlabApiAccess"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            },
            "type": {
              "type": "string",
              "enum": ["Account", "Repo"]
            }
          }
        }
      ]
    },
    "GitlabCredentialsDTO": {
      "type": "object"
    },
    "GitlabHttpCredentials": {
      "allOf": [
        {
          "$ref": "#/definitions/GitlabCredentialsDTO"
        },
        {
          "type": "object",
          "required": ["spec", "type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["UsernamePassword", "UsernameToken", "Kerberos"]
            },
            "spec": {
              "$ref": "#/definitions/GitlabHttpCredentialsSpecDTO"
            }
          }
        }
      ]
    },
    "GitlabHttpCredentialsSpecDTO": {
      "type": "object"
    },
    "GitlabKerberos": {
      "allOf": [
        {
          "$ref": "#/definitions/GitlabHttpCredentialsSpecDTO"
        },
        {
          "type": "object",
          "required": ["kerberosKeyRef"],
          "properties": {
            "kerberosKeyRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "GitlabSshCredentials": {
      "allOf": [
        {
          "$ref": "#/definitions/GitlabCredentialsDTO"
        },
        {
          "type": "object",
          "required": ["sshKeyRef"],
          "properties": {
            "sshKeyRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "GitlabTokenSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/GitlabApiAccessSpecDTO"
        },
        {
          "type": "object",
          "required": ["tokenRef"],
          "properties": {
            "tokenRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "GitlabUsernamePassword": {
      "allOf": [
        {
          "$ref": "#/definitions/GitlabHttpCredentialsSpecDTO"
        },
        {
          "type": "object",
          "required": ["passwordRef"],
          "properties": {
            "username": {
              "type": "string"
            },
            "usernameRef": {
              "type": "string"
            },
            "passwordRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "GitlabUsernameToken": {
      "allOf": [
        {
          "$ref": "#/definitions/GitlabHttpCredentialsSpecDTO"
        },
        {
          "type": "object",
          "required": ["tokenRef"],
          "properties": {
            "username": {
              "type": "string"
            },
            "usernameRef": {
              "type": "string"
            },
            "tokenRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "HttpHelmAuthCredentialsDTO": {
      "type": "object"
    },
    "HttpHelmAuthenticationDTO": {
      "type": "object",
      "required": ["type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["UsernamePassword", "Anonymous"]
        },
        "spec": {
          "$ref": "#/definitions/HttpHelmAuthCredentialsDTO"
        }
      }
    },
    "HttpHelmConnectorDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["helmRepoUrl"],
          "properties": {
            "helmRepoUrl": {
              "type": "string"
            },
            "auth": {
              "$ref": "#/definitions/HttpHelmAuthenticationDTO"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "HttpHelmUsernamePasswordDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/HttpHelmAuthCredentialsDTO"
        },
        {
          "type": "object",
          "required": ["passwordRef"],
          "properties": {
            "username": {
              "type": "string"
            },
            "usernameRef": {
              "type": "string"
            },
            "passwordRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "JiraConnector": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["jiraUrl", "passwordRef"],
          "properties": {
            "jiraUrl": {
              "type": "string"
            },
            "username": {
              "type": "string"
            },
            "passwordRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "KubernetesAuthCredentialDTO": {
      "type": "object"
    },
    "KubernetesAuthDTO": {
      "type": "object",
      "required": ["spec", "type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "UsernamePassword",
            "ClientKeyCert",
            "ServiceAccount",
            "OpenIdConnect"
          ]
        },
        "spec": {
          "$ref": "#/definitions/KubernetesAuthCredentialDTO"
        }
      }
    },
    "KubernetesClientKeyCertDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/KubernetesAuthCredentialDTO"
        },
        {
          "type": "object",
          "required": [
            "clientCertRef",
            "clientKeyPassphraseRef",
            "clientKeyRef"
          ],
          "properties": {
            "caCertRef": {
              "type": "string"
            },
            "clientCertRef": {
              "type": "string"
            },
            "clientKeyRef": {
              "type": "string"
            },
            "clientKeyPassphraseRef": {
              "type": "string"
            },
            "clientKeyAlgo": {
              "type": "string"
            }
          }
        }
      ]
    },
    "KubernetesClusterConfigDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["credential"],
          "properties": {
            "credential": {
              "$ref": "#/definitions/KubernetesCredentialDTO"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "KubernetesClusterDetailsDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/KubernetesCredentialSpecDTO"
        },
        {
          "type": "object",
          "required": ["auth", "masterUrl"],
          "properties": {
            "masterUrl": {
              "type": "string"
            },
            "auth": {
              "$ref": "#/definitions/KubernetesAuthDTO"
            }
          }
        }
      ]
    },
    "KubernetesCredentialDTO": {
      "type": "object",
      "required": ["type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["InheritFromDelegate", "ManualConfig"]
        },
        "spec": {
          "$ref": "#/definitions/KubernetesCredentialSpecDTO"
        }
      }
    },
    "KubernetesCredentialSpecDTO": {
      "type": "object"
    },
    "KubernetesOpenIdConnectDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/KubernetesAuthCredentialDTO"
        },
        {
          "type": "object",
          "required": ["oidcClientIdRef", "oidcPasswordRef"],
          "properties": {
            "oidcIssuerUrl": {
              "type": "string"
            },
            "oidcUsername": {
              "type": "string"
            },
            "oidcUsernameRef": {
              "type": "string"
            },
            "oidcClientIdRef": {
              "type": "string"
            },
            "oidcPasswordRef": {
              "type": "string"
            },
            "oidcSecretRef": {
              "type": "string"
            },
            "oidcScopes": {
              "type": "string"
            }
          }
        }
      ]
    },
    "KubernetesServiceAccountDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/KubernetesAuthCredentialDTO"
        },
        {
          "type": "object",
          "required": ["serviceAccountTokenRef"],
          "properties": {
            "serviceAccountTokenRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "KubernetesUserNamePasswordDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/KubernetesAuthCredentialDTO"
        },
        {
          "type": "object",
          "required": ["passwordRef"],
          "properties": {
            "username": {
              "type": "string"
            },
            "usernameRef": {
              "type": "string"
            },
            "passwordRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "LocalConnectorDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "properties": {
            "default": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "NewRelicConnectorDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["apiKeyRef", "newRelicAccountId", "url"],
          "properties": {
            "newRelicAccountId": {
              "type": "string"
            },
            "url": {
              "type": "string"
            },
            "apiKeyRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "NexusAuthCredentials": {
      "type": "object"
    },
    "NexusAuthentication": {
      "type": "object",
      "required": ["type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["UsernamePassword", "Anonymous"]
        },
        "spec": {
          "$ref": "#/definitions/NexusAuthCredentials"
        }
      }
    },
    "NexusConnector": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["nexusServerUrl", "version"],
          "properties": {
            "nexusServerUrl": {
              "type": "string"
            },
            "version": {
              "type": "string"
            },
            "auth": {
              "$ref": "#/definitions/NexusAuthentication"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "NexusUsernamePasswordAuth": {
      "allOf": [
        {
          "$ref": "#/definitions/NexusAuthCredentials"
        },
        {
          "type": "object",
          "required": ["passwordRef"],
          "properties": {
            "username": {
              "type": "string"
            },
            "usernameRef": {
              "type": "string"
            },
            "passwordRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "ResponseConnectorResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/ConnectorResponse"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "SplunkConnectorDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["accountId", "passwordRef"],
          "properties": {
            "splunkUrl": {
              "type": "string"
            },
            "username": {
              "type": "string"
            },
            "accountId": {
              "type": "string"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            },
            "passwordRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "VaultConnectorDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "properties": {
            "authToken": {
              "type": "string"
            },
            "basePath": {
              "type": "string"
            },
            "vaultUrl": {
              "type": "string"
            },
            "renewalIntervalMinutes": {
              "type": "integer",
              "format": "int64"
            },
            "secretEngineManuallyConfigured": {
              "type": "boolean"
            },
            "secretEngineName": {
              "type": "string"
            },
            "appRoleId": {
              "type": "string"
            },
            "secretId": {
              "type": "string"
            },
            "secretEngineVersion": {
              "type": "integer",
              "format": "int32"
            },
            "default": {
              "type": "boolean"
            },
            "readOnly": {
              "type": "boolean"
            },
            "accessType": {
              "type": "string",
              "enum": ["APP_ROLE", "TOKEN"]
            }
          }
        }
      ]
    },
    "Connector": {
      "type": "object",
      "properties": {
        "connector": {
          "$ref": "#/definitions/ConnectorInfoDTO"
        }
      }
    },
    "ResponseBoolean": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "boolean"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "Page": {
      "type": "object",
      "properties": {
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "content": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "last": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "empty": {
          "type": "boolean"
        }
      }
    },
    "PageConnectorResponse": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int64"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64"
        },
        "pageItemCount": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConnectorResponse"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int64"
        },
        "empty": {
          "type": "boolean"
        }
      }
    },
    "ResponsePageConnectorResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PageConnectorResponse"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ConnectorFilterProperties": {
      "allOf": [
        {
          "$ref": "#/definitions/FilterProperties"
        },
        {
          "type": "object",
          "properties": {
            "connectorNames": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "connectorIdentifiers": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": {
              "type": "string"
            },
            "types": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "K8sCluster",
                  "Git",
                  "Splunk",
                  "AppDynamics",
                  "Vault",
                  "DockerRegistry",
                  "Local",
                  "GcpKms",
                  "Gcp",
                  "Aws",
                  "Artifactory",
                  "Jira",
                  "Nexus",
                  "Github",
                  "Gitlab",
                  "Bitbucket",
                  "Codecommit",
                  "CEAws",
                  "CEAzure",
                  "GcpCloudCost",
                  "CEK8sCluster",
                  "HttpHelmRepo",
                  "NewRelic"
                ]
              }
            },
            "categories": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "CLOUD_PROVIDER",
                  "SECRET_MANAGER",
                  "CLOUD_COST",
                  "ARTIFACTORY",
                  "CODE_REPO",
                  "MONITORING",
                  "TICKETING"
                ]
              }
            },
            "connectivityStatuses": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["SUCCESS", "FAILURE", "PARTIAL"]
              }
            },
            "inheritingCredentialsFromDelegate": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "ConnectorStatistics": {
      "type": "object",
      "properties": {
        "typeStats": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConnectorTypeStatistics"
          }
        },
        "statusStats": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConnectorStatusStatistics"
          }
        }
      }
    },
    "ConnectorStatusStatistics": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "PARTIAL"]
        },
        "count": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ConnectorTypeStatistics": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "K8sCluster",
            "Git",
            "Splunk",
            "AppDynamics",
            "Vault",
            "DockerRegistry",
            "Local",
            "GcpKms",
            "Gcp",
            "Aws",
            "Artifactory",
            "Jira",
            "Nexus",
            "Github",
            "Gitlab",
            "Bitbucket",
            "Codecommit",
            "CEAws",
            "CEAzure",
            "GcpCloudCost",
            "CEK8sCluster",
            "HttpHelmRepo",
            "NewRelic"
          ]
        },
        "count": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ResponseConnectorStatistics": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/ConnectorStatistics"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ResponseListConnectorResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConnectorResponse"
          }
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ConnectorValidationResult": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "PARTIAL"]
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorDetail"
          }
        },
        "errorSummary": {
          "type": "string"
        },
        "testedAt": {
          "type": "integer",
          "format": "int64"
        },
        "delegateId": {
          "type": "string"
        }
      }
    },
    "ResponseConnectorValidationResult": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/ConnectorValidationResult"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ConnectorCatalogueItem": {
      "type": "object",
      "properties": {
        "category": {
          "type": "string",
          "enum": [
            "CLOUD_PROVIDER",
            "SECRET_MANAGER",
            "CLOUD_COST",
            "ARTIFACTORY",
            "CODE_REPO",
            "MONITORING",
            "TICKETING"
          ]
        },
        "connectors": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "K8sCluster",
              "Git",
              "Splunk",
              "AppDynamics",
              "Vault",
              "DockerRegistry",
              "Local",
              "GcpKms",
              "Gcp",
              "Aws",
              "Artifactory",
              "Jira",
              "Nexus",
              "Github",
              "Gitlab",
              "Bitbucket",
              "Codecommit",
              "CEAws",
              "CEAzure",
              "GcpCloudCost",
              "CEK8sCluster",
              "HttpHelmRepo",
              "NewRelic"
            ]
          }
        }
      }
    },
    "ConnectorCatalogueResponse": {
      "type": "object",
      "properties": {
        "catalogue": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConnectorCatalogueItem"
          }
        }
      }
    },
    "ResponseConnectorCatalogueResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/ConnectorCatalogueResponse"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "AuditFilterProperties": {
      "allOf": [
        {
          "$ref": "#/definitions/FilterProperties"
        },
        {
          "type": "object",
          "properties": {
            "scopes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ResourceScopeDTO"
              }
            },
            "resources": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ResourceDTO"
              }
            },
            "modules": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["CD", "CI", "CORE", "CV", "CF", "CE"]
              }
            },
            "actions": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "CREATE",
                  "UPDATE",
                  "RESTORE",
                  "DELETE",
                  "INVITE",
                  "RESEND_INVITE",
                  "REVOKE_INVITE",
                  "ADD_MEMBERSHIP",
                  "REMOVE_MEMBERSHIP"
                ]
              }
            },
            "environments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Environment"
              }
            },
            "principals": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Principal"
              }
            },
            "startTime": {
              "type": "integer",
              "format": "int64"
            },
            "endTime": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      ]
    },
    "Environment": {
      "type": "object",
      "required": ["identifier", "type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["PreProduction", "Production"]
        },
        "identifier": {
          "type": "string"
        }
      }
    },
    "FilterDTO": {
      "type": "object",
      "required": ["filterProperties", "identifier", "name"],
      "properties": {
        "name": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "orgIdentifier": {
          "type": "string"
        },
        "projectIdentifier": {
          "type": "string"
        },
        "filterProperties": {
          "$ref": "#/definitions/FilterProperties"
        },
        "filterVisibility": {
          "type": "string",
          "enum": ["EveryOne", "OnlyCreator"]
        }
      }
    },
    "FilterProperties": {
      "type": "object",
      "discriminator": "filterType",
      "properties": {
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "filterType": {
          "type": "string",
          "enum": [
            "Connector",
            "PipelineSetup",
            "PipelineExecution",
            "Deployment",
            "Audit"
          ]
        }
      }
    },
    "NGTag": {
      "type": "object",
      "required": ["key", "value"],
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "PipelineFilterProperties": {
      "allOf": [
        {
          "$ref": "#/definitions/FilterProperties"
        },
        {
          "type": "object",
          "properties": {
            "pipelineTags": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NGTag"
              }
            },
            "pipelineIdentifiers": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "moduleProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        }
      ]
    },
    "Principal": {
      "type": "object",
      "required": ["identifier", "type"],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["USER", "USER_GROUP", "API_KEY", "SERVICE"]
        }
      }
    },
    "ResourceDTO": {
      "type": "object",
      "required": ["identifier", "type"],
      "properties": {
        "type": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceScopeDTO": {
      "type": "object",
      "required": ["accountIdentifier"],
      "properties": {
        "accountIdentifier": {
          "type": "string"
        },
        "orgIdentifier": {
          "type": "string"
        },
        "projectIdentifier": {
          "type": "string"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResponseFilterDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/FilterDTO"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "PageFilterDTO": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int64"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64"
        },
        "pageItemCount": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FilterDTO"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int64"
        },
        "empty": {
          "type": "boolean"
        }
      }
    },
    "ResponsePageFilterDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PageFilterDTO"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ResponseListString": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "GitBranchDTO": {
      "type": "object",
      "properties": {
        "branchName": {
          "type": "string"
        },
        "branchSyncStatus": {
          "type": "string",
          "enum": ["SYNCED", "SYNCING", "UNSYNCED"]
        }
      }
    },
    "PageGitBranchDTO": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int64"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64"
        },
        "pageItemCount": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GitBranchDTO"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int64"
        },
        "empty": {
          "type": "boolean"
        }
      }
    },
    "ResponsePageGitBranchDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PageGitBranchDTO"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "GitSyncEntityDTO": {
      "type": "object",
      "properties": {
        "entityName": {
          "type": "string"
        },
        "entityType": {
          "type": "string",
          "enum": [
            "Projects",
            "Pipelines",
            "PipelineSteps",
            "Connectors",
            "Secrets",
            "Service",
            "Environment",
            "InputSets",
            "CvConfig",
            "Delegates",
            "DelegateConfigurations",
            "CvVerificationJob",
            "IntegrationStage",
            "IntegrationSteps",
            "CvKubernetesActivitySource",
            "DeploymentSteps",
            "DeploymentStage",
            "ApprovalStage",
            "Triggers"
          ]
        },
        "entityIdentifier": {
          "type": "string"
        },
        "gitConnectorId": {
          "type": "string"
        },
        "repositoryName": {
          "type": "string"
        },
        "branch": {
          "type": "string"
        },
        "folderPath": {
          "type": "string"
        },
        "entityGitPath": {
          "type": "string"
        },
        "repoProviderType": {
          "type": "string",
          "enum": ["github", "gitlab", "bitbucket", "unknown"]
        },
        "accountId": {
          "type": "string"
        }
      }
    },
    "GitSyncEntityListDTO": {
      "type": "object",
      "properties": {
        "entityType": {
          "type": "string",
          "enum": [
            "Projects",
            "Pipelines",
            "PipelineSteps",
            "Connectors",
            "Secrets",
            "Service",
            "Environment",
            "InputSets",
            "CvConfig",
            "Delegates",
            "DelegateConfigurations",
            "CvVerificationJob",
            "IntegrationStage",
            "IntegrationSteps",
            "CvKubernetesActivitySource",
            "DeploymentSteps",
            "DeploymentStage",
            "ApprovalStage",
            "Triggers"
          ]
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "gitSyncEntities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GitSyncEntityDTO"
          }
        }
      }
    },
    "GitSyncRepoFiles": {
      "type": "object",
      "properties": {
        "gitSyncConfigIdentifier": {
          "type": "string"
        },
        "gitSyncEntityLists": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GitSyncEntityListDTO"
          }
        }
      }
    },
    "GitSyncRepoFilesList": {
      "type": "object",
      "properties": {
        "moduleType": {
          "type": "string",
          "enum": ["CD", "CI", "CORE", "CV", "CF", "CE"]
        },
        "gitSyncRepoFilesList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GitSyncRepoFiles"
          }
        }
      }
    },
    "ResponseGitSyncRepoFilesList": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/GitSyncRepoFilesList"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "GitEntityFilterProperties": {
      "type": "object",
      "properties": {
        "moduleType": {
          "type": "string",
          "enum": ["CD", "CI", "CORE", "CV", "CF", "CE"]
        },
        "gitSyncConfigIdentifiers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "entityTypes": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Projects",
              "Pipelines",
              "PipelineSteps",
              "Connectors",
              "Secrets",
              "Service",
              "Environment",
              "InputSets",
              "CvConfig",
              "Delegates",
              "DelegateConfigurations",
              "CvVerificationJob",
              "IntegrationStage",
              "IntegrationSteps",
              "CvKubernetesActivitySource",
              "DeploymentSteps",
              "DeploymentStage",
              "ApprovalStage",
              "Triggers"
            ]
          }
        },
        "searchTerm": {
          "type": "string"
        }
      }
    },
    "ResponseListGitSyncEntityListDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GitSyncEntityListDTO"
          }
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "GitEntityBranchFilterSummaryProperties": {
      "type": "object",
      "properties": {
        "moduleType": {
          "type": "string",
          "enum": ["CD", "CI", "CORE", "CV", "CF", "CE"]
        },
        "entityTypes": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Projects",
              "Pipelines",
              "PipelineSteps",
              "Connectors",
              "Secrets",
              "Service",
              "Environment",
              "InputSets",
              "CvConfig",
              "Delegates",
              "DelegateConfigurations",
              "CvVerificationJob",
              "IntegrationStage",
              "IntegrationSteps",
              "CvKubernetesActivitySource",
              "DeploymentSteps",
              "DeploymentStage",
              "ApprovalStage",
              "Triggers"
            ]
          }
        },
        "searchTerm": {
          "type": "string"
        }
      }
    },
    "PageGitSyncEntityListDTO": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int64"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64"
        },
        "pageItemCount": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GitSyncEntityListDTO"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int64"
        },
        "empty": {
          "type": "boolean"
        }
      }
    },
    "ResponsePageGitSyncEntityListDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PageGitSyncEntityListDTO"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "GitSyncFolderConfigDTO": {
      "type": "object",
      "properties": {
        "rootFolder": {
          "type": "string"
        },
        "isDefault": {
          "type": "boolean"
        },
        "identifier": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "RestResponse": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "type": "object"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "CDModuleLicenseDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ModuleLicenseDTO"
        },
        {
          "type": "object",
          "properties": {
            "deploymentUnits": {
              "type": "object",
              "additionalProperties": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        }
      ]
    },
    "CEModuleLicenseDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ModuleLicenseDTO"
        },
        {
          "type": "object",
          "properties": {}
        }
      ]
    },
    "CFModuleLicenseDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ModuleLicenseDTO"
        },
        {
          "type": "object",
          "properties": {}
        }
      ]
    },
    "CIModuleLicenseDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ModuleLicenseDTO"
        },
        {
          "type": "object",
          "properties": {
            "numberOfCommitters": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      ]
    },
    "CVModuleLicenseDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ModuleLicenseDTO"
        },
        {
          "type": "object",
          "properties": {}
        }
      ]
    },
    "ModuleLicenseDTO": {
      "type": "object",
      "discriminator": "moduleType",
      "properties": {
        "id": {
          "type": "string"
        },
        "accountIdentifier": {
          "type": "string"
        },
        "moduleType": {
          "type": "string",
          "enum": ["CD", "CI", "CV", "CE", "CF"]
        },
        "edition": {
          "type": "string",
          "enum": ["FREE", "TEAM", "ENTERPRISE"]
        },
        "licenseType": {
          "type": "string",
          "enum": ["TRIAL", "PAID"]
        },
        "startTime": {
          "type": "integer",
          "format": "int64"
        },
        "expiryTime": {
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "type": "string",
          "enum": ["ACTIVE", "DELETED", "EXPIRED"]
        },
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "lastModifiedAt": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ResponseModuleLicenseDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/ModuleLicenseDTO"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "AccountLicensesDTO": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "moduleLicenses": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ModuleLicenseDTO"
          }
        }
      }
    },
    "ResponseAccountLicensesDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/AccountLicensesDTO"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "StartTrialRequestDTO": {
      "type": "object",
      "required": ["moduleType"],
      "properties": {
        "moduleType": {
          "type": "string",
          "enum": ["CD", "CI", "CV", "CE", "CF"]
        }
      }
    },
    "RestResponseVersionPackage": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "$ref": "#/definitions/VersionPackage"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "RuntimeInfo": {
      "type": "object",
      "properties": {
        "primary": {
          "type": "boolean"
        },
        "primaryVersion": {
          "type": "string"
        },
        "deployMode": {
          "type": "string"
        }
      }
    },
    "VersionInfo": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "buildNo": {
          "type": "string"
        },
        "gitCommit": {
          "type": "string"
        },
        "gitBranch": {
          "type": "string"
        },
        "timestamp": {
          "type": "string"
        }
      }
    },
    "VersionPackage": {
      "type": "object",
      "properties": {
        "versionInfo": {
          "$ref": "#/definitions/VersionInfo"
        },
        "runtimeInfo": {
          "$ref": "#/definitions/RuntimeInfo"
        }
      }
    },
    "PageRoleAssignmentResponse": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int64"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64"
        },
        "pageItemCount": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RoleAssignmentResponse"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int64"
        },
        "empty": {
          "type": "boolean"
        }
      }
    },
    "ResponsePageRoleAssignmentResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PageRoleAssignmentResponse"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "RoleAssignment": {
      "type": "object",
      "required": ["principal", "resourceGroupIdentifier", "roleIdentifier"],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "resourceGroupIdentifier": {
          "type": "string"
        },
        "roleIdentifier": {
          "type": "string"
        },
        "principal": {
          "$ref": "#/definitions/Principal"
        },
        "disabled": {
          "type": "boolean"
        }
      }
    },
    "RoleAssignmentResponse": {
      "type": "object",
      "required": ["roleAssignment", "scope"],
      "properties": {
        "roleAssignment": {
          "$ref": "#/definitions/RoleAssignment"
        },
        "scope": {
          "$ref": "#/definitions/ScopeDTO"
        },
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "lastModifiedAt": {
          "type": "integer",
          "format": "int64"
        },
        "harnessManaged": {
          "type": "boolean"
        }
      }
    },
    "ScopeDTO": {
      "type": "object",
      "properties": {
        "accountIdentifier": {
          "type": "string"
        },
        "orgIdentifier": {
          "type": "string"
        },
        "projectIdentifier": {
          "type": "string"
        }
      }
    },
    "RoleAssignmentFilter": {
      "type": "object",
      "properties": {
        "resourceGroupFilter": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "roleFilter": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "principalTypeFilter": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": ["USER", "USER_GROUP", "API_KEY", "SERVICE"]
          }
        },
        "principalFilter": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/Principal"
          }
        },
        "harnessManagedFilter": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "boolean"
          }
        },
        "disabledFilter": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "boolean"
          }
        }
      }
    },
    "ResponseRoleAssignmentResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/RoleAssignmentResponse"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ResponseListRoleAssignmentResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RoleAssignmentResponse"
          }
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "BatchRoleAssignmentCreateRequest": {
      "type": "object",
      "properties": {
        "roleAssignments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RoleAssignment"
          }
        }
      }
    },
    "ResponseUserAggregate": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/UserAggregate"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "RoleBinding": {
      "type": "object",
      "required": ["managedRole", "roleIdentifier", "roleName"],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "roleIdentifier": {
          "type": "string"
        },
        "roleName": {
          "type": "string"
        },
        "resourceGroupIdentifier": {
          "type": "string"
        },
        "resourceGroupName": {
          "type": "string"
        },
        "managedRole": {
          "type": "boolean"
        }
      }
    },
    "UserAggregate": {
      "type": "object",
      "required": ["user"],
      "properties": {
        "user": {
          "$ref": "#/definitions/UserSearchDTO"
        },
        "roleBindings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RoleBinding"
          }
        }
      }
    },
    "UserSearchDTO": {
      "type": "object",
      "required": ["email", "name", "uuid"],
      "properties": {
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        }
      }
    },
    "PageUserAggregate": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int64"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64"
        },
        "pageItemCount": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserAggregate"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int64"
        },
        "empty": {
          "type": "boolean"
        }
      }
    },
    "ResponsePageUserAggregate": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PageUserAggregate"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ACLAggregateFilter": {
      "type": "object",
      "properties": {
        "resourceGroupIdentifiers": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "roleIdentifiers": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "RestResponseBoolean": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "type": "boolean"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "EmbeddedUser": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      }
    },
    "LdapConnectionSettings": {
      "type": "object",
      "required": ["host"],
      "properties": {
        "host": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int32"
        },
        "sslEnabled": {
          "type": "boolean"
        },
        "referralsEnabled": {
          "type": "boolean"
        },
        "maxReferralHops": {
          "type": "integer",
          "format": "int32",
          "minimum": 1
        },
        "bindDN": {
          "type": "string"
        },
        "bindPassword": {
          "type": "string"
        },
        "connectTimeout": {
          "type": "integer",
          "format": "int32"
        },
        "responseTimeout": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "LdapGroupSettings": {
      "type": "object",
      "properties": {
        "baseDN": {
          "type": "string"
        },
        "searchFilter": {
          "type": "string"
        },
        "nameAttr": {
          "type": "string"
        },
        "descriptionAttr": {
          "type": "string"
        },
        "userMembershipAttr": {
          "type": "string"
        },
        "referencedUserAttr": {
          "type": "string"
        }
      }
    },
    "LdapSettings": {
      "allOf": [
        {
          "$ref": "#/definitions/SSOSettings"
        },
        {
          "type": "object",
          "required": ["connectionSettings"],
          "properties": {
            "connectionSettings": {
              "$ref": "#/definitions/LdapConnectionSettings"
            },
            "userSettings": {
              "$ref": "#/definitions/LdapUserSettings"
            },
            "groupSettings": {
              "$ref": "#/definitions/LdapGroupSettings"
            },
            "userSettingsList": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LdapUserSettings"
              }
            },
            "groupSettingsList": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LdapGroupSettings"
              }
            }
          }
        }
      ]
    },
    "LdapUserSettings": {
      "type": "object",
      "properties": {
        "baseDN": {
          "type": "string"
        },
        "searchFilter": {
          "type": "string"
        },
        "emailAttr": {
          "type": "string"
        },
        "displayNameAttr": {
          "type": "string"
        },
        "groupMembershipAttr": {
          "type": "string"
        }
      }
    },
    "OauthSettings": {
      "allOf": [
        {
          "$ref": "#/definitions/SSOSettings"
        },
        {
          "type": "object",
          "properties": {
            "filter": {
              "type": "string"
            },
            "allowedProviders": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string",
                "enum": [
                  "AZURE",
                  "BITBUCKET",
                  "GITHUB",
                  "GITLAB",
                  "GOOGLE",
                  "LINKEDIN"
                ]
              }
            }
          }
        }
      ]
    },
    "RestResponseSSOConfig": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "$ref": "#/definitions/SSOConfig"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "SSOConfig": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "ssoSettings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SSOSettings"
          }
        },
        "authenticationMechanism": {
          "type": "string",
          "enum": ["USER_PASSWORD", "SAML", "LDAP", "OAUTH"]
        }
      }
    },
    "SSOSettings": {
      "type": "object",
      "required": ["appId", "lastUpdatedAt", "type", "uuid"],
      "discriminator": "type",
      "properties": {
        "uuid": {
          "type": "string"
        },
        "appId": {
          "type": "string"
        },
        "createdBy": {
          "$ref": "#/definitions/EmbeddedUser"
        },
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "lastUpdatedBy": {
          "$ref": "#/definitions/EmbeddedUser"
        },
        "lastUpdatedAt": {
          "type": "integer",
          "format": "int64"
        },
        "type": {
          "type": "string",
          "enum": ["SAML", "LDAP", "OAUTH"]
        },
        "displayName": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "accountId": {
          "type": "string"
        }
      }
    },
    "SamlSettings": {
      "allOf": [
        {
          "$ref": "#/definitions/SSOSettings"
        },
        {
          "type": "object",
          "required": ["accountId", "origin"],
          "properties": {
            "accountId": {
              "type": "string"
            },
            "origin": {
              "type": "string"
            },
            "logoutUrl": {
              "type": "string"
            },
            "groupMembershipAttr": {
              "type": "string"
            },
            "authorizationEnabled": {
              "type": "boolean",
              "readOnly": true
            }
          }
        }
      ]
    },
    "LoginTypeResponse": {
      "type": "object",
      "properties": {
        "authenticationMechanism": {
          "type": "string",
          "enum": ["USER_PASSWORD", "SAML", "LDAP", "OAUTH"]
        },
        "showCaptcha": {
          "type": "boolean"
        },
        "defaultExperience": {
          "type": "string",
          "enum": ["NG", "CG"]
        },
        "ssorequest": {
          "$ref": "#/definitions/SSORequest"
        },
        "oauthEnabled": {
          "type": "boolean"
        }
      }
    },
    "RestResponseLoginTypeResponse": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "$ref": "#/definitions/LoginTypeResponse"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "SSORequest": {
      "type": "object",
      "properties": {
        "oauthProviderType": {
          "type": "string",
          "enum": [
            "AZURE",
            "BITBUCKET",
            "GITHUB",
            "GITLAB",
            "GOOGLE",
            "LINKEDIN"
          ]
        },
        "idpRedirectUrl": {
          "type": "string"
        },
        "oauthProviderTypes": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "AZURE",
              "BITBUCKET",
              "GITHUB",
              "GITLAB",
              "GOOGLE",
              "LINKEDIN"
            ]
          }
        }
      }
    },
    "OAuthSettings": {
      "allOf": [
        {
          "$ref": "#/definitions/NGAuthSettings"
        },
        {
          "type": "object",
          "properties": {
            "filter": {
              "type": "string"
            },
            "allowedProviders": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string",
                "enum": [
                  "AZURE",
                  "BITBUCKET",
                  "GITHUB",
                  "GITLAB",
                  "GOOGLE",
                  "LINKEDIN"
                ]
              }
            }
          }
        }
      ]
    },
    "AccountEvent": {
      "type": "object",
      "properties": {
        "accountEventType": {
          "type": "string",
          "enum": [
            "APP_CREATED",
            "SERVICE_CREATED",
            "ENV_CREATED",
            "WORKFLOW_CREATED",
            "WORKFLOW_DEPLOYED",
            "PIPELINE_DEPLOYED",
            "DELEGATE_INSTALLED",
            "CLOUD_PROVIDER_CREATED",
            "ARTIFACT_REPO_CREATED",
            "PIPELINE_CREATED",
            "ARTIFACT_STREAM_ADDED",
            "INFRA_MAPPING_ADDED",
            "INFRA_DEFINITION_ADDED",
            "CUSTOM"
          ]
        },
        "customMsg": {
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "AccountPermissions": {
      "type": "object",
      "properties": {
        "permissions": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "ACCOUNT",
              "LOGGED_IN",
              "DELEGATE",
              "NONE",
              "APP",
              "ALL_APP_ENTITIES",
              "ENV",
              "SERVICE",
              "WORKFLOW",
              "PIPELINE",
              "DEPLOYMENT",
              "APPLICATION_CREATE_DELETE",
              "USER_PERMISSION_MANAGEMENT",
              "ACCOUNT_MANAGEMENT",
              "PROVISIONER",
              "TEMPLATE_MANAGEMENT",
              "USER_PERMISSION_READ",
              "AUDIT_VIEWER",
              "TAG_MANAGEMENT",
              "CE_ADMIN",
              "CE_VIEWER",
              "MANAGE_CLOUD_PROVIDERS",
              "MANAGE_CONNECTORS",
              "MANAGE_APPLICATIONS",
              "MANAGE_APPLICATION_STACKS",
              "MANAGE_DELEGATES",
              "MANAGE_ALERT_NOTIFICATION_RULES",
              "MANAGE_DELEGATE_PROFILES",
              "MANAGE_CONFIG_AS_CODE",
              "MANAGE_SECRETS",
              "MANAGE_SECRET_MANAGERS",
              "MANAGE_SSH_AND_WINRM",
              "MANAGE_AUTHENTICATION_SETTINGS",
              "MANAGE_USER_AND_USER_GROUPS_AND_API_KEYS",
              "VIEW_USER_AND_USER_GROUPS_AND_API_KEYS",
              "MANAGE_IP_WHITELIST",
              "MANAGE_IP_WHITELISTING",
              "MANAGE_DEPLOYMENT_FREEZES",
              "MANAGE_PIPELINE_GOVERNANCE_STANDARDS",
              "MANAGE_API_KEYS",
              "MANAGE_TAGS",
              "MANAGE_CUSTOM_DASHBOARDS",
              "CREATE_CUSTOM_DASHBOARDS"
            ]
          }
        }
      }
    },
    "AccountPreferences": {
      "type": "object",
      "properties": {
        "delegateSecretsCacheTTLInHours": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "AppPermission": {
      "type": "object",
      "properties": {
        "permissionType": {
          "type": "string",
          "enum": [
            "ACCOUNT",
            "LOGGED_IN",
            "DELEGATE",
            "NONE",
            "APP",
            "ALL_APP_ENTITIES",
            "ENV",
            "SERVICE",
            "WORKFLOW",
            "PIPELINE",
            "DEPLOYMENT",
            "APPLICATION_CREATE_DELETE",
            "USER_PERMISSION_MANAGEMENT",
            "ACCOUNT_MANAGEMENT",
            "PROVISIONER",
            "TEMPLATE_MANAGEMENT",
            "USER_PERMISSION_READ",
            "AUDIT_VIEWER",
            "TAG_MANAGEMENT",
            "CE_ADMIN",
            "CE_VIEWER",
            "MANAGE_CLOUD_PROVIDERS",
            "MANAGE_CONNECTORS",
            "MANAGE_APPLICATIONS",
            "MANAGE_APPLICATION_STACKS",
            "MANAGE_DELEGATES",
            "MANAGE_ALERT_NOTIFICATION_RULES",
            "MANAGE_DELEGATE_PROFILES",
            "MANAGE_CONFIG_AS_CODE",
            "MANAGE_SECRETS",
            "MANAGE_SECRET_MANAGERS",
            "MANAGE_SSH_AND_WINRM",
            "MANAGE_AUTHENTICATION_SETTINGS",
            "MANAGE_USER_AND_USER_GROUPS_AND_API_KEYS",
            "VIEW_USER_AND_USER_GROUPS_AND_API_KEYS",
            "MANAGE_IP_WHITELIST",
            "MANAGE_IP_WHITELISTING",
            "MANAGE_DEPLOYMENT_FREEZES",
            "MANAGE_PIPELINE_GOVERNANCE_STANDARDS",
            "MANAGE_API_KEYS",
            "MANAGE_TAGS",
            "MANAGE_CUSTOM_DASHBOARDS",
            "CREATE_CUSTOM_DASHBOARDS"
          ]
        },
        "appFilter": {
          "$ref": "#/definitions/GenericEntityFilter"
        },
        "entityFilter": {
          "$ref": "#/definitions/Filter"
        },
        "actions": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "ALL",
              "CREATE",
              "READ",
              "UPDATE",
              "DELETE",
              "EXECUTE",
              "EXECUTE_WORKFLOW",
              "EXECUTE_PIPELINE",
              "EXECUTE_WORKFLOW_ROLLBACK",
              "DEFAULT"
            ]
          }
        }
      }
    },
    "CeLicenseInfo": {
      "type": "object",
      "properties": {
        "licenseType": {
          "type": "string",
          "enum": ["FULL_TRIAL", "LIMITED_TRIAL", "PAID"]
        },
        "expiryTime": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "DelegateConfiguration": {
      "type": "object",
      "properties": {
        "delegateVersions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "EnvFilter": {
      "allOf": [
        {
          "$ref": "#/definitions/Filter"
        },
        {
          "type": "object",
          "properties": {
            "filterTypes": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "Filter": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "ids": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "GenericEntityFilter": {
      "allOf": [
        {
          "$ref": "#/definitions/Filter"
        },
        {
          "type": "object",
          "properties": {
            "filterType": {
              "type": "string"
            }
          }
        }
      ]
    },
    "LicenseInfo": {
      "type": "object",
      "properties": {
        "accountType": {
          "type": "string"
        },
        "accountStatus": {
          "type": "string"
        },
        "expiryTime": {
          "type": "integer",
          "format": "int64"
        },
        "licenseUnits": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "LoginSettings": {
      "type": "object",
      "required": [
        "accountId",
        "passwordExpirationPolicy",
        "passwordStrengthPolicy",
        "userLockoutPolicy",
        "uuid"
      ],
      "properties": {
        "uuid": {
          "type": "string"
        },
        "accountId": {
          "type": "string"
        },
        "lastUpdatedBy": {
          "$ref": "#/definitions/EmbeddedUser"
        },
        "lastUpdatedAt": {
          "type": "integer",
          "format": "int64"
        },
        "userLockoutPolicy": {
          "$ref": "#/definitions/UserLockoutPolicy"
        },
        "passwordExpirationPolicy": {
          "$ref": "#/definitions/PasswordExpirationPolicy"
        },
        "passwordStrengthPolicy": {
          "$ref": "#/definitions/PasswordStrengthPolicy"
        }
      }
    },
    "NotificationSettings": {
      "type": "object",
      "required": ["emailAddresses", "slackConfig"],
      "properties": {
        "useIndividualEmails": {
          "type": "boolean"
        },
        "sendMailToNewMembers": {
          "type": "boolean"
        },
        "emailAddresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "slackConfig": {
          "$ref": "#/definitions/SlackNotificationSetting"
        },
        "pagerDutyIntegrationKey": {
          "type": "string"
        },
        "microsoftTeamsWebhookUrl": {
          "type": "string"
        }
      }
    },
    "PasswordExpirationPolicy": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "daysBeforePasswordExpires": {
          "type": "integer",
          "format": "int32"
        },
        "daysBeforeUserNotifiedOfPasswordExpiration": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PasswordStrengthPolicy": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "minNumberOfCharacters": {
          "type": "integer",
          "format": "int32"
        },
        "minNumberOfUppercaseCharacters": {
          "type": "integer",
          "format": "int32"
        },
        "minNumberOfLowercaseCharacters": {
          "type": "integer",
          "format": "int32"
        },
        "minNumberOfSpecialCharacters": {
          "type": "integer",
          "format": "int32"
        },
        "minNumberOfDigits": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "RestResponseLoginSettings": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "$ref": "#/definitions/LoginSettings"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "SlackNotificationSetting": {
      "type": "object",
      "required": ["outgoingWebhookUrl"],
      "properties": {
        "name": {
          "type": "string"
        },
        "outgoingWebhookUrl": {
          "type": "string"
        }
      }
    },
    "TechStack": {
      "type": "object",
      "properties": {
        "category": {
          "type": "string"
        },
        "technology": {
          "type": "string"
        }
      }
    },
    "TrialSignupOptions": {
      "type": "object",
      "properties": {
        "productsSelected": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["CD", "CE", "CI"]
          }
        },
        "assistedOption": {
          "type": "boolean"
        }
      }
    },
    "UserGroup": {
      "type": "object",
      "required": ["appId", "lastUpdatedAt", "uuid"],
      "properties": {
        "uuid": {
          "type": "string"
        },
        "appId": {
          "type": "string"
        },
        "createdBy": {
          "$ref": "#/definitions/EmbeddedUser"
        },
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "lastUpdatedBy": {
          "$ref": "#/definitions/EmbeddedUser"
        },
        "lastUpdatedAt": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "linkedSsoType": {
          "type": "string",
          "enum": ["SAML", "LDAP", "OAUTH"]
        },
        "linkedSsoId": {
          "type": "string"
        },
        "linkedSsoDisplayName": {
          "type": "string"
        },
        "ssoGroupId": {
          "type": "string"
        },
        "ssoGroupName": {
          "type": "string"
        },
        "importedByScim": {
          "type": "boolean"
        },
        "accountId": {
          "type": "string"
        },
        "memberIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        },
        "appPermissions": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/AppPermission"
          }
        },
        "accountPermissions": {
          "$ref": "#/definitions/AccountPermissions"
        },
        "notificationSettings": {
          "$ref": "#/definitions/NotificationSettings"
        },
        "default": {
          "type": "boolean"
        },
        "ssoLinked": {
          "type": "boolean"
        }
      }
    },
    "UserLockoutInfo": {
      "type": "object",
      "properties": {
        "numberOfFailedLoginAttempts": {
          "type": "integer",
          "format": "int32"
        },
        "userLockedAt": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "UserLockoutPolicy": {
      "type": "object",
      "properties": {
        "enableLockoutPolicy": {
          "type": "boolean"
        },
        "numberOfFailedAttemptsBeforeLockout": {
          "type": "integer",
          "format": "int32"
        },
        "lockOutPeriod": {
          "type": "integer",
          "format": "int32"
        },
        "notifyUser": {
          "type": "boolean"
        },
        "userGroupsToNotify": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserGroup"
          }
        }
      }
    },
    "UtmInfo": {
      "type": "object",
      "properties": {
        "utmSource": {
          "type": "string"
        },
        "utmContent": {
          "type": "string"
        },
        "utmMedium": {
          "type": "string"
        },
        "utmTerm": {
          "type": "string"
        },
        "utmCampaign": {
          "type": "string"
        }
      }
    },
    "WorkflowFilter": {
      "allOf": [
        {
          "$ref": "#/definitions/Filter"
        },
        {
          "type": "object",
          "properties": {
            "filterTypes": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "AuthenticationSettingsResponse": {
      "type": "object",
      "properties": {
        "ngAuthSettings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NGAuthSettings"
          }
        },
        "whitelistedDomains": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "authenticationMechanism": {
          "type": "string",
          "enum": ["USER_PASSWORD", "SAML", "LDAP", "OAUTH"]
        },
        "twoFactorEnabled": {
          "type": "boolean"
        }
      }
    },
    "LDAPSettings": {
      "allOf": [
        {
          "$ref": "#/definitions/NGAuthSettings"
        },
        {
          "type": "object",
          "required": ["connectionSettings"],
          "properties": {
            "connectionSettings": {
              "$ref": "#/definitions/LdapConnectionSettings"
            },
            "userSettingsList": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LdapUserSettings"
              }
            },
            "groupSettingsList": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LdapGroupSettings"
              }
            }
          }
        }
      ]
    },
    "NGAuthSettings": {
      "type": "object",
      "discriminator": "settingsType",
      "properties": {
        "settingsType": {
          "type": "string",
          "readOnly": true,
          "enum": ["USER_PASSWORD", "SAML", "LDAP", "OAUTH"]
        }
      }
    },
    "RestResponseAuthenticationSettingsResponse": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "$ref": "#/definitions/AuthenticationSettingsResponse"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "SAMLSettings": {
      "allOf": [
        {
          "$ref": "#/definitions/NGAuthSettings"
        },
        {
          "type": "object",
          "required": ["origin"],
          "properties": {
            "origin": {
              "type": "string"
            },
            "logoutUrl": {
              "type": "string"
            },
            "groupMembershipAttr": {
              "type": "string"
            },
            "displayName": {
              "type": "string"
            },
            "authorizationEnabled": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "UsernamePasswordSettings": {
      "allOf": [
        {
          "$ref": "#/definitions/NGAuthSettings"
        },
        {
          "type": "object",
          "required": ["loginSettings"],
          "properties": {
            "loginSettings": {
              "$ref": "#/definitions/LoginSettings"
            }
          }
        }
      ]
    },
    "TwoFactorAdminOverrideSettings": {
      "type": "object",
      "properties": {
        "adminOverrideTwoFactorEnabled": {
          "type": "boolean"
        }
      }
    },
    "RestResponsePasswordStrengthPolicy": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "$ref": "#/definitions/PasswordStrengthPolicy"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "Activity": {
      "type": "object",
      "required": ["activityStatus", "activityTime", "type"],
      "properties": {
        "accountIdentifier": {
          "type": "string"
        },
        "referredEntity": {
          "$ref": "#/definitions/EntityDetail"
        },
        "type": {
          "type": "string",
          "enum": [
            "CONNECTIVITY_CHECK",
            "ENTITY_USAGE",
            "ENTITY_CREATION",
            "ENTITY_UPDATE"
          ]
        },
        "activityStatus": {
          "type": "string",
          "enum": ["SUCCESS", "FAILED"]
        },
        "detail": {
          "$ref": "#/definitions/ActivityDetail"
        },
        "activityTime": {
          "type": "integer",
          "format": "int64"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "ActivityDetail": {
      "type": "object"
    },
    "EntityDetail": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Projects",
            "Pipelines",
            "PipelineSteps",
            "Connectors",
            "Secrets",
            "Service",
            "Environment",
            "InputSets",
            "CvConfig",
            "Delegates",
            "DelegateConfigurations",
            "CvVerificationJob",
            "IntegrationStage",
            "IntegrationSteps",
            "CvKubernetesActivitySource",
            "DeploymentSteps",
            "DeploymentStage",
            "ApprovalStage",
            "Triggers"
          ]
        },
        "entityRef": {
          "$ref": "#/definitions/EntityReference"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "EntityReference": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "identifier": {
          "type": "string"
        },
        "accountIdentifier": {
          "type": "string"
        },
        "projectIdentifier": {
          "type": "string"
        },
        "orgIdentifier": {
          "type": "string"
        }
      }
    },
    "IdentifierRef": {
      "allOf": [
        {
          "$ref": "#/definitions/EntityReference"
        },
        {
          "type": "object",
          "properties": {
            "scope": {
              "type": "string",
              "enum": ["account", "org", "project", "unknown"]
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "InputSetReference": {
      "allOf": [
        {
          "$ref": "#/definitions/EntityReference"
        },
        {
          "type": "object",
          "properties": {
            "pipelineIdentifier": {
              "type": "string"
            }
          }
        }
      ]
    },
    "PageActivity": {
      "type": "object",
      "properties": {
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Activity"
          }
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "last": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "empty": {
          "type": "boolean"
        }
      }
    },
    "Pageable": {
      "type": "object",
      "properties": {
        "paged": {
          "type": "boolean"
        },
        "pageNumber": {
          "type": "integer",
          "format": "int32"
        },
        "unpaged": {
          "type": "boolean"
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ResponsePageActivity": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PageActivity"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "Sort": {
      "type": "object",
      "properties": {
        "unsorted": {
          "type": "boolean"
        },
        "sorted": {
          "type": "boolean"
        },
        "empty": {
          "type": "boolean"
        }
      }
    },
    "ResponseActivity": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/Activity"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ConnectivityCheckSummary": {
      "type": "object",
      "properties": {
        "successCount": {
          "type": "integer",
          "format": "int64"
        },
        "failureCount": {
          "type": "integer",
          "format": "int64"
        },
        "startTime": {
          "type": "integer",
          "format": "int64"
        },
        "endTime": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ResponseConnectivityCheckSummary": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/ConnectivityCheckSummary"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ActivitySummary": {
      "type": "object",
      "properties": {
        "get_id": {
          "type": "integer",
          "format": "int64"
        },
        "startTime": {
          "type": "integer",
          "format": "int64"
        },
        "endTime": {
          "type": "integer",
          "format": "int64"
        },
        "heartBeatFailuresCount": {
          "type": "integer",
          "format": "int64"
        },
        "successfulActivitiesCount": {
          "type": "integer",
          "format": "int64"
        },
        "failedActivitiesCount": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PageActivitySummary": {
      "type": "object",
      "properties": {
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActivitySummary"
          }
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "last": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "empty": {
          "type": "boolean"
        }
      }
    },
    "ResponsePageActivitySummary": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PageActivitySummary"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "DockerBuildDetailsDTO": {
      "type": "object",
      "properties": {
        "tag": {
          "type": "string"
        },
        "buildUrl": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "imagePath": {
          "type": "string"
        }
      }
    },
    "ResponseDockerBuildDetailsDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/DockerBuildDetailsDTO"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "DockerRequestDTO": {
      "type": "object",
      "properties": {
        "tag": {
          "type": "string"
        },
        "tagRegex": {
          "type": "string"
        },
        "tagsList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "DockerResponseDTO": {
      "type": "object",
      "properties": {
        "buildDetailsList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DockerBuildDetailsDTO"
          }
        }
      }
    },
    "ResponseDockerResponseDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/DockerResponseDTO"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "EcrBuildDetailsDTO": {
      "type": "object",
      "properties": {
        "tag": {
          "type": "string"
        },
        "buildUrl": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "imagePath": {
          "type": "string"
        }
      }
    },
    "ResponseEcrBuildDetailsDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/EcrBuildDetailsDTO"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "EcrRequestDTO": {
      "type": "object",
      "properties": {
        "tag": {
          "type": "string"
        },
        "tagRegex": {
          "type": "string"
        },
        "tagsList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "region": {
          "type": "string"
        }
      }
    },
    "EcrResponseDTO": {
      "type": "object",
      "properties": {
        "buildDetailsList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EcrBuildDetailsDTO"
          }
        }
      }
    },
    "ResponseEcrResponseDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/EcrResponseDTO"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "GcrBuildDetailsDTO": {
      "type": "object",
      "properties": {
        "tag": {
          "type": "string"
        },
        "buildUrl": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "imagePath": {
          "type": "string"
        }
      }
    },
    "ResponseGcrBuildDetailsDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/GcrBuildDetailsDTO"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "GcrRequestDTO": {
      "type": "object",
      "properties": {
        "tag": {
          "type": "string"
        },
        "tagRegex": {
          "type": "string"
        },
        "tagsList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "registryHostname": {
          "type": "string"
        }
      }
    },
    "GcrResponseDTO": {
      "type": "object",
      "properties": {
        "buildDetailsList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GcrBuildDetailsDTO"
          }
        }
      }
    },
    "ResponseGcrResponseDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/GcrResponseDTO"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "DelegateProfileDetailsNg": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string"
        },
        "accountId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "primary": {
          "type": "boolean"
        },
        "approvalRequired": {
          "type": "boolean"
        },
        "startupScript": {
          "type": "string"
        },
        "scopingRules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScopingRuleDetailsNg"
          }
        },
        "selectors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "createdBy": {
          "$ref": "#/definitions/EmbeddedUserDetails"
        },
        "lastUpdatedBy": {
          "$ref": "#/definitions/EmbeddedUserDetails"
        },
        "identifier": {
          "type": "string"
        },
        "numberOfDelegates": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "EmbeddedUserDetails": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      }
    },
    "RestResponseDelegateProfileDetailsNg": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "$ref": "#/definitions/DelegateProfileDetailsNg"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "ScopingRuleDetailsNg": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "environmentTypeId": {
          "type": "string"
        },
        "environmentIds": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "RestResponseVoid": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "$ref": "#/definitions/Void"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "Void": {
      "type": "object"
    },
    "RestResponsePageResponseDelegateProfileDetailsNg": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DelegateProfileDetailsNg"
          }
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "ContextElement": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        },
        "elementType": {
          "type": "string",
          "enum": [
            "SERVICE",
            "INFRAMAPPING",
            "SERVICE_TEMPLATE",
            "TAG",
            "SHELL",
            "HOST",
            "INSTANCE",
            "STANDARD",
            "PARAM",
            "PARTITION",
            "OTHER",
            "FORK",
            "CONTAINER_SERVICE",
            "CLUSTER",
            "AWS_LAMBDA_FUNCTION",
            "AMI_SERVICE_SETUP",
            "AMI_SERVICE_DEPLOY",
            "ECS_SERVICE_SETUP",
            "AMI_SWITCH_ROUTES",
            "PCF_SERVICE_SETUP",
            "PCF_SERVICE_DEPLOY",
            "PCF_ROUTE_SWAP_ROLLBACK",
            "PCF_INSTANCE",
            "SPOTINST_SERVICE_SETUP",
            "SPOTINST_SERVICE_DEPLOY",
            "ARTIFACT",
            "ARTIFACT_VARIABLE",
            "HELM_DEPLOY",
            "CLOUD_FORMATION_PROVISION",
            "CLOUD_FORMATION_ROLLBACK",
            "CLOUD_FORMATION_DEPROVISION",
            "TERRAFORM_PROVISION",
            "SHELL_SCRIPT_PROVISION",
            "K8S",
            "TERRAFORM_INHERIT_PLAN",
            "TERRAGRUNT_INHERIT_PLAN",
            "AZURE_VMSS_SETUP",
            "AZURE_WEBAPP_SETUP",
            "HELM_CHART",
            "MANIFEST_VARIABLE"
          ]
        }
      }
    },
    "DOMConfiguration": {
      "type": "object",
      "properties": {
        "parameterNames": {
          "$ref": "#/definitions/DOMStringList"
        }
      }
    },
    "DOMImplementation": {
      "type": "object"
    },
    "DOMStringList": {
      "type": "object",
      "properties": {
        "length": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "DelegateMetaInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "hostName": {
          "type": "string"
        }
      }
    },
    "DelegateResponseData": {
      "type": "object",
      "discriminator": "@class"
    },
    "Document": {
      "type": "object",
      "properties": {
        "implementation": {
          "$ref": "#/definitions/DOMImplementation"
        },
        "doctype": {
          "$ref": "#/definitions/DocumentType"
        },
        "documentElement": {
          "$ref": "#/definitions/Element"
        },
        "inputEncoding": {
          "type": "string"
        },
        "xmlEncoding": {
          "type": "string"
        },
        "xmlStandalone": {
          "type": "boolean"
        },
        "xmlVersion": {
          "type": "string"
        },
        "strictErrorChecking": {
          "type": "boolean"
        },
        "documentURI": {
          "type": "string"
        },
        "domConfig": {
          "$ref": "#/definitions/DOMConfiguration"
        },
        "nodeType": {
          "type": "integer",
          "format": "int32"
        },
        "attributes": {
          "$ref": "#/definitions/NamedNodeMap"
        },
        "prefix": {
          "type": "string"
        },
        "namespaceURI": {
          "type": "string"
        },
        "localName": {
          "type": "string"
        },
        "nodeName": {
          "type": "string"
        },
        "nodeValue": {
          "type": "string"
        },
        "parentNode": {
          "$ref": "#/definitions/Node"
        },
        "childNodes": {
          "$ref": "#/definitions/NodeList"
        },
        "firstChild": {
          "$ref": "#/definitions/Node"
        },
        "lastChild": {
          "$ref": "#/definitions/Node"
        },
        "previousSibling": {
          "$ref": "#/definitions/Node"
        },
        "nextSibling": {
          "$ref": "#/definitions/Node"
        },
        "ownerDocument": {
          "$ref": "#/definitions/Document"
        },
        "baseURI": {
          "type": "string"
        },
        "textContent": {
          "type": "string"
        }
      }
    },
    "DocumentType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "publicId": {
          "type": "string"
        },
        "systemId": {
          "type": "string"
        },
        "entities": {
          "$ref": "#/definitions/NamedNodeMap"
        },
        "notations": {
          "$ref": "#/definitions/NamedNodeMap"
        },
        "internalSubset": {
          "type": "string"
        },
        "nodeType": {
          "type": "integer",
          "format": "int32"
        },
        "attributes": {
          "$ref": "#/definitions/NamedNodeMap"
        },
        "prefix": {
          "type": "string"
        },
        "namespaceURI": {
          "type": "string"
        },
        "localName": {
          "type": "string"
        },
        "nodeName": {
          "type": "string"
        },
        "nodeValue": {
          "type": "string"
        },
        "parentNode": {
          "$ref": "#/definitions/Node"
        },
        "childNodes": {
          "$ref": "#/definitions/NodeList"
        },
        "firstChild": {
          "$ref": "#/definitions/Node"
        },
        "lastChild": {
          "$ref": "#/definitions/Node"
        },
        "previousSibling": {
          "$ref": "#/definitions/Node"
        },
        "nextSibling": {
          "$ref": "#/definitions/Node"
        },
        "ownerDocument": {
          "$ref": "#/definitions/Document"
        },
        "baseURI": {
          "type": "string"
        },
        "textContent": {
          "type": "string"
        }
      }
    },
    "Element": {
      "type": "object",
      "properties": {
        "tagName": {
          "type": "string"
        },
        "schemaTypeInfo": {
          "$ref": "#/definitions/TypeInfo"
        },
        "nodeType": {
          "type": "integer",
          "format": "int32"
        },
        "attributes": {
          "$ref": "#/definitions/NamedNodeMap"
        },
        "prefix": {
          "type": "string"
        },
        "namespaceURI": {
          "type": "string"
        },
        "localName": {
          "type": "string"
        },
        "nodeName": {
          "type": "string"
        },
        "nodeValue": {
          "type": "string"
        },
        "parentNode": {
          "$ref": "#/definitions/Node"
        },
        "childNodes": {
          "$ref": "#/definitions/NodeList"
        },
        "firstChild": {
          "$ref": "#/definitions/Node"
        },
        "lastChild": {
          "$ref": "#/definitions/Node"
        },
        "previousSibling": {
          "$ref": "#/definitions/Node"
        },
        "nextSibling": {
          "$ref": "#/definitions/Node"
        },
        "ownerDocument": {
          "$ref": "#/definitions/Document"
        },
        "baseURI": {
          "type": "string"
        },
        "textContent": {
          "type": "string"
        }
      }
    },
    "ExecutionDataValue": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string"
        },
        "value": {
          "type": "object"
        }
      }
    },
    "HttpStateExecutionData": {
      "allOf": [
        {
          "$ref": "#/definitions/DelegateResponseData"
        },
        {
          "type": "object",
          "properties": {
            "httpUrl": {
              "type": "string"
            },
            "httpMethod": {
              "type": "string"
            },
            "httpResponseCode": {
              "type": "integer",
              "format": "int32"
            },
            "httpResponseBody": {
              "type": "string"
            },
            "assertionStatement": {
              "type": "string"
            },
            "assertionStatus": {
              "type": "string"
            },
            "header": {
              "type": "string"
            },
            "headers": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/KeyValuePair"
              }
            },
            "useProxy": {
              "type": "boolean"
            },
            "warningMessage": {
              "type": "string"
            },
            "document": {
              "$ref": "#/definitions/Document"
            },
            "stateName": {
              "type": "string"
            },
            "stateType": {
              "type": "string"
            },
            "startTs": {
              "type": "integer",
              "format": "int64"
            },
            "endTs": {
              "type": "integer",
              "format": "int64"
            },
            "status": {
              "type": "string",
              "enum": [
                "ABORTED",
                "DISCONTINUING",
                "ERROR",
                "FAILED",
                "NEW",
                "PAUSED",
                "PAUSING",
                "QUEUED",
                "RESUMED",
                "RUNNING",
                "SCHEDULED",
                "STARTING",
                "SUCCESS",
                "WAITING",
                "SKIPPED",
                "ABORTING",
                "REJECTED",
                "EXPIRED",
                "PREPARING"
              ]
            },
            "errorMsg": {
              "type": "string"
            },
            "waitInterval": {
              "type": "integer",
              "format": "int32"
            },
            "element": {
              "$ref": "#/definitions/ContextElement"
            },
            "stateParams": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            },
            "delegateMetaInfo": {
              "$ref": "#/definitions/DelegateMetaInfo"
            },
            "templateVariable": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            },
            "type": {
              "type": "string"
            },
            "executionSummary": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ExecutionDataValue"
              }
            },
            "executionDetails": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ExecutionDataValue"
              }
            }
          }
        }
      ]
    },
    "KeyValuePair": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "NamedNodeMap": {
      "type": "object",
      "properties": {
        "length": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Node": {
      "type": "object",
      "properties": {
        "nodeType": {
          "type": "integer",
          "format": "int32"
        },
        "attributes": {
          "$ref": "#/definitions/NamedNodeMap"
        },
        "prefix": {
          "type": "string"
        },
        "namespaceURI": {
          "type": "string"
        },
        "localName": {
          "type": "string"
        },
        "nodeName": {
          "type": "string"
        },
        "nodeValue": {
          "type": "string"
        },
        "parentNode": {
          "$ref": "#/definitions/Node"
        },
        "childNodes": {
          "$ref": "#/definitions/NodeList"
        },
        "firstChild": {
          "$ref": "#/definitions/Node"
        },
        "lastChild": {
          "$ref": "#/definitions/Node"
        },
        "previousSibling": {
          "$ref": "#/definitions/Node"
        },
        "nextSibling": {
          "$ref": "#/definitions/Node"
        },
        "ownerDocument": {
          "$ref": "#/definitions/Document"
        },
        "baseURI": {
          "type": "string"
        },
        "textContent": {
          "type": "string"
        }
      }
    },
    "NodeList": {
      "type": "object",
      "properties": {
        "length": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ScriptStateExecutionData": {
      "allOf": [
        {
          "$ref": "#/definitions/DelegateResponseData"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "activityId": {
              "type": "string"
            },
            "sweepingOutputEnvVariables": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "secretOutputVars": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "stateName": {
              "type": "string"
            },
            "stateType": {
              "type": "string"
            },
            "startTs": {
              "type": "integer",
              "format": "int64"
            },
            "endTs": {
              "type": "integer",
              "format": "int64"
            },
            "status": {
              "type": "string",
              "enum": [
                "ABORTED",
                "DISCONTINUING",
                "ERROR",
                "FAILED",
                "NEW",
                "PAUSED",
                "PAUSING",
                "QUEUED",
                "RESUMED",
                "RUNNING",
                "SCHEDULED",
                "STARTING",
                "SUCCESS",
                "WAITING",
                "SKIPPED",
                "ABORTING",
                "REJECTED",
                "EXPIRED",
                "PREPARING"
              ]
            },
            "errorMsg": {
              "type": "string"
            },
            "waitInterval": {
              "type": "integer",
              "format": "int32"
            },
            "element": {
              "$ref": "#/definitions/ContextElement"
            },
            "stateParams": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            },
            "delegateMetaInfo": {
              "$ref": "#/definitions/DelegateMetaInfo"
            },
            "templateVariable": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            },
            "type": {
              "type": "string"
            },
            "executionSummary": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ExecutionDataValue"
              }
            },
            "executionDetails": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ExecutionDataValue"
              }
            }
          }
        }
      ]
    },
    "TypeInfo": {
      "type": "object",
      "properties": {
        "typeName": {
          "type": "string"
        },
        "typeNamespace": {
          "type": "string"
        }
      }
    },
    "EntitySetupUsageDTO": {
      "type": "object",
      "required": ["referredByEntity"],
      "properties": {
        "accountIdentifier": {
          "type": "string"
        },
        "referredEntity": {
          "$ref": "#/definitions/EntityDetail"
        },
        "referredByEntity": {
          "$ref": "#/definitions/EntityDetail"
        },
        "detail": {
          "$ref": "#/definitions/SetupUsageDetail"
        },
        "createdAt": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PageEntitySetupUsageDTO": {
      "type": "object",
      "properties": {
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntitySetupUsageDTO"
          }
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "last": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "empty": {
          "type": "boolean"
        }
      }
    },
    "ResponsePageEntitySetupUsageDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PageEntitySetupUsageDTO"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "SecretReferredByConnectorSetupUsageDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/SetupUsageDetail"
        },
        {
          "type": "object",
          "properties": {
            "fieldName": {
              "type": "string"
            }
          }
        }
      ]
    },
    "SetupUsageDetail": {
      "type": "object",
      "discriminator": "type"
    },
    "EnvironmentResponseDTO": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "orgIdentifier": {
          "type": "string"
        },
        "projectIdentifier": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["PreProduction", "Production"]
        },
        "deleted": {
          "type": "boolean"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "version": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ResponseEnvironmentResponseDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/EnvironmentResponseDTO"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "EnvironmentRequestDTO": {
      "type": "object",
      "required": ["identifier", "orgIdentifier", "projectIdentifier", "type"],
      "properties": {
        "orgIdentifier": {
          "type": "string"
        },
        "projectIdentifier": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["PreProduction", "Production"]
        },
        "version": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PageEnvironmentResponseDTO": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int64"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64"
        },
        "pageItemCount": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EnvironmentResponseDTO"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int64"
        },
        "empty": {
          "type": "boolean"
        }
      }
    },
    "ResponsePageEnvironmentResponseDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PageEnvironmentResponseDTO"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "EnvironmentResponse": {
      "type": "object",
      "properties": {
        "environment": {
          "$ref": "#/definitions/EnvironmentResponseDTO"
        },
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "lastModifiedAt": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ResponseEnvironmentResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/EnvironmentResponse"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "PageEnvironmentResponse": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int64"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64"
        },
        "pageItemCount": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EnvironmentResponse"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int64"
        },
        "empty": {
          "type": "boolean"
        }
      }
    },
    "ResponsePageEnvironmentResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PageEnvironmentResponse"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "Invite": {
      "type": "object",
      "required": ["email", "id", "inviteType", "name", "roleBindings"],
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "roleBindings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RoleBinding"
          }
        },
        "inviteType": {
          "type": "string",
          "enum": ["USER_INITIATED_INVITE", "ADMIN_INITIATED_INVITE"]
        },
        "approved": {
          "type": "boolean"
        }
      }
    },
    "ResponseOptionalInvite": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/Invite"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ResponseListInviteOperationResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "ACCOUNT_INVITE_ACCEPTED_NEED_PASSWORD",
              "ACCOUNT_INVITE_ACCEPTED",
              "USER_INVITED_SUCCESSFULLY",
              "USER_ALREADY_ADDED",
              "USER_ALREADY_INVITED",
              "FAIL"
            ]
          }
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "CreateInvite": {
      "type": "object",
      "required": ["inviteType", "roleBindings", "users"],
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "maxItems": 100,
          "minItems": 0
        },
        "roleBindings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RoleBinding"
          }
        },
        "inviteType": {
          "type": "string",
          "enum": ["USER_INITIATED_INVITE", "ADMIN_INITIATED_INVITE"]
        }
      }
    },
    "PageInvite": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int64"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64"
        },
        "pageItemCount": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Invite"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int64"
        },
        "empty": {
          "type": "boolean"
        }
      }
    },
    "ResponsePageInvite": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PageInvite"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "GcpResponseDTO": {
      "type": "object",
      "properties": {
        "clusterNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ResponseGcpResponseDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/GcpResponseDTO"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "Organization": {
      "type": "object",
      "required": ["identifier", "name"],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string",
          "minLength": 0,
          "maxLength": 1024
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "OrganizationAggregateDTO": {
      "type": "object",
      "required": ["organizationResponse"],
      "properties": {
        "organizationResponse": {
          "$ref": "#/definitions/OrganizationResponse"
        },
        "projectsCount": {
          "type": "integer",
          "format": "int32"
        },
        "admins": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserSearchDTO"
          }
        },
        "collaborators": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserSearchDTO"
          }
        }
      }
    },
    "OrganizationResponse": {
      "type": "object",
      "required": ["organization"],
      "properties": {
        "organization": {
          "$ref": "#/definitions/Organization"
        },
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "lastModifiedAt": {
          "type": "integer",
          "format": "int64"
        },
        "harnessManaged": {
          "type": "boolean"
        }
      }
    },
    "ResponseOrganizationAggregateDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/OrganizationAggregateDTO"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "Project": {
      "type": "object",
      "required": ["identifier", "name"],
      "properties": {
        "orgIdentifier": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "modules": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["CD", "CI", "CORE", "CV", "CF", "CE"]
          },
          "maxItems": 1024,
          "minItems": 0
        },
        "description": {
          "type": "string",
          "minLength": 0,
          "maxLength": 1024
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ProjectAggregateDTO": {
      "type": "object",
      "required": ["projectResponse"],
      "properties": {
        "projectResponse": {
          "$ref": "#/definitions/ProjectResponse"
        },
        "organization": {
          "$ref": "#/definitions/Organization"
        },
        "harnessManagedOrg": {
          "type": "boolean"
        },
        "admins": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserSearchDTO"
          }
        },
        "collaborators": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserSearchDTO"
          }
        }
      }
    },
    "ProjectResponse": {
      "type": "object",
      "required": ["project"],
      "properties": {
        "project": {
          "$ref": "#/definitions/Project"
        },
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "lastModifiedAt": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ResponseProjectAggregateDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/ProjectAggregateDTO"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "EmailConfigDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/NotificationSettingConfigDTO"
        },
        {
          "type": "object",
          "required": ["groupEmail"],
          "properties": {
            "groupEmail": {
              "type": "string"
            }
          }
        }
      ]
    },
    "MicrosoftTeamsConfigDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/NotificationSettingConfigDTO"
        },
        {
          "type": "object",
          "required": ["microsoftTeamsWebhookUrl"],
          "properties": {
            "microsoftTeamsWebhookUrl": {
              "type": "string"
            }
          }
        }
      ]
    },
    "NotificationSettingConfigDTO": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["EMAIL", "SLACK", "PAGERDUTY", "MSTEAMS"]
        }
      }
    },
    "PageUserGroupAggregateDTO": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int64"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64"
        },
        "pageItemCount": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserGroupAggregateDTO"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int64"
        },
        "empty": {
          "type": "boolean"
        }
      }
    },
    "PagerDutyConfigDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/NotificationSettingConfigDTO"
        },
        {
          "type": "object",
          "required": ["pagerDutyKey"],
          "properties": {
            "pagerDutyKey": {
              "type": "string"
            }
          }
        }
      ]
    },
    "ResponsePageUserGroupAggregateDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PageUserGroupAggregateDTO"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "RoleAssignmentMetadataDTO": {
      "type": "object",
      "required": [
        "identifier",
        "managedRole",
        "resourceGroupIdentifier",
        "resourceGroupName",
        "roleIdentifier",
        "roleName"
      ],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "roleIdentifier": {
          "type": "string"
        },
        "roleName": {
          "type": "string"
        },
        "resourceGroupIdentifier": {
          "type": "string"
        },
        "resourceGroupName": {
          "type": "string"
        },
        "managedRole": {
          "type": "boolean"
        }
      }
    },
    "SlackConfigDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/NotificationSettingConfigDTO"
        },
        {
          "type": "object",
          "required": ["slackWebhookUrl"],
          "properties": {
            "slackWebhookUrl": {
              "type": "string"
            }
          }
        }
      ]
    },
    "UserGroupAggregateDTO": {
      "type": "object",
      "required": ["userGroupDTO"],
      "properties": {
        "userGroupDTO": {
          "$ref": "#/definitions/UserGroupDTO"
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserSearchDTO"
          }
        },
        "roleAssignmentsMetadataDTO": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RoleAssignmentMetadataDTO"
          }
        }
      }
    },
    "UserGroupDTO": {
      "type": "object",
      "properties": {
        "accountIdentifier": {
          "type": "string"
        },
        "orgIdentifier": {
          "type": "string"
        },
        "projectIdentifier": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "users": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "notificationConfigs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NotificationSettingConfigDTO"
          }
        },
        "description": {
          "type": "string",
          "minLength": 0,
          "maxLength": 1024
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "lastModifiedAt": {
          "type": "integer",
          "format": "int64"
        },
        "version": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ResponseListUserGroupAggregateDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserGroupAggregateDTO"
          }
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "AggregateACLRequest": {
      "type": "object",
      "properties": {
        "searchTerm": {
          "type": "string"
        },
        "resourceGroupFilter": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "roleFilter": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ResponseUserGroupAggregateDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/UserGroupAggregateDTO"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "PageOrganizationAggregateDTO": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int64"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64"
        },
        "pageItemCount": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrganizationAggregateDTO"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int64"
        },
        "empty": {
          "type": "boolean"
        }
      }
    },
    "ResponsePageOrganizationAggregateDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PageOrganizationAggregateDTO"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "PageProjectAggregateDTO": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int64"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64"
        },
        "pageItemCount": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectAggregateDTO"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int64"
        },
        "empty": {
          "type": "boolean"
        }
      }
    },
    "ResponsePageProjectAggregateDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PageProjectAggregateDTO"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "SecretFileDTO": {
      "type": "object",
      "required": ["type"],
      "properties": {
        "account": {
          "type": "string"
        },
        "org": {
          "type": "string"
        },
        "project": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "secretManager": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["SecretFile", "SecretText", "SSHKey"]
        }
      }
    },
    "EncryptedDataDTO": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["SecretFile", "SecretText", "SSHKey"]
        },
        "valueType": {
          "type": "string",
          "enum": ["Inline", "Reference"]
        },
        "value": {
          "type": "string"
        },
        "draft": {
          "type": "boolean"
        },
        "account": {
          "type": "string"
        },
        "org": {
          "type": "string"
        },
        "project": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "secretManager": {
          "type": "string"
        },
        "secretManagerName": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "encryptionType": {
          "type": "string",
          "enum": [
            "LOCAL",
            "KMS",
            "GCP_KMS",
            "AWS_SECRETS_MANAGER",
            "AZURE_VAULT",
            "CYBERARK",
            "VAULT",
            "GCP_SECRETS_MANAGER",
            "CUSTOM",
            "VAULT_SSH"
          ]
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "lastUpdatedAt": {
          "type": "integer",
          "format": "int64"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "ResponseEncryptedDataDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/EncryptedDataDTO"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ResponseSecretManagerMetadataDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/SecretManagerMetadataDTO"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "SecretManagerMetadataDTO": {
      "type": "object",
      "properties": {
        "encryptionType": {
          "type": "string",
          "enum": [
            "LOCAL",
            "KMS",
            "GCP_KMS",
            "AWS_SECRETS_MANAGER",
            "AZURE_VAULT",
            "CYBERARK",
            "VAULT",
            "GCP_SECRETS_MANAGER",
            "CUSTOM",
            "VAULT_SSH"
          ]
        },
        "spec": {
          "$ref": "#/definitions/SecretManagerMetadataSpecDTO"
        }
      }
    },
    "SecretManagerMetadataSpecDTO": {
      "type": "object",
      "discriminator": "encryptionType"
    },
    "VaultMetadataSpecDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/SecretManagerMetadataSpecDTO"
        },
        {
          "type": "object",
          "properties": {
            "secretEngines": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VaultSecretEngineDTO"
              }
            }
          }
        }
      ]
    },
    "VaultSecretEngineDTO": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "SecretManagerMetadataRequestDTO": {
      "type": "object",
      "required": ["encryptionType", "identifier", "spec"],
      "properties": {
        "encryptionType": {
          "type": "string",
          "enum": [
            "LOCAL",
            "KMS",
            "GCP_KMS",
            "AWS_SECRETS_MANAGER",
            "AZURE_VAULT",
            "CYBERARK",
            "VAULT",
            "GCP_SECRETS_MANAGER",
            "CUSTOM",
            "VAULT_SSH"
          ]
        },
        "orgIdentifier": {
          "type": "string"
        },
        "projectIdentifier": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "spec": {
          "$ref": "#/definitions/SecretManagerMetadataRequestSpecDTO"
        }
      }
    },
    "SecretManagerMetadataRequestSpecDTO": {
      "type": "object",
      "discriminator": "encryptionType"
    },
    "VaultAppRoleCredentialDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/VaultCredentialDTO"
        },
        {
          "type": "object",
          "properties": {
            "appRoleId": {
              "type": "string"
            },
            "secretId": {
              "type": "string"
            }
          }
        }
      ]
    },
    "VaultAuthTokenCredentialDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/VaultCredentialDTO"
        },
        {
          "type": "object",
          "properties": {
            "authToken": {
              "type": "string"
            }
          }
        }
      ]
    },
    "VaultCredentialDTO": {
      "type": "object",
      "discriminator": "accessType"
    },
    "VaultMetadataRequestSpecDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/SecretManagerMetadataRequestSpecDTO"
        },
        {
          "type": "object",
          "required": ["accessType", "url"],
          "properties": {
            "url": {
              "type": "string"
            },
            "accessType": {
              "type": "string",
              "enum": ["APP_ROLE", "TOKEN"]
            },
            "spec": {
              "$ref": "#/definitions/VaultCredentialDTO"
            }
          }
        }
      ]
    },
    "PageEncryptedDataDTO": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int64"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64"
        },
        "pageItemCount": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EncryptedDataDTO"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int64"
        },
        "empty": {
          "type": "boolean"
        }
      }
    },
    "ResponsePageEncryptedDataDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PageEncryptedDataDTO"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "SecretTextDTO": {
      "type": "object",
      "required": ["type", "valueType"],
      "properties": {
        "account": {
          "type": "string"
        },
        "org": {
          "type": "string"
        },
        "project": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "secretManager": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["SecretFile", "SecretText", "SSHKey"]
        },
        "valueType": {
          "type": "string",
          "enum": ["Inline", "Reference"]
        },
        "value": {
          "type": "string"
        }
      }
    },
    "BaseSSHSpecDTO": {
      "type": "object",
      "discriminator": "type"
    },
    "KerberosConfigDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseSSHSpecDTO"
        },
        {
          "type": "object",
          "required": ["principal", "realm"],
          "properties": {
            "principal": {
              "type": "string"
            },
            "realm": {
              "type": "string"
            },
            "tgtGenerationMethod": {
              "type": "string",
              "enum": ["KeyTabFilePath", "Password"]
            },
            "spec": {
              "$ref": "#/definitions/TGTGenerationSpecDTO"
            }
          }
        }
      ]
    },
    "ResponseSecretResponseWrapper": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/SecretResponseWrapper"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "SSHAuthDTO": {
      "type": "object",
      "required": ["spec", "type"],
      "properties": {
        "spec": {
          "$ref": "#/definitions/BaseSSHSpecDTO"
        },
        "type": {
          "type": "string",
          "enum": ["SSH", "Kerberos"]
        }
      }
    },
    "SSHConfigDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseSSHSpecDTO"
        },
        {
          "type": "object",
          "required": ["credentialType", "spec"],
          "properties": {
            "credentialType": {
              "type": "string",
              "enum": ["Password", "KeyPath", "KeyReference"]
            },
            "spec": {
              "$ref": "#/definitions/SSHCredentialSpecDTO"
            }
          }
        }
      ]
    },
    "SSHCredentialSpecDTO": {
      "type": "object",
      "discriminator": "credentialType"
    },
    "SSHKeyPathCredentialDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/SSHCredentialSpecDTO"
        },
        {
          "type": "object",
          "required": ["keyPath", "userName"],
          "properties": {
            "userName": {
              "type": "string"
            },
            "keyPath": {
              "type": "string"
            },
            "encryptedPassphrase": {
              "type": "string"
            }
          }
        }
      ]
    },
    "SSHKeyReferenceCredentialDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/SSHCredentialSpecDTO"
        },
        {
          "type": "object",
          "required": ["userName"],
          "properties": {
            "userName": {
              "type": "string"
            },
            "key": {
              "type": "string"
            },
            "encryptedPassphrase": {
              "type": "string"
            }
          }
        }
      ]
    },
    "SSHKeySpecDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/SecretSpecDTO"
        },
        {
          "type": "object",
          "required": ["auth"],
          "properties": {
            "port": {
              "type": "integer",
              "format": "int32"
            },
            "auth": {
              "$ref": "#/definitions/SSHAuthDTO"
            }
          }
        }
      ]
    },
    "SSHPasswordCredentialDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/SSHCredentialSpecDTO"
        },
        {
          "type": "object",
          "required": ["password", "userName"],
          "properties": {
            "userName": {
              "type": "string"
            },
            "password": {
              "type": "string"
            }
          }
        }
      ]
    },
    "SecretDTOV2": {
      "type": "object",
      "required": ["identifier", "name", "spec", "type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["SecretFile", "SecretText", "SSHKey"]
        },
        "name": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "orgIdentifier": {
          "type": "string"
        },
        "projectIdentifier": {
          "type": "string"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "description": {
          "type": "string"
        },
        "spec": {
          "$ref": "#/definitions/SecretSpecDTO"
        }
      }
    },
    "SecretFileSpecDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/SecretSpecDTO"
        },
        {
          "type": "object",
          "required": ["secretManagerIdentifier"],
          "properties": {
            "secretManagerIdentifier": {
              "type": "string"
            }
          }
        }
      ]
    },
    "SecretResponseWrapper": {
      "type": "object",
      "required": ["secret"],
      "properties": {
        "secret": {
          "$ref": "#/definitions/SecretDTOV2"
        },
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "updatedAt": {
          "type": "integer",
          "format": "int64"
        },
        "draft": {
          "type": "boolean"
        }
      }
    },
    "SecretSpecDTO": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "errorMessageForInvalidYaml": {
          "type": "string"
        }
      }
    },
    "SecretTextSpecDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/SecretSpecDTO"
        },
        {
          "type": "object",
          "required": ["secretManagerIdentifier", "valueType"],
          "properties": {
            "secretManagerIdentifier": {
              "type": "string"
            },
            "valueType": {
              "type": "string",
              "enum": ["Inline", "Reference"]
            },
            "value": {
              "type": "string"
            }
          }
        }
      ]
    },
    "TGTGenerationSpecDTO": {
      "type": "object",
      "discriminator": "tgtGenerationMethod"
    },
    "TGTKeyTabFilePathSpecDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/TGTGenerationSpecDTO"
        },
        {
          "type": "object",
          "properties": {
            "keyPath": {
              "type": "string"
            }
          }
        }
      ]
    },
    "TGTPasswordSpecDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/TGTGenerationSpecDTO"
        },
        {
          "type": "object",
          "properties": {
            "password": {
              "type": "string"
            }
          }
        }
      ]
    },
    "SecretRequestWrapper": {
      "type": "object",
      "required": ["secret"],
      "properties": {
        "secret": {
          "$ref": "#/definitions/SecretDTOV2"
        }
      }
    },
    "PageSecretResponseWrapper": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int64"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64"
        },
        "pageItemCount": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SecretResponseWrapper"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int64"
        },
        "empty": {
          "type": "boolean"
        }
      }
    },
    "ResponsePageSecretResponseWrapper": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PageSecretResponseWrapper"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ResponseSecretValidationResultDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/SecretValidationResultDTO"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "SecretValidationResultDTO": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "SSHKeyValidationMetadata": {
      "allOf": [
        {
          "$ref": "#/definitions/SecretValidationMetaData"
        },
        {
          "type": "object",
          "required": ["host"],
          "properties": {
            "host": {
              "type": "string"
            }
          }
        }
      ]
    },
    "SecretValidationMetaData": {
      "type": "object",
      "required": ["type"],
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["SecretFile", "SecretText", "SSHKey"]
        }
      }
    },
    "ResponseOrganizationResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/OrganizationResponse"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "OrganizationRequest": {
      "type": "object",
      "required": ["organization"],
      "properties": {
        "organization": {
          "$ref": "#/definitions/Organization"
        }
      }
    },
    "PageOrganizationResponse": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int64"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64"
        },
        "pageItemCount": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrganizationResponse"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int64"
        },
        "empty": {
          "type": "boolean"
        }
      }
    },
    "ResponsePageOrganizationResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PageOrganizationResponse"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ResponseProjectResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/ProjectResponse"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ProjectRequest": {
      "type": "object",
      "required": ["project"],
      "properties": {
        "project": {
          "$ref": "#/definitions/Project"
        }
      }
    },
    "PageProjectResponse": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int64"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64"
        },
        "pageItemCount": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectResponse"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int64"
        },
        "empty": {
          "type": "boolean"
        }
      }
    },
    "ResponsePageProjectResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PageProjectResponse"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ResponseUserGroupDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/UserGroupDTO"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ResponseListUserGroupDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserGroupDTO"
          }
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "UserGroupFilterDTO": {
      "type": "object",
      "properties": {
        "databaseIdFilter": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "identifierFilter": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "userIdentifierFilter": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "accountIdentifier": {
          "type": "string"
        },
        "orgIdentifier": {
          "type": "string"
        },
        "projectIdentifier": {
          "type": "string"
        }
      }
    },
    "PageUserGroupDTO": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int64"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64"
        },
        "pageItemCount": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserGroupDTO"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int64"
        },
        "empty": {
          "type": "boolean"
        }
      }
    },
    "ResponsePageUserGroupDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PageUserGroupDTO"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ResponseServiceResponseDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/ServiceResponseDTO"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ServiceResponseDTO": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "orgIdentifier": {
          "type": "string"
        },
        "projectIdentifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "deleted": {
          "type": "boolean"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "version": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ServiceRequestDTO": {
      "type": "object",
      "required": ["identifier", "orgIdentifier", "projectIdentifier"],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "orgIdentifier": {
          "type": "string"
        },
        "projectIdentifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "version": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PageServiceResponseDTO": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int64"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64"
        },
        "pageItemCount": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceResponseDTO"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int64"
        },
        "empty": {
          "type": "boolean"
        }
      }
    },
    "ResponsePageServiceResponseDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PageServiceResponseDTO"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ResponseServiceResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/ServiceResponse"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ServiceResponse": {
      "type": "object",
      "properties": {
        "service": {
          "$ref": "#/definitions/ServiceResponseDTO"
        },
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "lastModifiedAt": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PageServiceResponse": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int64"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64"
        },
        "pageItemCount": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceResponse"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int64"
        },
        "empty": {
          "type": "boolean"
        }
      }
    },
    "ResponsePageServiceResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PageServiceResponse"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "PageUserSearchDTO": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int64"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64"
        },
        "pageItemCount": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserSearchDTO"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int64"
        },
        "empty": {
          "type": "boolean"
        }
      }
    },
    "ResponsePageUserSearchDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PageUserSearchDTO"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "PageProject": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int64"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64"
        },
        "pageItemCount": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Project"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int64"
        },
        "empty": {
          "type": "boolean"
        }
      }
    },
    "ResponsePageProject": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PageProject"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ResponsePipelineExecutionInterrupt": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/pipelineExecutionInterrupt"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "pipelineExecutionInterrupt": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["Abort", "Pause", "Resume"]
        },
        "planExecutionId": {
          "type": "string"
        }
      }
    },
    "ArtifactSummary": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        }
      }
    },
    "ArtifactsSummary": {
      "type": "object",
      "properties": {
        "primary": {
          "$ref": "#/definitions/ArtifactSummary"
        },
        "sidecars": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ArtifactSummary"
          }
        }
      }
    },
    "CDStageExecutionSummaryDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/StageExecutionSummaryDTO"
        },
        {
          "type": "object",
          "properties": {
            "planExecutionId": {
              "type": "string"
            },
            "stageIdentifier": {
              "type": "string"
            },
            "serviceInfo": {
              "$ref": "#/definitions/ServiceExecutionSummary"
            },
            "stageName": {
              "type": "string"
            },
            "serviceDefinitionType": {
              "type": "string"
            },
            "executionStatus": {
              "type": "string",
              "enum": [
                "Running",
                "Failed",
                "NotStarted",
                "Expired",
                "Aborted",
                "Queued",
                "Paused",
                "Waiting",
                "Success",
                "Suspended",
                "Skipped",
                "Pausing"
              ]
            },
            "startedAt": {
              "type": "integer",
              "format": "int64"
            },
            "endedAt": {
              "type": "integer",
              "format": "int64"
            },
            "serviceIdentifier": {
              "type": "string"
            },
            "envIdentifier": {
              "type": "string"
            },
            "errorInfo": {
              "$ref": "#/definitions/ExecutionErrorInfo"
            }
          }
        }
      ]
    },
    "ExecutionErrorInfo": {
      "type": "object",
      "properties": {
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "message": {
          "type": "string"
        },
        "initialized": {
          "type": "boolean"
        },
        "serializedSize": {
          "type": "integer",
          "format": "int32"
        },
        "parserForType": {
          "$ref": "#/definitions/ParserExecutionErrorInfo"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/ExecutionErrorInfo"
        },
        "messageBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "NGStageType": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        }
      }
    },
    "PagePipelineExecutionSummaryDTO": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int64"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64"
        },
        "pageItemCount": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PipelineExecutionSummaryDTO"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int64"
        },
        "empty": {
          "type": "boolean"
        }
      }
    },
    "ParallelStageExecutionSummaryDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/StageExecutionSummaryDTO"
        },
        {
          "type": "object",
          "properties": {
            "stageExecutions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StageExecutionSummaryDTO"
              }
            }
          }
        }
      ]
    },
    "ParserExecutionErrorInfo": {
      "type": "object"
    },
    "PipelineExecutionSummaryDTO": {
      "type": "object",
      "properties": {
        "pipelineIdentifier": {
          "type": "string"
        },
        "pipelineName": {
          "type": "string"
        },
        "deploymentId": {
          "type": "string"
        },
        "planExecutionId": {
          "type": "string"
        },
        "executionStatus": {
          "type": "string",
          "enum": [
            "Running",
            "Failed",
            "NotStarted",
            "Expired",
            "Aborted",
            "Queued",
            "Paused",
            "Waiting",
            "Success",
            "Suspended",
            "Skipped",
            "Pausing"
          ]
        },
        "inputSetYaml": {
          "type": "string"
        },
        "startedAt": {
          "type": "integer",
          "format": "int64"
        },
        "endedAt": {
          "type": "integer",
          "format": "int64"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "stageExecutionSummaryElements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StageExecutionSummaryDTO"
          }
        },
        "errorMsg": {
          "type": "string"
        },
        "stageIdentifiers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "serviceIdentifiers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "envIdentifiers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "serviceDefinitionTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "stageTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NGStageType"
          }
        },
        "errorInfo": {
          "$ref": "#/definitions/ExecutionErrorInfo"
        },
        "triggerInfo": {
          "$ref": "#/definitions/ExecutionTriggerInfo"
        },
        "successfulStagesCount": {
          "type": "integer",
          "format": "int64"
        },
        "runningStagesCount": {
          "type": "integer",
          "format": "int64"
        },
        "failedStagesCount": {
          "type": "integer",
          "format": "int64"
        },
        "totalStagesCount": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ResponsePagePipelineExecutionSummaryDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PagePipelineExecutionSummaryDTO"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ServiceExecutionSummary": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "deploymentType": {
          "type": "string"
        },
        "artifacts": {
          "$ref": "#/definitions/ArtifactsSummary"
        }
      }
    },
    "StageExecutionSummaryDTO": {
      "type": "object"
    },
    "CDStageModuleInfo": {
      "type": "object",
      "properties": {
        "serviceInfo": {
          "$ref": "#/definitions/ServiceExecutionSummary"
        },
        "infraExecutionSummary": {
          "$ref": "#/definitions/InfraExecutionSummary"
        },
        "nodeExecutionId": {
          "type": "string"
        }
      }
    },
    "InfraExecutionSummary": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "ResponseCDStageModuleInfo": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/CDStageModuleInfo"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "CDPipelineModuleInfo": {
      "type": "object",
      "properties": {
        "serviceIdentifiers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "envIdentifiers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "serviceDefinitionTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "environmentTypes": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["PreProduction", "Production"]
          }
        },
        "infrastructureTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ResponseCDPipelineModuleInfo": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/CDPipelineModuleInfo"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "AdviserIssuer": {
      "type": "object",
      "properties": {
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "initialized": {
          "type": "boolean"
        },
        "serializedSize": {
          "type": "integer",
          "format": "int32"
        },
        "parserForType": {
          "$ref": "#/definitions/ParserAdviserIssuer"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/AdviserIssuer"
        },
        "adviserTypeValue": {
          "type": "integer",
          "format": "int32"
        },
        "adviserType": {
          "type": "string",
          "enum": [
            "UNKNOWN",
            "NEXT_STEP",
            "RETRY",
            "INTERVENTION_WAIT",
            "END_PLAN",
            "MARK_SUCCESS",
            "UNRECOGNIZED"
          ]
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "AdviserIssuerOrBuilder": {
      "type": "object",
      "properties": {
        "adviserTypeValue": {
          "type": "integer",
          "format": "int32"
        },
        "adviserType": {
          "type": "string",
          "enum": [
            "UNKNOWN",
            "NEXT_STEP",
            "RETRY",
            "INTERVENTION_WAIT",
            "END_PLAN",
            "MARK_SUCCESS",
            "UNRECOGNIZED"
          ]
        },
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/Message"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "initialized": {
          "type": "boolean"
        }
      }
    },
    "AsyncExecutableResponse": {
      "type": "object",
      "properties": {
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "mode": {
          "type": "string",
          "enum": [
            "RUNNING_MODE",
            "APPROVAL_WAITING_MODE",
            "RESOURCE_WAITING_MODE",
            "UNRECOGNIZED"
          ]
        },
        "initialized": {
          "type": "boolean"
        },
        "serializedSize": {
          "type": "integer",
          "format": "int32"
        },
        "parserForType": {
          "$ref": "#/definitions/ParserAsyncExecutableResponse"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/AsyncExecutableResponse"
        },
        "callbackIdsList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "callbackIdsCount": {
          "type": "integer",
          "format": "int32"
        },
        "logKeysList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "logKeysCount": {
          "type": "integer",
          "format": "int32"
        },
        "unitsList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "unitsCount": {
          "type": "integer",
          "format": "int32"
        },
        "modeValue": {
          "type": "integer",
          "format": "int32"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "AsyncExecutableResponseOrBuilder": {
      "type": "object",
      "properties": {
        "mode": {
          "type": "string",
          "enum": [
            "RUNNING_MODE",
            "APPROVAL_WAITING_MODE",
            "RESOURCE_WAITING_MODE",
            "UNRECOGNIZED"
          ]
        },
        "callbackIdsList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "callbackIdsCount": {
          "type": "integer",
          "format": "int32"
        },
        "logKeysList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "logKeysCount": {
          "type": "integer",
          "format": "int32"
        },
        "unitsList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "unitsCount": {
          "type": "integer",
          "format": "int32"
        },
        "modeValue": {
          "type": "integer",
          "format": "int32"
        },
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/Message"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "initialized": {
          "type": "boolean"
        }
      }
    },
    "Child": {
      "type": "object",
      "properties": {
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "initialized": {
          "type": "boolean"
        },
        "serializedSize": {
          "type": "integer",
          "format": "int32"
        },
        "parserForType": {
          "$ref": "#/definitions/ParserChild"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/Child"
        },
        "childNodeIdBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "childNodeId": {
          "type": "string"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "ChildChainExecutableResponse": {
      "type": "object",
      "properties": {
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "initialized": {
          "type": "boolean"
        },
        "serializedSize": {
          "type": "integer",
          "format": "int32"
        },
        "parserForType": {
          "$ref": "#/definitions/ParserChildChainExecutableResponse"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/ChildChainExecutableResponse"
        },
        "nextChildId": {
          "type": "string"
        },
        "nextChildIdBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "previousChildId": {
          "type": "string"
        },
        "previousChildIdBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "passThroughData": {
          "$ref": "#/definitions/ByteString"
        },
        "lastLink": {
          "type": "boolean"
        },
        "suspend": {
          "type": "boolean"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "ChildChainExecutableResponseOrBuilder": {
      "type": "object",
      "properties": {
        "nextChildId": {
          "type": "string"
        },
        "nextChildIdBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "previousChildId": {
          "type": "string"
        },
        "previousChildIdBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "passThroughData": {
          "$ref": "#/definitions/ByteString"
        },
        "lastLink": {
          "type": "boolean"
        },
        "suspend": {
          "type": "boolean"
        },
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/Message"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "initialized": {
          "type": "boolean"
        }
      }
    },
    "ChildExecutableResponse": {
      "type": "object",
      "properties": {
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "initialized": {
          "type": "boolean"
        },
        "serializedSize": {
          "type": "integer",
          "format": "int32"
        },
        "parserForType": {
          "$ref": "#/definitions/ParserChildExecutableResponse"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/ChildExecutableResponse"
        },
        "childNodeIdBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "childNodeId": {
          "type": "string"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "ChildExecutableResponseOrBuilder": {
      "type": "object",
      "properties": {
        "childNodeIdBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "childNodeId": {
          "type": "string"
        },
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/Message"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "initialized": {
          "type": "boolean"
        }
      }
    },
    "ChildOrBuilder": {
      "type": "object",
      "properties": {
        "childNodeIdBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "childNodeId": {
          "type": "string"
        },
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/Message"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "initialized": {
          "type": "boolean"
        }
      }
    },
    "ChildrenExecutableResponse": {
      "type": "object",
      "properties": {
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "initialized": {
          "type": "boolean"
        },
        "serializedSize": {
          "type": "integer",
          "format": "int32"
        },
        "parserForType": {
          "$ref": "#/definitions/ParserChildrenExecutableResponse"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/ChildrenExecutableResponse"
        },
        "childrenCount": {
          "type": "integer",
          "format": "int32"
        },
        "childrenList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Child"
          }
        },
        "childrenOrBuilderList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChildOrBuilder"
          }
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "ChildrenExecutableResponseOrBuilder": {
      "type": "object",
      "properties": {
        "childrenCount": {
          "type": "integer",
          "format": "int32"
        },
        "childrenList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Child"
          }
        },
        "childrenOrBuilderList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChildOrBuilder"
          }
        },
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/Message"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "initialized": {
          "type": "boolean"
        }
      }
    },
    "DelegateInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "taskId": {
          "type": "string"
        },
        "taskName": {
          "type": "string"
        }
      }
    },
    "ExecutableResponse": {
      "type": "object",
      "properties": {
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "async": {
          "$ref": "#/definitions/AsyncExecutableResponse"
        },
        "responseCase": {
          "type": "string",
          "enum": [
            "ASYNC",
            "CHILD",
            "CHILDREN",
            "CHILDCHAIN",
            "TASK",
            "TASKCHAIN",
            "SYNC",
            "SKIPTASK",
            "RESPONSE_NOT_SET"
          ]
        },
        "asyncOrBuilder": {
          "$ref": "#/definitions/AsyncExecutableResponseOrBuilder"
        },
        "child": {
          "$ref": "#/definitions/ChildExecutableResponse"
        },
        "childOrBuilder": {
          "$ref": "#/definitions/ChildExecutableResponseOrBuilder"
        },
        "children": {
          "$ref": "#/definitions/ChildrenExecutableResponse"
        },
        "childrenOrBuilder": {
          "$ref": "#/definitions/ChildrenExecutableResponseOrBuilder"
        },
        "childChain": {
          "$ref": "#/definitions/ChildChainExecutableResponse"
        },
        "childChainOrBuilder": {
          "$ref": "#/definitions/ChildChainExecutableResponseOrBuilder"
        },
        "taskOrBuilder": {
          "$ref": "#/definitions/TaskExecutableResponseOrBuilder"
        },
        "taskChain": {
          "$ref": "#/definitions/TaskChainExecutableResponse"
        },
        "taskChainOrBuilder": {
          "$ref": "#/definitions/TaskChainExecutableResponseOrBuilder"
        },
        "sync": {
          "$ref": "#/definitions/SyncExecutableResponse"
        },
        "syncOrBuilder": {
          "$ref": "#/definitions/SyncExecutableResponseOrBuilder"
        },
        "skipTask": {
          "$ref": "#/definitions/SkipTaskExecutableResponse"
        },
        "skipTaskOrBuilder": {
          "$ref": "#/definitions/SkipTaskExecutableResponseOrBuilder"
        },
        "task": {
          "$ref": "#/definitions/TaskExecutableResponse"
        },
        "initialized": {
          "type": "boolean"
        },
        "serializedSize": {
          "type": "integer",
          "format": "int32"
        },
        "parserForType": {
          "$ref": "#/definitions/ParserExecutableResponse"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/ExecutableResponse"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "ExecutionGraph": {
      "type": "object",
      "properties": {
        "rootNodeId": {
          "type": "string"
        },
        "nodeMap": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ExecutionNode"
          }
        },
        "nodeAdjacencyListMap": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ExecutionNodeAdjacencyList"
          }
        },
        "representationStrategy": {
          "type": "string",
          "enum": ["camelCase"]
        }
      }
    },
    "ExecutionNode": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string"
        },
        "setupId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "baseFqn": {
          "type": "string"
        },
        "outcomes": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "stepParameters": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "startTs": {
          "type": "integer",
          "format": "int64"
        },
        "endTs": {
          "type": "integer",
          "format": "int64"
        },
        "stepType": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "Running",
            "Failed",
            "NotStarted",
            "Expired",
            "Aborted",
            "Queued",
            "Paused",
            "Waiting",
            "Success",
            "Suspended",
            "Skipped",
            "Pausing"
          ]
        },
        "failureInfo": {
          "$ref": "#/definitions/FailureInfoDTO"
        },
        "skipInfo": {
          "$ref": "#/definitions/SkipInfo"
        },
        "nodeRunInfo": {
          "$ref": "#/definitions/NodeRunInfo"
        },
        "executableResponses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecutableResponse"
          }
        },
        "taskIdToProgressDataMap": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ProgressData"
            }
          }
        },
        "unitProgresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UnitProgress"
          }
        },
        "delegateInfoList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DelegateInfo"
          }
        },
        "interruptHistories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InterruptEffect"
          }
        }
      }
    },
    "ExecutionNodeAdjacencyList": {
      "type": "object",
      "properties": {
        "children": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "nextIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "FailureInfoDTO": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "failureTypeList": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "EXPIRED",
              "DELEGATE_PROVISIONING",
              "CONNECTIVITY",
              "AUTHENTICATION",
              "VERIFICATION_FAILURE",
              "APPLICATION_ERROR",
              "AUTHORIZATION_ERROR",
              "TIMEOUT_ERROR"
            ]
          }
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "InterruptConfig": {
      "type": "object",
      "properties": {
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "configCase": {
          "type": "string",
          "enum": ["RETRYINTERRUPTCONFIG", "CONFIG_NOT_SET"]
        },
        "issuedBy": {
          "$ref": "#/definitions/IssuedBy"
        },
        "issuedByOrBuilder": {
          "$ref": "#/definitions/IssuedByOrBuilder"
        },
        "retryInterruptConfig": {
          "$ref": "#/definitions/RetryInterruptConfig"
        },
        "retryInterruptConfigOrBuilder": {
          "$ref": "#/definitions/RetryInterruptConfigOrBuilder"
        },
        "initialized": {
          "type": "boolean"
        },
        "serializedSize": {
          "type": "integer",
          "format": "int32"
        },
        "parserForType": {
          "$ref": "#/definitions/ParserInterruptConfig"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/InterruptConfig"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "InterruptEffect": {
      "type": "object",
      "required": [
        "interruptConfig",
        "interruptId",
        "interruptType",
        "tookEffectAt"
      ],
      "properties": {
        "interruptId": {
          "type": "string"
        },
        "tookEffectAt": {
          "type": "integer",
          "format": "int64"
        },
        "interruptType": {
          "type": "string",
          "enum": [
            "UNKNOWN",
            "ABORT",
            "ABORT_ALL",
            "PAUSE",
            "PAUSE_ALL",
            "RESUME",
            "RESUME_ALL",
            "RETRY",
            "IGNORE",
            "WAITING_FOR_MANUAL_INTERVENTION",
            "MARK_FAILED",
            "MARK_SUCCESS",
            "NEXT_STEP",
            "END_EXECUTION",
            "MARK_EXPIRED",
            "CUSTOM_FAILURE",
            "UNRECOGNIZED"
          ]
        },
        "interruptConfig": {
          "$ref": "#/definitions/InterruptConfig"
        }
      }
    },
    "IssuedBy": {
      "type": "object",
      "properties": {
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "initialized": {
          "type": "boolean"
        },
        "serializedSize": {
          "type": "integer",
          "format": "int32"
        },
        "parserForType": {
          "$ref": "#/definitions/ParserIssuedBy"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/IssuedBy"
        },
        "manualIssuer": {
          "$ref": "#/definitions/ManualIssuer"
        },
        "manualIssuerOrBuilder": {
          "$ref": "#/definitions/ManualIssuerOrBuilder"
        },
        "adviserIssuer": {
          "$ref": "#/definitions/AdviserIssuer"
        },
        "adviserIssuerOrBuilder": {
          "$ref": "#/definitions/AdviserIssuerOrBuilder"
        },
        "timeoutIssuer": {
          "$ref": "#/definitions/TimeoutIssuer"
        },
        "timeoutIssuerOrBuilder": {
          "$ref": "#/definitions/TimeoutIssuerOrBuilder"
        },
        "issuerCase": {
          "type": "string",
          "enum": [
            "MANUALISSUER",
            "ADVISERISSUER",
            "TIMEOUTISSUER",
            "ISSUER_NOT_SET"
          ]
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "IssuedByOrBuilder": {
      "type": "object",
      "properties": {
        "manualIssuer": {
          "$ref": "#/definitions/ManualIssuer"
        },
        "manualIssuerOrBuilder": {
          "$ref": "#/definitions/ManualIssuerOrBuilder"
        },
        "adviserIssuer": {
          "$ref": "#/definitions/AdviserIssuer"
        },
        "adviserIssuerOrBuilder": {
          "$ref": "#/definitions/AdviserIssuerOrBuilder"
        },
        "timeoutIssuer": {
          "$ref": "#/definitions/TimeoutIssuer"
        },
        "timeoutIssuerOrBuilder": {
          "$ref": "#/definitions/TimeoutIssuerOrBuilder"
        },
        "issuerCase": {
          "type": "string",
          "enum": [
            "MANUALISSUER",
            "ADVISERISSUER",
            "TIMEOUTISSUER",
            "ISSUER_NOT_SET"
          ]
        },
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/Message"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "initialized": {
          "type": "boolean"
        }
      }
    },
    "ManualIssuer": {
      "type": "object",
      "properties": {
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "initialized": {
          "type": "boolean"
        },
        "serializedSize": {
          "type": "integer",
          "format": "int32"
        },
        "parserForType": {
          "$ref": "#/definitions/ParserManualIssuer"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/ManualIssuer"
        },
        "emailId": {
          "type": "string"
        },
        "emailIdBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "userId": {
          "type": "string"
        },
        "userIdBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "ManualIssuerOrBuilder": {
      "type": "object",
      "properties": {
        "emailId": {
          "type": "string"
        },
        "emailIdBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "userId": {
          "type": "string"
        },
        "userIdBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/Message"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "initialized": {
          "type": "boolean"
        }
      }
    },
    "NodeRunInfo": {
      "type": "object",
      "properties": {
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "evaluatedCondition": {
          "type": "boolean"
        },
        "whenCondition": {
          "type": "string"
        },
        "whenConditionBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "initialized": {
          "type": "boolean"
        },
        "serializedSize": {
          "type": "integer",
          "format": "int32"
        },
        "parserForType": {
          "$ref": "#/definitions/ParserNodeRunInfo"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/NodeRunInfo"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "ParserAdviserIssuer": {
      "type": "object"
    },
    "ParserAsyncExecutableResponse": {
      "type": "object"
    },
    "ParserChild": {
      "type": "object"
    },
    "ParserChildChainExecutableResponse": {
      "type": "object"
    },
    "ParserChildExecutableResponse": {
      "type": "object"
    },
    "ParserChildrenExecutableResponse": {
      "type": "object"
    },
    "ParserExecutableResponse": {
      "type": "object"
    },
    "ParserInterruptConfig": {
      "type": "object"
    },
    "ParserIssuedBy": {
      "type": "object"
    },
    "ParserManualIssuer": {
      "type": "object"
    },
    "ParserNodeRunInfo": {
      "type": "object"
    },
    "ParserRetryInterruptConfig": {
      "type": "object"
    },
    "ParserSkipInfo": {
      "type": "object"
    },
    "ParserSkipTaskExecutableResponse": {
      "type": "object"
    },
    "ParserSyncExecutableResponse": {
      "type": "object"
    },
    "ParserTaskChainExecutableResponse": {
      "type": "object"
    },
    "ParserTaskExecutableResponse": {
      "type": "object"
    },
    "ParserTimeoutIssuer": {
      "type": "object"
    },
    "ParserUnitProgress": {
      "type": "object"
    },
    "PipelineExecutionDetail": {
      "type": "object",
      "properties": {
        "pipelineExecution": {
          "$ref": "#/definitions/PipelineExecutionSummaryDTO"
        },
        "stageGraph": {
          "$ref": "#/definitions/ExecutionGraph"
        },
        "stageRollbackGraph": {
          "$ref": "#/definitions/ExecutionGraph"
        }
      }
    },
    "ProgressData": {
      "type": "object"
    },
    "ResponsePipelineExecutionDetail": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PipelineExecutionDetail"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "RetryInterruptConfig": {
      "type": "object",
      "properties": {
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "initialized": {
          "type": "boolean"
        },
        "serializedSize": {
          "type": "integer",
          "format": "int32"
        },
        "parserForType": {
          "$ref": "#/definitions/ParserRetryInterruptConfig"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/RetryInterruptConfig"
        },
        "retryIdBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "retryId": {
          "type": "string"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "RetryInterruptConfigOrBuilder": {
      "type": "object",
      "properties": {
        "retryIdBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "retryId": {
          "type": "string"
        },
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/Message"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "initialized": {
          "type": "boolean"
        }
      }
    },
    "SkipInfo": {
      "type": "object",
      "properties": {
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "skipCondition": {
          "type": "string"
        },
        "skipConditionBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "evaluatedCondition": {
          "type": "boolean"
        },
        "initialized": {
          "type": "boolean"
        },
        "serializedSize": {
          "type": "integer",
          "format": "int32"
        },
        "parserForType": {
          "$ref": "#/definitions/ParserSkipInfo"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/SkipInfo"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "SkipTaskExecutableResponse": {
      "type": "object",
      "properties": {
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "message": {
          "type": "string"
        },
        "initialized": {
          "type": "boolean"
        },
        "serializedSize": {
          "type": "integer",
          "format": "int32"
        },
        "parserForType": {
          "$ref": "#/definitions/ParserSkipTaskExecutableResponse"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/SkipTaskExecutableResponse"
        },
        "messageBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "SkipTaskExecutableResponseOrBuilder": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "messageBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/Message"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "initialized": {
          "type": "boolean"
        }
      }
    },
    "SyncExecutableResponse": {
      "type": "object",
      "properties": {
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "initialized": {
          "type": "boolean"
        },
        "serializedSize": {
          "type": "integer",
          "format": "int32"
        },
        "parserForType": {
          "$ref": "#/definitions/ParserSyncExecutableResponse"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/SyncExecutableResponse"
        },
        "logKeysList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "logKeysCount": {
          "type": "integer",
          "format": "int32"
        },
        "unitsList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "unitsCount": {
          "type": "integer",
          "format": "int32"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "SyncExecutableResponseOrBuilder": {
      "type": "object",
      "properties": {
        "logKeysList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "logKeysCount": {
          "type": "integer",
          "format": "int32"
        },
        "unitsList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "unitsCount": {
          "type": "integer",
          "format": "int32"
        },
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/Message"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "initialized": {
          "type": "boolean"
        }
      }
    },
    "TaskChainExecutableResponse": {
      "type": "object",
      "properties": {
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "initialized": {
          "type": "boolean"
        },
        "serializedSize": {
          "type": "integer",
          "format": "int32"
        },
        "parserForType": {
          "$ref": "#/definitions/ParserTaskChainExecutableResponse"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/TaskChainExecutableResponse"
        },
        "taskName": {
          "type": "string"
        },
        "logKeysList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "logKeysCount": {
          "type": "integer",
          "format": "int32"
        },
        "unitsList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "unitsCount": {
          "type": "integer",
          "format": "int32"
        },
        "taskCategoryValue": {
          "type": "integer",
          "format": "int32"
        },
        "taskCategory": {
          "type": "string",
          "enum": [
            "UNKNOWN_CATEGORY",
            "DELEGATE_TASK_V1",
            "DELEGATE_TASK_V2",
            "UNRECOGNIZED"
          ]
        },
        "taskNameBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "chainEnd": {
          "type": "boolean"
        },
        "passThroughData": {
          "$ref": "#/definitions/ByteString"
        },
        "taskIdBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "taskId": {
          "type": "string"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "TaskChainExecutableResponseOrBuilder": {
      "type": "object",
      "properties": {
        "taskName": {
          "type": "string"
        },
        "logKeysList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "logKeysCount": {
          "type": "integer",
          "format": "int32"
        },
        "unitsList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "unitsCount": {
          "type": "integer",
          "format": "int32"
        },
        "taskCategoryValue": {
          "type": "integer",
          "format": "int32"
        },
        "taskCategory": {
          "type": "string",
          "enum": [
            "UNKNOWN_CATEGORY",
            "DELEGATE_TASK_V1",
            "DELEGATE_TASK_V2",
            "UNRECOGNIZED"
          ]
        },
        "taskNameBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "chainEnd": {
          "type": "boolean"
        },
        "passThroughData": {
          "$ref": "#/definitions/ByteString"
        },
        "taskIdBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "taskId": {
          "type": "string"
        },
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/Message"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "initialized": {
          "type": "boolean"
        }
      }
    },
    "TaskExecutableResponse": {
      "type": "object",
      "properties": {
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "initialized": {
          "type": "boolean"
        },
        "serializedSize": {
          "type": "integer",
          "format": "int32"
        },
        "parserForType": {
          "$ref": "#/definitions/ParserTaskExecutableResponse"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/TaskExecutableResponse"
        },
        "taskName": {
          "type": "string"
        },
        "logKeysList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "logKeysCount": {
          "type": "integer",
          "format": "int32"
        },
        "unitsList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "unitsCount": {
          "type": "integer",
          "format": "int32"
        },
        "taskCategoryValue": {
          "type": "integer",
          "format": "int32"
        },
        "taskCategory": {
          "type": "string",
          "enum": [
            "UNKNOWN_CATEGORY",
            "DELEGATE_TASK_V1",
            "DELEGATE_TASK_V2",
            "UNRECOGNIZED"
          ]
        },
        "taskNameBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "taskIdBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "taskId": {
          "type": "string"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "TaskExecutableResponseOrBuilder": {
      "type": "object",
      "properties": {
        "taskName": {
          "type": "string"
        },
        "logKeysList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "logKeysCount": {
          "type": "integer",
          "format": "int32"
        },
        "unitsList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "unitsCount": {
          "type": "integer",
          "format": "int32"
        },
        "taskCategoryValue": {
          "type": "integer",
          "format": "int32"
        },
        "taskCategory": {
          "type": "string",
          "enum": [
            "UNKNOWN_CATEGORY",
            "DELEGATE_TASK_V1",
            "DELEGATE_TASK_V2",
            "UNRECOGNIZED"
          ]
        },
        "taskNameBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "taskIdBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "taskId": {
          "type": "string"
        },
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/Message"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "initialized": {
          "type": "boolean"
        }
      }
    },
    "TimeoutIssuer": {
      "type": "object",
      "properties": {
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "initialized": {
          "type": "boolean"
        },
        "serializedSize": {
          "type": "integer",
          "format": "int32"
        },
        "parserForType": {
          "$ref": "#/definitions/ParserTimeoutIssuer"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/TimeoutIssuer"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "TimeoutIssuerOrBuilder": {
      "type": "object",
      "properties": {
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/Message"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "initialized": {
          "type": "boolean"
        }
      }
    },
    "UnitProgress": {
      "type": "object",
      "properties": {
        "unknownFields": {
          "$ref": "#/definitions/UnknownFieldSet"
        },
        "unitName": {
          "type": "string"
        },
        "unitNameBytes": {
          "$ref": "#/definitions/ByteString"
        },
        "statusValue": {
          "type": "integer",
          "format": "int32"
        },
        "status": {
          "type": "string",
          "enum": [
            "UNKNOWN",
            "SUCCESS",
            "FAILURE",
            "RUNNING",
            "QUEUED",
            "SKIPPED",
            "EXPIRED",
            "UNRECOGNIZED"
          ]
        },
        "startTime": {
          "type": "integer",
          "format": "int64"
        },
        "endTime": {
          "type": "integer",
          "format": "int64"
        },
        "initialized": {
          "type": "boolean"
        },
        "serializedSize": {
          "type": "integer",
          "format": "int32"
        },
        "parserForType": {
          "$ref": "#/definitions/ParserUnitProgress"
        },
        "defaultInstanceForType": {
          "$ref": "#/definitions/UnitProgress"
        },
        "initializationErrorString": {
          "type": "string"
        },
        "descriptorForType": {
          "$ref": "#/definitions/Descriptor"
        },
        "allFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "ResponseListExecutionStatus": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Running",
              "Failed",
              "NotStarted",
              "Expired",
              "Aborted",
              "Queued",
              "Paused",
              "Waiting",
              "Success",
              "Suspended",
              "Skipped",
              "Pausing"
            ]
          }
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "JiraProjectBasicNG": {
      "type": "object",
      "required": ["id", "key", "name"],
      "properties": {
        "id": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "ResponseListJiraProjectBasicNG": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JiraProjectBasicNG"
          }
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "JiraStatusCategoryNG": {
      "type": "object",
      "required": ["id", "key", "name"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "key": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "JiraStatusNG": {
      "type": "object",
      "required": ["id", "name"],
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "statusCategory": {
          "$ref": "#/definitions/JiraStatusCategoryNG"
        }
      }
    },
    "ResponseListJiraStatusNG": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JiraStatusNG"
          }
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "JiraFieldAllowedValueNG": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "JiraFieldNG": {
      "type": "object",
      "required": ["allowedValues", "key", "name", "schema"],
      "properties": {
        "key": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "schema": {
          "$ref": "#/definitions/JiraFieldSchemaNG"
        },
        "allowedValues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JiraFieldAllowedValueNG"
          }
        },
        "custom": {
          "type": "boolean"
        }
      }
    },
    "JiraFieldSchemaNG": {
      "type": "object",
      "required": ["type", "typeStr"],
      "properties": {
        "array": {
          "type": "boolean"
        },
        "typeStr": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "string",
            "number",
            "date",
            "datetime",
            "timetracking",
            "option"
          ]
        },
        "customType": {
          "type": "string"
        }
      }
    },
    "JiraIssueCreateMetadataNG": {
      "type": "object",
      "properties": {
        "projects": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/JiraProjectNG"
          }
        }
      }
    },
    "JiraIssueTypeNG": {
      "type": "object",
      "required": ["fields", "id", "name", "statuses"],
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "statuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JiraStatusNG"
          }
        },
        "fields": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/JiraFieldNG"
          }
        },
        "subTask": {
          "type": "boolean"
        }
      }
    },
    "JiraProjectNG": {
      "type": "object",
      "required": ["id", "issuetypes", "key", "name"],
      "properties": {
        "id": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "issuetypes": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/JiraIssueTypeNG"
          }
        }
      }
    },
    "ResponseJiraIssueCreateMetadataNG": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/JiraIssueCreateMetadataNG"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "JiraIssueUpdateMetadataNG": {
      "type": "object",
      "required": ["fields"],
      "properties": {
        "fields": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/JiraFieldNG"
          }
        }
      }
    },
    "ResponseJiraIssueUpdateMetadataNG": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/JiraIssueUpdateMetadataNG"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "AwsCodeCommitSCMDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/SourceCodeManagerDTO"
        },
        {
          "type": "object",
          "required": ["authentication"],
          "properties": {
            "authentication": {
              "$ref": "#/definitions/AwsCodeCommitAuthenticationDTO"
            }
          }
        }
      ]
    },
    "AzureDevOpsSCMDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/SourceCodeManagerDTO"
        },
        {
          "type": "object",
          "properties": {
            "authentication": {
              "$ref": "#/definitions/GithubAuthentication"
            }
          }
        }
      ]
    },
    "BitbucketSCMDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/SourceCodeManagerDTO"
        },
        {
          "type": "object",
          "properties": {
            "authentication": {
              "$ref": "#/definitions/BitbucketAuthentication"
            }
          }
        }
      ]
    },
    "GithubSCMDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/SourceCodeManagerDTO"
        },
        {
          "type": "object",
          "properties": {
            "authentication": {
              "$ref": "#/definitions/GithubAuthentication"
            }
          }
        }
      ]
    },
    "GitlabSCMDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/SourceCodeManagerDTO"
        },
        {
          "type": "object",
          "required": ["authentication"],
          "properties": {
            "authentication": {
              "$ref": "#/definitions/GitlabAuthentication"
            }
          }
        }
      ]
    },
    "ResponseListSourceCodeManagerDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SourceCodeManagerDTO"
          }
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "SourceCodeManagerAuthentication": {
      "type": "object"
    },
    "SourceCodeManagerDTO": {
      "type": "object",
      "required": ["name"],
      "discriminator": "type",
      "properties": {
        "id": {
          "type": "string"
        },
        "userIdentifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "lastModifiedAt": {
          "type": "integer",
          "format": "int64"
        },
        "type": {
          "type": "string",
          "enum": [
            "BITBUCKET",
            "GITHUB",
            "GITLAB",
            "AWS_CODE_COMMIT",
            "AZURE_DEV_OPS"
          ]
        },
        "authentication": {
          "$ref": "#/definitions/SourceCodeManagerAuthentication"
        }
      }
    },
    "ResponseSourceCodeManagerDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/SourceCodeManagerDTO"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ResponseUserInfo": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/UserInfo"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "UserInfo": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "defaultAccountId": {
          "type": "string"
        },
        "admin": {
          "type": "boolean"
        },
        "twoFactorAuthenticationEnabled": {
          "type": "boolean"
        }
      }
    },
    "ResponseTwoFactorAuthSettingsInfo": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/TwoFactorAuthSettingsInfo"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "TwoFactorAuthSettingsInfo": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "twoFactorAuthenticationEnabled": {
          "type": "boolean"
        },
        "mechanism": {
          "type": "string",
          "enum": ["TOTP"]
        },
        "totpSecretKey": {
          "type": "string"
        },
        "totpqrurl": {
          "type": "string"
        }
      }
    },
    "InputSetError": {
      "type": "object",
      "properties": {
        "fieldName": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "identifierOfErrorSource": {
          "type": "string"
        }
      }
    },
    "InputSetErrorResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputSetError"
          }
        }
      }
    },
    "InputSetErrorWrapper": {
      "type": "object",
      "properties": {
        "errorPipelineYaml": {
          "type": "string"
        },
        "uuidToErrorResponseMap": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/InputSetErrorResponse"
          }
        }
      }
    },
    "InputSetResponse": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "orgIdentifier": {
          "type": "string"
        },
        "projectIdentifier": {
          "type": "string"
        },
        "pipelineIdentifier": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "inputSetYaml": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "inputSetErrorWrapper": {
          "$ref": "#/definitions/InputSetErrorWrapper"
        },
        "version": {
          "type": "integer",
          "format": "int64"
        },
        "errorResponse": {
          "type": "boolean"
        }
      }
    },
    "ResponseInputSetResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/InputSetResponse"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "OverlayInputSetResponse": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "orgIdentifier": {
          "type": "string"
        },
        "projectIdentifier": {
          "type": "string"
        },
        "pipelineIdentifier": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "inputSetReferences": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "overlayInputSetYaml": {
          "type": "string"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "invalidInputSetReferences": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "version": {
          "type": "integer",
          "format": "int64"
        },
        "errorResponse": {
          "type": "boolean"
        }
      }
    },
    "ResponseOverlayInputSetResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/OverlayInputSetResponse"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "InputSetConfig": {
      "type": "object",
      "required": ["identifier", "pipeline"],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "pipeline": {
          "$ref": "#/definitions/NgPipeline"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "OverlayInputSetConfig": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "inputSetReferences": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "InputSetSummaryResponse": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "pipelineIdentifier": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "inputSetType": {
          "type": "string",
          "enum": ["INPUT_SET", "OVERLAY_INPUT_SET"]
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "version": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PageInputSetSummaryResponse": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int64"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64"
        },
        "pageItemCount": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputSetSummaryResponse"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int64"
        },
        "empty": {
          "type": "boolean"
        }
      }
    },
    "ResponsePageInputSetSummaryResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PageInputSetSummaryResponse"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "InputSetTemplateResponse": {
      "type": "object",
      "properties": {
        "inputSetTemplateYaml": {
          "type": "string"
        }
      }
    },
    "ResponseInputSetTemplateResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/InputSetTemplateResponse"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "MergeInputSetResponse": {
      "type": "object",
      "properties": {
        "pipelineYaml": {
          "type": "string"
        },
        "inputSetErrorWrapper": {
          "$ref": "#/definitions/InputSetErrorWrapper"
        },
        "errorResponse": {
          "type": "boolean"
        }
      }
    },
    "ResponseMergeInputSetResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/MergeInputSetResponse"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "NGPipelineResponse": {
      "type": "object",
      "properties": {
        "ngPipeline": {
          "$ref": "#/definitions/NgPipeline"
        },
        "executionsPlaceHolder": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "yamlPipeline": {
          "type": "string"
        },
        "version": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ResponseNGPipelineResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/NGPipelineResponse"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "NGPipelineSummaryResponse": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "numOfStages": {
          "type": "integer",
          "format": "int32"
        },
        "numOfErrors": {
          "type": "integer",
          "format": "int32"
        },
        "deployments": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "version": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ResponseNGPipelineSummaryResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/NGPipelineSummaryResponse"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "PageNGPipelineSummaryResponse": {
      "type": "object",
      "properties": {
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NGPipelineSummaryResponse"
          }
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "last": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "empty": {
          "type": "boolean"
        }
      }
    },
    "ResponsePageNGPipelineSummaryResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PageNGPipelineSummaryResponse"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ApprovalStageConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/StageInfoConfig"
        },
        {
          "type": "object",
          "required": ["execution"],
          "properties": {
            "execution": {
              "$ref": "#/definitions/ExecutionElementConfig"
            }
          }
        }
      ]
    },
    "BarrierInfoConfig": {
      "type": "object",
      "required": ["identifier", "name"],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "CIProperties": {
      "type": "object",
      "properties": {
        "codebase": {
          "$ref": "#/definitions/CodeBase"
        }
      }
    },
    "DeploymentStageConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/StageInfoConfig"
        },
        {
          "type": "object",
          "required": ["execution", "infrastructure", "serviceConfig"],
          "properties": {
            "serviceConfig": {
              "$ref": "#/definitions/ServiceConfig"
            },
            "infrastructure": {
              "$ref": "#/definitions/PipelineInfrastructure"
            },
            "execution": {
              "$ref": "#/definitions/ExecutionElementConfig"
            }
          }
        }
      ]
    },
    "FeatureStageConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/StageInfoConfig"
        },
        {
          "type": "object",
          "properties": {}
        }
      ]
    },
    "FlowControlConfig": {
      "type": "object",
      "properties": {
        "barriers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BarrierInfoConfig"
          }
        }
      }
    },
    "NGProperties": {
      "type": "object",
      "properties": {
        "ci": {
          "$ref": "#/definitions/CIProperties"
        }
      }
    },
    "NotificationChannelWrapper": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "spec": {
          "$ref": "#/definitions/PmsNotificationChannel"
        }
      }
    },
    "NotificationRules": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "pipelineEvents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PipelineEvent"
          }
        },
        "notificationMethod": {
          "$ref": "#/definitions/NotificationChannelWrapper"
        }
      }
    },
    "ParallelStageElementConfig": {
      "type": "object",
      "required": ["sections"],
      "properties": {
        "sections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StageElementWrapperConfig"
          }
        }
      }
    },
    "PipelineConfig": {
      "type": "object",
      "properties": {
        "pipeline": {
          "readOnly": true,
          "$ref": "#/definitions/PipelineInfoConfig"
        }
      }
    },
    "PipelineEvent": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "AllEvents",
            "PipelineStart",
            "PipelineSuccess",
            "PipelineFailed",
            "PipelinePaused",
            "StageSuccess",
            "StageFailed",
            "StageStart",
            "StepFailed"
          ]
        },
        "forStages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "PipelineInfoConfig": {
      "type": "object",
      "required": ["identifier", "name"],
      "properties": {
        "name": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "flowControl": {
          "$ref": "#/definitions/FlowControlConfig"
        },
        "description": {
          "type": "string"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "variables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NGVariable"
          }
        },
        "properties": {
          "$ref": "#/definitions/NGProperties"
        },
        "stages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StageElementWrapperConfig"
          }
        },
        "notificationRules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NotificationRules"
          }
        }
      }
    },
    "PmsEmailChannel": {
      "allOf": [
        {
          "$ref": "#/definitions/PmsNotificationChannel"
        },
        {
          "type": "object",
          "properties": {
            "userGroups": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "recipients": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "PmsMSTeamChannel": {
      "allOf": [
        {
          "$ref": "#/definitions/PmsNotificationChannel"
        },
        {
          "type": "object",
          "properties": {
            "msTeamKeys": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "userGroups": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "PmsNotificationChannel": {
      "type": "object",
      "discriminator": "type"
    },
    "PmsPagerDutyChannel": {
      "allOf": [
        {
          "$ref": "#/definitions/PmsNotificationChannel"
        },
        {
          "type": "object",
          "properties": {
            "userGroups": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "integrationKey": {
              "type": "string"
            }
          }
        }
      ]
    },
    "PmsSlackChannel": {
      "allOf": [
        {
          "$ref": "#/definitions/PmsNotificationChannel"
        },
        {
          "type": "object",
          "properties": {
            "userGroups": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "webhookUrl": {
              "type": "string"
            }
          }
        }
      ]
    },
    "ResponsePipelineConfig": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PipelineConfig"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "StageElementConfig": {
      "type": "object",
      "required": ["identifier", "name", "type"],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "skipCondition": {
          "type": "string"
        },
        "failureStrategies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FailureStrategyConfig"
          }
        },
        "variables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NGVariable"
          }
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "type": {
          "type": "string"
        },
        "spec": {
          "$ref": "#/definitions/StageInfoConfig"
        }
      }
    },
    "StageElementWrapperConfig": {
      "type": "object",
      "properties": {
        "stage": {
          "$ref": "#/definitions/StageElementConfig"
        },
        "parallel": {
          "$ref": "#/definitions/ParallelStageElementConfig"
        }
      }
    },
    "StageInfoConfig": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "execution": {
          "$ref": "#/definitions/ExecutionElementConfig"
        }
      }
    },
    "RestResponseUserInfo": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "$ref": "#/definitions/UserInfo"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "SignupDTO": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "utmInfo": {
          "$ref": "#/definitions/UtmInfo"
        }
      }
    },
    "OAuthSignupDTO": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "utmInfo": {
          "$ref": "#/definitions/UtmInfo"
        }
      }
    },
    "JsonNode": {
      "type": "object",
      "properties": {
        "object": {
          "type": "boolean"
        },
        "valueNode": {
          "type": "boolean"
        },
        "containerNode": {
          "type": "boolean"
        },
        "missingNode": {
          "type": "boolean"
        },
        "nodeType": {
          "type": "string",
          "enum": [
            "ARRAY",
            "BINARY",
            "BOOLEAN",
            "MISSING",
            "NULL",
            "NUMBER",
            "OBJECT",
            "POJO",
            "STRING"
          ]
        },
        "pojo": {
          "type": "boolean"
        },
        "number": {
          "type": "boolean"
        },
        "integralNumber": {
          "type": "boolean"
        },
        "floatingPointNumber": {
          "type": "boolean"
        },
        "short": {
          "type": "boolean"
        },
        "int": {
          "type": "boolean"
        },
        "long": {
          "type": "boolean"
        },
        "float": {
          "type": "boolean"
        },
        "double": {
          "type": "boolean"
        },
        "bigDecimal": {
          "type": "boolean"
        },
        "bigInteger": {
          "type": "boolean"
        },
        "textual": {
          "type": "boolean"
        },
        "boolean": {
          "type": "boolean"
        },
        "binary": {
          "type": "boolean"
        },
        "array": {
          "type": "boolean"
        },
        "null": {
          "type": "boolean"
        }
      }
    },
    "PartialSchemaDTO": {
      "type": "object",
      "properties": {
        "schema": {
          "$ref": "#/definitions/JsonNode"
        },
        "nodeType": {
          "type": "string"
        },
        "nodeName": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        }
      }
    },
    "ResponsePartialSchemaDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PartialSchemaDTO"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ResponseJsonNode": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/JsonNode"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ResponseYamlSnippets": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/YamlSnippets"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "YamlSnippetMetaData": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "iconTag": {
          "type": "string"
        }
      }
    },
    "YamlSnippets": {
      "type": "object",
      "properties": {
        "yamlSnippets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/YamlSnippetMetaData"
          }
        }
      }
    }
  }
}
